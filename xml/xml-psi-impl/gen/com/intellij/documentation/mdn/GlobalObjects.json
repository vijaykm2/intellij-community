{
  "license": {
    "name": "CC-BY-SA 2.5",
    "url": "https://creativecommons.org/licenses/by-sa/2.5/"
  },
  "author": {
    "name": "Mozzila Contributors",
    "url": "https://github.com/mdn/content"
  },
  "lang": "en-us",
  "symbols": {
    "aggregateerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/aggregateerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>AggregateError</strong></code> object represents an error when several errors need to be wrapped in a single error. It is thrown when multiple errors need to be reported by an operation, for example by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/any\"><code>Promise.any()</code></a>, when all promises passed to it reject.</p>"
    },
    "aggregateerror.aggregateerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/aggregateerror/aggregateerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>AggregateError()</strong></code> constructor creates an error for several errors that need to be wrapped in a single error.</p>",
      "parameters": {
        "errors": "An iterable of errors, may not actually be\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>\ninstances.",
        "message": "An optional human-readable description of the aggregate error."
      }
    },
    "array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The JavaScript <strong><code>Array</code></strong> class is a global object that is used in the construction of arrays; which are high-level, list-like objects.</p>"
    },
    "array.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>@@iterator</strong></code> method is part of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\">The iterable protocol</a>, that defines how to synchronously iterate over a sequence of values.</p>\n<p>The initial value of the <code><strong>@@iterator</strong></code> property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>values()</code></a> property.</p>",
      "returns": "<p>The initial value given by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>values()</code></a> <strong>iterator</strong>. By default, using <code>arr[Symbol.iterator]</code> will return the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/values\"><code>values()</code></a> function.</p>"
    },
    "array.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Array[@@species]</code></strong> accessor property returns the <code>Array</code> constructor.</p>",
      "returns": "<p>The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> constructor.</p>"
    },
    "array.@@unscopables": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/@@unscopables",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>@@unscopable</strong></code> symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 version. These properties are excluded from <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/with\">with</a></code> statement bindings.</p>"
    },
    "array.array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Array()</code></strong> constructor is used to create <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> objects.</p>",
      "parameters": {
        "elementN": "A JavaScript array is initialized with the given elements, except in the case where a single argument is passed to the\n<code>Array</code>\nconstructor and that argument is a number (see the arrayLength parameter below). Note that this special case only applies to JavaScript arrays created with the\n<code>Array</code>\nconstructor, not array literals created with the bracket syntax.",
        "arrayLength": "If the only argument passed to the\n<code>Array</code>\nconstructor is an integer between 0 and 2\n<sup>32</sup>\n-1 (inclusive), this returns a new JavaScript array with its \n<code>length</code>\n property set to that number (\n<strong>Note:</strong>\nthis implies an array of\n<code>arrayLength</code>\nempty slots, not slots with actual\n<code>undefined</code>\nvalues). If the argument is any other number, a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a>\nexception is thrown."
      }
    },
    "array.concat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/concat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>concat()</strong></code> method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array.</p>",
      "parameters": {
        "valueN": "Arrays and/or values to concatenate into a new array. If all\n<code>value<em>N</em></code>\nparameters are omitted,\n<code>concat</code>\nreturns a shallow copy of the existing array on which it is called. See the description below for more details."
      },
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance.</p>"
    },
    "array.copywithin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/copywithin",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>copyWithin()</strong></code> method shallow copies part of an array to another location in the same array and returns it without modifying its length.</p>",
      "parameters": {
        "target": "Zero-based index at which to copy the sequence to. If negative,\n<code>target</code>\nwill be counted from the end.If\n<code>target</code>\nis at or greater than\n<code>arr.length</code>\n, nothing will be copied. If\n<code>target</code>\nis positioned after\n<code>start</code>\n, the copied sequence will be trimmed to fit\n<code>arr.length</code>\n.",
        "start": "Zero-based index at which to start copying elements from. If negative,\n<code>start</code>\nwill be counted from the end.If\n<code>start</code>\nis omitted,\n<code>copyWithin</code>\nwill copy from index\n<code>0</code>\n.",
        "end": "Zero-based index at which to end copying elements from.\n<code>copyWithin</code>\ncopies up to but not including\n<code>end</code>\n. If negative,\n<code>end</code>\nwill be counted from the end.If\n<code>end</code>\nis omitted,\n<code>copyWithin</code>\nwill copy until the last index (default to\n<code>arr.length</code>\n)."
      },
      "returns": "<p>The modified array.</p>"
    },
    "array.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/entries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>entries()</code></strong> method returns a new <strong>Array Iterator</strong> object that contains the key/value pairs for each index in the array.</p>",
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> iterator object.</p>"
    },
    "array.every": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/every",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>every()</code></strong> method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value.</span></p>",
      "parameters": {
        "callback": "A function to test for each element, taking three arguments:\n<dl>\n<dt><code><var>element</var></code></dt>\n<dd>The current element being processed in the array.</dd>\n<dt><code><var>index</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of the current element being processed in the array.</dd>\n<dt><code><var>array</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The array <code>every</code> was called upon.</dd>\n</dl>",
        "thisArg": "A value to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p><strong><code>true</code></strong> if the <code><var>callback</var></code> function returns a <a href=\"$MDN_URL$/Glossary/truthy\">truthy</a> value for every array element. Otherwise, <strong><code>false</code></strong>.</p>"
    },
    "array.fill": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/fill",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>fill()</strong></code> method changes all elements in an array to a static value, from a start index (default <code>0</code>) to an end index (default <code>array.length</code>). It returns the modified array.</span></p>",
      "parameters": {
        "value": "Value to fill the array with. (Note all elements in the array will be this exact value.)",
        "start": "Start index, default\n<code>0</code>\n.",
        "end": "End index, default\n<code>arr.length</code>\n."
      },
      "returns": "<p>The modified array, filled with <code>value</code>.</p>"
    },
    "array.filter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/filter",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>filter()</code></strong> method <strong>creates a new array</strong> with all elements that pass the test implemented by the provided function.</p>",
      "parameters": {
        "callback": "Function is a predicate, to test each element of the array. Return a value that coerces to <code>true</code> to keep the element, or to <code>false</code> otherwise.<br>\nIt accepts three arguments:<br>\n<dl>\n<dt><code><var>currentValue</var></code></dt>\n<dd>The current element being processed in the array.</dd>\n<dt><code><var>index</var></code><span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of the current element being processed in the array.</dd>\n<dt><code><var>array</var></code><span class=\"badge inline optional\">Optional</span></dt>\n<dd>The array <code>filter</code> was called upon.</dd>\n</dl>",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p>A new array with the elements that pass the test. If no elements pass the test, an empty array will be returned.</p>"
    },
    "array.find": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/find",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code>find()</code> method returns the value of the first element in the provided array that satisfies the provided testing function. If no values satisfies the testing function, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.</span></p>\n<ul>\n<li>If you need the <strong>index</strong> of the found element in the array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>.</li>\n<li>If you need to find the <strong>index of a value</strong>, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a>. (It’s similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/findIndex\"><code>findIndex()</code></a>, but checks each element for equality with the value instead of using a testing function.)</li>\n<li>If you need to find if a value <strong>exists</strong> in an array, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a>. Again, it checks each element for equality with the value instead of using a testing function.</li>\n<li>If you need to find if any element satisfies the provided testing function, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a>.</li>\n</ul>",
      "parameters": {
        "callback": "Function to execute on each value in the array, taking 3 arguments:\n<dl>\n<dt><code><var>element</var></code></dt>\n<dd>The current element in the array.</dd>\n<dt><code><var>index</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index (position) of the current element in the array.</dd>\n<dt><code><var>array</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The array that <code>find</code> was called on.</dd>\n</dl>",
        "thisArg": "Object to use as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/this\"><code>this</code></a>\ninside\n<code><var>callback</var></code>\n."
      },
      "returns": "<p>The <strong>value</strong> of the <strong>first element</strong> in the array that satisfies the provided testing function. Otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.</p>"
    },
    "array.findindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/findindex",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>findIndex()</strong></code> method returns the <strong>index</strong> of the first element in the array <strong>that satisfies the provided testing function</strong>. Otherwise, it returns <code>-1</code>, indicating that no element passed the test.</span></p>\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/find\"><code>find()</code></a> method, which returns the <strong>value</strong> of an array element, instead of its index.</p>",
      "parameters": {
        "callback": "A function to execute on each value in the array until the function returns <code>true</code>, indicating that the satisfying element was found.<br>\nIt takes three arguments:<br>\n<dl>\n<dt><code><var>element</var></code></dt>\n<dd>The current element being processed in the array.</dd>\n<dt><code><var>index</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of the current element being processed in the array.</dd>\n<dt><code><var>array</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The array <code>findIndex()</code> was called upon.</dd>\n</dl>",
        "thisArg": "Optional object to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p>The index of the first element in the array that passes the test. Otherwise, <code>-1</code>.</p>"
    },
    "array.flat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/flat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>flat()</strong></code> method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth.</p>",
      "parameters": {
        "depth": "The depth level specifying how deep a nested array structure should be flattened. Defaults to 1."
      },
      "returns": "<p>A new array with the sub-array elements concatenated into it.</p>"
    },
    "array.flatmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/flatmap",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>flatMap()</strong></code> method returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>map()</code></a> followed by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/flat\"><code>flat()</code></a> of depth 1, but slightly more efficient than calling those two methods separately.</p>",
      "parameters": {
        "callback": "Function that produces an element of the new Array, taking three arguments:\n<dl>\n<dt><code>currentValue</code></dt>\n<dd>The current element being processed in the array.</dd>\n<dt><code>index</code><span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of the current element being processed in the array.</dd>\n<dt><code>array</code><span class=\"badge inline optional\">Optional</span></dt>\n<dd>The array <code>map</code> was called upon.</dd>\n</dl>",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code>callback</code>\n."
      },
      "returns": "<p>A new array with each element being the result of the callback function and flattened to a depth of 1.</p>"
    },
    "array.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/foreach",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>forEach()</strong></code> method executes a provided function once for each array element.</p>",
      "parameters": {
        "callback": "Function to execute on each element. It accepts between one and three arguments:<dl>\n<dt><code><var>currentValue</var></code></dt>\n<dd>The current element being processed in the array.</dd>\n<dt><code><var>index</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of <code><var>currentValue</var></code> in the array.</dd>\n<dt><code><var>array</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The array <code>forEach()</code> was called upon.</dd>\n</dl>",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p><code>undefined</code>.</p>"
    },
    "array.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/from",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>Array.from()</strong></code> static method creates a new, shallow-copied <code>Array</code> instance from an array-like or iterable object.</span></p>",
      "parameters": {
        "arrayLike": "An array-like or iterable object to convert to an array.",
        "mapFn": "Map function to call on every element of the array.",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code><var>mapFn</var></code>\n."
      },
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance.</p>"
    },
    "array.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/includes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>includes()</strong></code> method determines whether an array includes a certain value among its entries, returning <code>true</code> or <code>false</code> as appropriate.</p>",
      "parameters": {
        "valueToFind": "The value to search for.<br>\n<div class=\"notecard note\">\n<strong>Note:</strong> When comparing strings and characters, <code>includes()</code> is <em>case-sensitive</em>.<br>\n</div>",
        "fromIndex": "The position in this array at which to begin searching for\n<code><var>valueToFind</var></code>\n.The first element to be searched is found at\n<code><var>fromIndex</var></code>\nfor positive values of\n<code><var>fromIndex</var></code>\n, or at\n<code><var>arr</var>.length + <var>fromIndex</var></code>\nfor negative values of\n<code><var>fromIndex</var></code>\n(using the\n<a  href=\"https://en.wikipedia.org/wiki/absolute value\">absolute value</a>\nof\n<code><var>fromIndex</var></code>\nas the number of elements from the end of the array at which to start the search).Defaults to\n<code>0</code>\n."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> which is <code>true</code> if the value <code><var>valueToFind</var></code> is found within the array (or the part of the array indicated by the index <code><var>fromIndex</var></code>, if specified).</p>\n\n<p>Values of zero are all considered to be equal, regardless of sign. (That is, <code>-0</code> is considered to be equal to both <code>0</code> and <code>+0</code>), but <code>false</code> is <em>not</em> considered to be the same as <code>0</code>.</p>\n\n<div class=\"note notecard\">\n<p><strong>Note:</strong> Technically speaking, <code>includes()</code> uses the <code><a href=\"$MDN_URL$/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality\">sameValueZero</a></code> algorithm to determine whether the given element is found.</p>\n</div>"
    },
    "array.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/indexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>indexOf()</strong></code> method returns the first index at which a given element can be found in the array, or -1 if it is not present.</p>",
      "parameters": {
        "searchElement": "Element to locate in the array.",
        "fromIndex": "The index to start the search at. If the index is greater than or equal to the array's length, -1 is returned, which means the array will not be searched. If the provided index value is a negative number, it is taken as the offset from the end of the array. Note: if the provided index is negative, the array is still searched from front to back. If the provided index is 0, then the whole array will be searched. Default: 0 (entire array is searched)."
      },
      "returns": "<p>The first index of the element in the array; <strong>-1</strong> if not found.</p>"
    },
    "array.isarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/isarray",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Array.isArray()</strong></code> method determines whether the passed value is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>.</p>\n<pre class=\"brush: js notranslate\"><code>Array.isArray([1, 2, 3]);  // true\nArray.isArray({foo: 123}); // false\nArray.isArray('foobar');   // false\nArray.isArray(undefined);  // false\n</code></pre>",
      "parameters": {
        "value": "The value to be checked."
      },
      "returns": "<p><code>true</code> if the value is an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>; otherwise, <code>false</code>.</p>"
    },
    "array.join": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/join",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>join()</strong></code> method creates and returns a new string by concatenating all of the elements in an array (or an <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects\">array-like object</a>), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator.</span></p>",
      "parameters": {
        "separator": "Specifies a string to separate each pair of adjacent elements of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma (\",\"). If\n<code>separator</code>\nis an empty string, all elements are joined without any characters in between them."
      },
      "returns": "<p>A string with all array elements joined. If <code><em>arr</em>.length</code> is <code>0</code>, the empty string is returned.</p>"
    },
    "array.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/keys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>keys()</code></strong> method returns a new <strong>Array Iterator</strong> object that contains the keys for each index in the array.</p>",
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> iterator object.</p>"
    },
    "array.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>lastIndexOf()</code></strong> method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at <code>fromIndex</code>.</p>",
      "parameters": {
        "searchElement": "Element to locate in the array.",
        "fromIndex": "The index at which to start searching backwards. Defaults to the array's length minus one (\n<code>arr.length - 1</code>\n), i.e. the whole array will be searched. If the index is greater than or equal to the length of the array, the whole array will be searched. If negative, it is taken as the offset from the end of the array. Note that even when the index is negative, the array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the array will not be searched."
      },
      "returns": "<p>The last index of the element in the array; <strong>-1</strong> if not found.</p>"
    },
    "array.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/length",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>length</strong></code> property of an object which is an instance of type <code>Array</code> sets or returns the number of elements in that array. The value is an unsigned, 32-bit integer that is always numerically greater than the highest index in the array.</p>"
    },
    "array.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/map",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>map()</strong></code> method <strong>creates a new array</strong> populated with the results of calling a provided function on every element in the calling array.</span></p>",
      "parameters": {
        "callback": "Function that is called for every element of <code><var>arr</var></code>. Each time <code><var>callback</var></code> executes, the returned value is added to <code><var>newArray</var></code>.<br>\nThe <code><var>callback</var></code> function accepts the following arguments:<br>\n<dl>\n<dt><code><var>currentValue</var></code></dt>\n<dd>The current element being processed in the array.</dd>\n<dt><code><var>index</var></code><span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of the current element being processed in the array.</dd>\n<dt><code><var>array</var></code><span class=\"badge inline optional\">Optional</span></dt>\n<dd>The array <code>map</code> was called upon.</dd>\n</dl>",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p>A new array with each element being the result of the callback function.</p>"
    },
    "array.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/of",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Array.of()</strong></code> method creates a new <code>Array</code> instance from a variable number of arguments, regardless of number or type of the arguments.</p>\n<p>The difference between <code><strong>Array.of()</strong></code> and the <code><strong>Array</strong></code> constructor is in the handling of integer arguments: <code><strong>Array.of(7)</strong></code> creates an array with a single element, <code>7</code>, whereas <code><strong>Array(7)</strong></code> creates an empty array with a <code>length</code> property of <code>7</code> (<strong>Note:</strong> this implies an array of <code>7</code> empty slots, not slots with actual <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> values).</p>\n<pre class=\"brush: js notranslate\"><code>Array.of(7); // [7]\nArray(7); // array of 7 empty slots\nArray.of(1, 2, 3); // [1, 2, 3]\nArray(1, 2, 3);    // [1, 2, 3]\n</code></pre>",
      "parameters": {
        "elementN": "Elements used to create the array."
      },
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> instance.</p>"
    },
    "array.pop": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/pop",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>pop()</code></strong> method removes the <strong>last</strong> element from an array and returns that element. This method changes the length of the array.</p>",
      "returns": "<p>The removed element from the array; <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the array is empty.</p>"
    },
    "array.push": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/push",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>push()</strong></code> method adds one or more elements to the end of an array and returns the new length of the array.</p>",
      "parameters": {
        "elementN": "The element(s) to add to the end of the array."
      },
      "returns": "<p>The new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property of the object upon which the method was called.</p>"
    },
    "array.reduce": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reduce",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>reduce()</strong></code> method executes a <strong>reducer</strong> function (that you provide) on each element of the array, resulting in single output value.</p>\n<p>The <strong>reducer</strong> function takes four arguments:</p>\n<ol>\n<li>Accumulator</li>\n<li>Current Value</li>\n<li>Current Index</li>\n<li>Source Array</li>\n</ol>\n<p>Your <strong>reducer</strong> function's returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.</p>",
      "parameters": {
        "callback": "A function to execute on each element in the array (except for the first, if no <code><var>initialValue</var></code> is supplied).<br>\nIt takes four arguments:<br>\n<dl>\n<dt><code><var>accumulator</var></code></dt>\n<dd>The accumulator accumulates <var>callback</var>'s return values. It is the accumulated value previously returned in the last invocation of the callback—or <code><var>initialValue</var></code>, if it was supplied (see below).</dd>\n<dt><code><var>currentValue</var></code></dt>\n<dd>The current element being processed in the array.</dd>\n<dt><code><var>index</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of the current element being processed in the array. Starts from index <code>0</code> if an <code>initialValue</code> is provided. Otherwise, it starts from index <code>1</code>.</dd>\n<dt><code><var>array</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The array <code>reduce()</code> was called upon.</dd>\n</dl>",
        "initialValue": "A value to use as the first argument to the first call of the\n<code><var>callback</var></code>\n. If no\n<code><var>initialValue</var></code>\nis supplied, the first element in the array will be used as the initial\n<code><var>accumulator</var></code>\nvalue and skipped as\n<code><var>currentValue</var></code>\n. Calling\n<code>reduce()</code>\non an empty array without an\n<code><var>initialValue</var></code>\nwill throw a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>\n."
      },
      "returns": "<p>The single value that results from the reduction.</p>"
    },
    "array.reduceright": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reduceright",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>reduceRight()</strong></code> method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.</p>\n<p>See also <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/Reduce\"><code>Array.prototype.reduce()</code></a> for left-to-right.</p>",
      "parameters": {
        "callback": "Function to execute on each value in the array, taking four arguments:\n<dl>\n<dt><code><var>accumulator</var></code></dt>\n<dd>The value previously returned in the last invocation of the callback, or <code><var>initialValue</var></code>, if supplied. (See below.)</dd>\n<dt><code><var>currentValue</var></code></dt>\n<dd>The current element being processed in the array.</dd>\n<dt><code><var>index</var></code><span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of the current element being processed in the array.</dd>\n<dt><code><var>array</var></code><span class=\"badge inline optional\">Optional</span></dt>\n<dd>The array <code>reduceRight()</code> was called upon.</dd>\n</dl>",
        "initialValue": "Value to use as accumulator to the first call of the\n<code><var>callback</var></code>\n. If no initial value is supplied, the last element in the array will be used and skipped. Calling reduce or reduceRight on an empty array without an initial value creates a\n<code>TypeError</code>\n."
      },
      "returns": "<p>The value that results from the reduction.</p>"
    },
    "array.reverse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/reverse",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>reverse()</code></strong> method reverses an array <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\">in place</a></em>. The first array element becomes the last, and the last array element becomes the first.</p>",
      "returns": "<p>The reversed array.</p>"
    },
    "array.shift": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/shift",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>shift()</strong></code> method removes the <strong>first</strong> element from an array and returns that removed element. This method changes the length of the array.</p>",
      "returns": "<p>The removed element from the array; <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the array is empty.</p>"
    },
    "array.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/slice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>slice()</code></strong> method returns a shallow copy of a portion of an array into a new array object selected from <code>start</code> to <code>end</code> (<code>end</code> not included) where <code>start</code> and <code>end</code> represent the index of items in that array. The original array will not be modified.</p>",
      "parameters": {
        "start": "Zero-based index at which to start extraction.A negative index can be used, indicating an offset from the end of the sequence.\n<code>slice(-2)</code>\nextracts the last two elements in the sequence.If\n<code><var>start</var></code>\nis undefined,\n<code>slice</code>\nstarts from the index\n<code>0</code>\n.If\n<code><var>start</var></code>\nis greater than the index range of the sequence, an empty array is returned.",
        "end": "Zero-based index\n<em>before</em>\nwhich to end extraction.\n<code>slice</code>\nextracts up to but not including\n<code><var>end</var></code>\n. For example,\n<code>slice(1,4)</code>\nextracts the second element through the fourth element (elements indexed 1, 2, and 3).A negative index can be used, indicating an offset from the end of the sequence.\n<code>slice(2,-1)</code>\nextracts the third element through the second-to-last element in the sequence.If\n<code><var>end</var></code>\nis omitted,\n<code>slice</code>\nextracts through the end of the sequence (\n<code><var>arr</var>.length</code>\n).If\n<code><var>end</var></code>\nis greater than the length of the sequence,\n<code>slice</code>\nextracts through to the end of the sequence (\n<code><var>arr</var>.length</code>\n)."
      },
      "returns": "<p>A new array containing the extracted elements.</p>"
    },
    "array.some": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/some",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>some()</code></strong> method tests whether at least one element in the array passes the test implemented by the provided function. It returns a Boolean value. </span></p>",
      "parameters": {
        "callback": "A function to test for each element, taking three arguments:<br>\n<dl>\n<dt><code><var>element</var></code></dt>\n<dd>The current element being processed in the array.</dd>\n<dt><code><var>index</var></code><span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of the current element being processed in the array.</dd>\n<dt><code><var>array</var></code><span class=\"badge inline optional\">Optional</span></dt>\n<dd>The array <code>some()</code> was called upon.</dd>\n</dl>",
        "thisArg": "A value to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p><code>true</code> if the callback function returns a <a href=\"$MDN_URL$/Glossary/truthy\">truthy</a> value for at least one element in the array. Otherwise, <code>false</code>.</p>"
    },
    "array.sort": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/sort",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>sort()</strong></code> method sorts the elements of an array <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\">in place</a></em> and returns the sorted array. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.</p>\n<p>The time and space complexity of the sort cannot be guaranteed as it depends on the implementation.</p>",
      "parameters": {
        "compareFunction": "Specifies a function that defines the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's\n<a href=\"$MDN_URL$/Web/JavaScript/Guide/Grammar_and_types#Unicode\" data-flaw=\"link1\">Unicode</a>\ncode point value.\n<dl>\n<dt><code>firstEl</code></dt>\n<dd>The first element for comparison.</dd>\n<dt><code>secondEl</code></dt>\n<dd>The second element for comparison.</dd>\n</dl>"
      },
      "returns": "<p>The sorted array. Note that the array is sorted <em><a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\">in place</a></em>, and no copy is made.</p>"
    },
    "array.splice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/splice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>splice()</code></strong> method changes the contents of an array by removing or replacing existing elements and/or adding new elements <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\">in place</a>.</p>",
      "parameters": {
        "start": "The index at which to start changing the array.If greater than the length of the array,\n<code><var>start</var></code>\nwill be set to the length of the array. In this case, no element will be deleted but the method will behave as an adding function, adding as many element as item[n*] provided.If negative, it will begin that many elements from the end of the array. (In this case, the origin\n<code>-1</code>\n, meaning\n<code>-<var>n</var></code>\nis the index of the\n<code><var>n</var></code>\n<sup>th</sup>\nlast element, and is therefore equivalent to the index of\n<code><var>array</var>.length - <var>n</var></code>\n.) If\n<code><var>array</var>.length + <var>start</var></code>\nis less than\n<code>0</code>\n, it will begin from index\n<code>0</code>\n.",
        "deleteCount": "An integer indicating the number of elements in the array to remove from\n<code><var>start</var></code>\n.If\n<code><var>deleteCount</var></code>\nis omitted, or if its value is equal to or larger than\n<code><var>array</var>.length - <var>start</var></code>\n(that is, if it is equal to or greater than the number of elements left in the array, starting at\n<code><var>start</var></code>\n), then all the elements from\n<code><var>start</var></code>\nto the end of the array will be deleted.<div class=\"notecard note\">\n<strong>Note:</strong> In IE8, it won't delete all when <code><var>deleteCount</var></code> is omitted.<br>\n</div>If\n<code><var>deleteCount</var></code>\nis\n<code>0</code>\nor negative, no elements are removed. In this case, you should specify at least one new element (see below).",
        "item1, item2, ...": "The elements to add to the array, beginning from\n<code><var>start</var></code>\n. If you do not specify any elements,\n<code>splice()</code>\nwill only remove elements from the array."
      },
      "returns": "<p>An array containing the deleted elements.</p>\n\n<p>If only one element is removed, an array of one element is returned.</p>\n\n<p>If no elements are removed, an empty array is returned.</p>"
    },
    "array.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleString()</code></strong> method returns a string representing the elements of the array. The elements are converted to Strings using their <code>toLocaleString</code> methods and these Strings are separated by a locale-specific String (such as a comma “,”).</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the\n<code>locales</code>\nargument, see the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code></a>\npage.",
        "options": "An object with configuration properties, for numbers see\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString()</code></a>\n, and for dates see\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString\"><code>Date.prototype.toLocaleString()</code></a>\n."
      },
      "returns": "<p>A string representing the elements of the array.</p>"
    },
    "array.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <code><strong>toSource()</strong></code> method returns a string representing the source code of the array.</p>",
      "returns": "<p>A string representing the source code of the array.</p>"
    },
    "array.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toString()</strong></code> method returns a string representing the specified array and its elements.</p>",
      "returns": "<p>A string representing the elements of the array.</p>"
    },
    "array.unshift": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/unshift",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>unshift()</strong></code> method adds one or more elements to the beginning of an array and returns the new length of the array.</p>",
      "parameters": {
        "elementN": "The elements to add to the front of the\n<code><var>arr</var></code>\n."
      },
      "returns": "<p>The new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/length\"><code>length</code></a> property of the object upon which the method was called.</p>"
    },
    "array.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/array/values",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>values()</code></strong> method returns a new <strong><code>Array Iterator</code></strong> object that contains the values for each index in the array.</p>",
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> iterator object.</p>"
    },
    "arraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ArrayBuffer</code></strong> object is used to represent a generic, fixed-length raw binary data buffer.</p>\n<p>It is an array of bytes, often referred to in other languages as a \"byte array\".You cannot directly manipulate the contents of an <code>ArrayBuffer</code>; instead, you create one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\">typed array objects</a> or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> object which represents the buffer in a specific format, and use that to read and write the contents of the buffer.</p>\n<p>The <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer/ArrayBuffer\">ArrayBuffer()</a></code> constructor creates a new <code>ArrayBuffer</code> of the given length in bytes. You can also get an array buffer from existing data, for example <a href=\"$MDN_URL$/Glossary/Base64#Appendix_to_Solution_1_Decode_a_Base64_string_to_Uint8Array_or_ArrayBuffer\" data-flaw=\"link1\">from a Base64 string</a> or <a href=\"$MDN_URL$/Web/API/FileReader/readAsArrayBuffer\">from a local file</a>.</p>"
    },
    "arraybuffer.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ArrayBuffer[@@species]</code></strong> accessor property returns the <code>ArrayBuffer</code> constructor.</p>"
    },
    "arraybuffer.arraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/arraybuffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ArrayBuffer()</code></strong> constructor is used to create <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> objects.</p>",
      "parameters": {
        "length": "The size, in bytes, of the array buffer to create."
      },
      "returns": "<p>A new <code>ArrayBuffer</code> object of the specified size. Its contents are initialized to 0.</p>"
    },
    "arraybuffer.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/bytelength",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteLength</code></strong> accessor property represents the length of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> in bytes.</p>"
    },
    "arraybuffer.isview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/isview",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ArrayBuffer.isView()</code></strong> method determines whether the passed value is one of the <code>ArrayBuffer</code> views, such as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\">typed array objects</a> or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "value": "The value to be checked."
      },
      "returns": "<p><code>true</code> if the given argument is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> views; otherwise, <code>false</code>.</p>"
    },
    "arraybuffer.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/arraybuffer/slice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>slice()</code></strong> method returns a new <code>ArrayBuffer</code> whose contents are a copy of this <code>ArrayBuffer</code>'s bytes from <code>begin</code>, inclusive, up to <code>end</code>, exclusive.</p>",
      "parameters": {
        "begin": "Zero-based byte index at which to begin slicing.",
        "end": "Byte index before which to end slicing. If end is unspecified, the new\n<code>ArrayBuffer</code>\ncontains all bytes from begin to the end of this\n<code>ArrayBuffer</code>\n. If negative, it will make the Byte index begin from the last Byte."
      },
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object.</p>"
    },
    "asyncfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/asyncfunction",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>AsyncFunction</code> constructor</strong> creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/async_function\">async function</a> object. In JavaScript, every asynchronous function is actually an <code>AsyncFunction</code> object.</p>\n<p>Note that <code>AsyncFunction</code> is <em>not</em> a global object. It can be obtained with the following code:</p>\n<pre class=\"brush: js notranslate\"><code>Object.getPrototypeOf(async function(){}).constructor\n</code></pre>",
      "parameters": {
        "arg1, arg2, ... argN": "Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example \"\n<code>x</code>\n\", \"\n<code>theValue</code>\n\", or \"\n<code>a,b</code>\n\".",
        "functionBody": "A string containing the JavaScript statements comprising the function definition."
      }
    },
    "atomics": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Atomics</code></strong> object provides atomic operations as static methods. They are used with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> objects.</p>"
    },
    "atomics.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/add",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.add()</code></strong> method adds a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</p>",
      "parameters": {
        "typedArray": "An integer typed array. One of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>\n, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>\n.",
        "index": "The position in the\n<code><var>typedArray</var></code>\nto add a\n<code><var>value</var></code>\nto.",
        "value": "The number to add."
      },
      "returns": "<p>The old value at the given position (<code><var>typedArray</var>[<var>index</var>]</code>).</p>"
    },
    "atomics.and": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/and",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.and()</code></strong> method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</p>",
      "parameters": {
        "typedArray": "An integer typed array. One of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>\n, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>\n.",
        "index": "The position in the\n<code><var>typedArray</var></code>\nto compute the bitwise AND.",
        "value": "The number to compute the bitwise AND with."
      },
      "returns": "<p>The old value at the given position (<code><var>typedArray</var>[<var>index</var>]</code>).</p>"
    },
    "atomics.compareexchange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/compareexchange",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.compareExchange()</code></strong> method exchanges a given replacement value at a given position in the array, if a given expected value equals the old value.  It returns the old value at that position whether it was equal to the expected value or not. This atomic operation guarantees that no other write happens until the modified value is written back.</p>",
      "parameters": {
        "typedArray": "An integer typed array. One of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>\n, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>\n.",
        "index": "The position in the\n<code><var>typedArray</var></code>\nto exchange a\n<code><var>value</var></code>\n.",
        "expectedValue": "The value to check for equality.",
        "replacementValue": "The number to exchange."
      },
      "returns": "<p>The old value at the given position (<code><var>typedArray</var>[<var>index</var>]</code>).</p>"
    },
    "atomics.exchange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/exchange",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Atomics.exchange()</code></strong> method stores a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens between the read of the old value and the write of the new value.</p>",
      "parameters": {
        "typedArray": "An integer typed array. One of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>\n, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>\n.",
        "index": "The position in the\n<code><var>typedArray</var></code>\nto exchange a\n<code><var>value</var></code>\n.",
        "value": "The number to exchange."
      },
      "returns": "<p>The old value at the given position (<code><var>typedArray</var>[<var>index</var>]</code>).</p>"
    },
    "atomics.islockfree": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/islockfree",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.isLockFree()</code></strong> method is used to determine whether to use locks or atomic operations. It returns <code>true</code>, if the given size is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/BYTES_PER_ELEMENT\">BYTES_PER_ELEMENT</a> property of integer TypedArray types.</p>",
      "parameters": {
        "size": "The size in bytes to check."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether the operation is lock free.</p>"
    },
    "atomics.load": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/load",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.load()</code></strong> method returns a value at a given position in the array.</p>",
      "parameters": {
        "typedArray": "An integer typed array. One of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>\n, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>\n.",
        "index": "The position in the\n<code>typedArray</code>\nto load from."
      },
      "returns": "<p>The value at the given position (<code>typedArray[index]</code>).</p>"
    },
    "atomics.notify": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/notify",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.notify()</code></strong> method notifies up some agents that are sleeping in the wait queue.</p>\n<div class=\"note notecard\">\n<p><strong>Note:</strong> This operation works with a shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> only.<br>\nIt will return <code>0</code> on non-shared <code>ArrayBuffer</code> objects.</p>\n</div>",
      "parameters": {
        "typedArray": "A shared\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n.",
        "index": "The position in the\n<code>typedArray</code>\nto wake up on.",
        "count": "The number of sleeping agents to notify. Defaults to\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>+Infinity</code></a>\n."
      },
      "returns": "<ul>\n <li>Returns the number of woken up agents.</li>\n <li>Returns <code>0</code>, if a non-shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object is used.</li>\n</ul>"
    },
    "atomics.or": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/or",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.or()</code></strong> method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</p>",
      "parameters": {
        "typedArray": "An integer typed array. One of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>\n, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>\n.",
        "index": "The position in the\n<code><var>typedArray</var></code>\nto compute the bitwise OR.",
        "value": "The number to compute the bitwise OR with."
      },
      "returns": "<p>The old value at the given position (<code><var>typedArray</var>[<var>index</var>]</code>).</p>"
    },
    "atomics.store": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/store",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.store()</code></strong> method stores a given value at the given position in the array and returns that value.</p>",
      "parameters": {
        "typedArray": "An integer typed array. One of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>\n, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>\n.",
        "index": "The position in the\n<code><var>typedArray</var></code>\nto store a\n<code><var>value</var></code>\nin.",
        "value": "The number to store."
      },
      "returns": "<p>The value that has been stored.</p>"
    },
    "atomics.sub": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/sub",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Atomics.sub()</code></strong> method substracts a given value at a given position in the array and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</p>",
      "parameters": {
        "typedArray": "An integer typed array. One of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>\n, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>\n.",
        "index": "The position in the\n<code><var>typedArray</var></code>\nto subtract a\n<code><var>value</var></code>\nfrom.",
        "value": "The number to subtract."
      },
      "returns": "<p>The old value at the given position (<code><var>typedArray</var>[<var>index</var>]</code>).</p>"
    },
    "atomics.wait": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/wait",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.wait()</code></strong> method verifies that a given position in an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> still contains a given value and if so sleeps, awaiting a wakeup or a timeout. It returns a string which is either \"<code>ok</code>\", \"<code>not-equal</code>\", or \"<code>timed-out</code>\".</p>\n<div class=\"note notecard\">\n<p><strong>Note:</strong> This operation only works with a shared <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a> and may not be allowed on the main thread.</p>\n</div>",
      "parameters": {
        "typedArray": "A shared\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n.",
        "index": "The position in the\n<code><var>typedArray</var></code>\nto wait on.",
        "value": "The expected value to test.",
        "timeout": "Time to wait in milliseconds.\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>\n, if no time is provided."
      },
      "returns": "<p>A string which is either \"<code>ok</code>\", \"<code>not-equal</code>\", or \"<code>timed-out</code>\".</p>"
    },
    "atomics.xor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/atomics/xor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Atomics</strong></code><strong><code>.xor()</code></strong> method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position. This atomic operation guarantees that no other write happens until the modified value is written back.</p>",
      "parameters": {
        "typedArray": "An integer typed array. One of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int8Array\"><code>Int8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint8Array\"><code>Uint8Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int16Array\"><code>Int16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint16Array\"><code>Uint16Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Int32Array\"><code>Int32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Uint32Array\"><code>Uint32Array</code></a>\n,\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a>\n, or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a>\n.",
        "index": "The position in the\n<code>typedArray</code>\nto compute the bitwise XOR.",
        "value": "The number to compute the bitwise XOR with."
      },
      "returns": "<p>The old value at the given position (<code>typedArray[index]</code>).</p>"
    },
    "bigint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><strong><code>BigInt</code></strong> is a built-in object that provides a way to represent whole numbers larger than 2<sup>53</sup> - 1, which is the largest number JavaScript can reliably represent with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> <a href=\"$MDN_URL$/Glossary/Primitive\">primitive</a> and represented by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\"><code>Number.MAX_SAFE_INTEGER</code></a> constant. <strong><code>BigInt</code></strong> can be used for arbitrarily large integers.</p>"
    },
    "bigint.asintn": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/asintn",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigInt.asIntN</code></strong> static method is used to wrap a BigInt value to a signed integer between -2<sup>width-1</sup> and 2<sup>width-1</sup>-1.</p>",
      "parameters": {
        "width": "The amount of bits available for the integer size.",
        "bigint": "The integer to clamp to fit into the supplied bits."
      }
    },
    "bigint.asuintn": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/asuintn",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigInt.asUintN</code></strong> static method is used to wrap a BigInt value to an unsigned integer between 0 and 2<sup>width</sup>-1.</p>",
      "parameters": {
        "width": "The amount of bits available for the integer size.",
        "bigint": "The integer to clamp to fit into the supplied bits."
      }
    },
    "bigint.bigint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/bigint",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigInt()</code></strong> constructor returns a value of type <strong>bigint</strong>.</p>",
      "parameters": {
        "value": "The numeric value of the object being created. May be a string or an integer."
      }
    },
    "bigint.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleString()</code></strong> method returns a string with a language-sensitive representation of this BigInt.</p>",
      "returns": "<p>A string with a language-sensitive representation of the given BigInt.</p>"
    },
    "bigint.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> object. The trailing \"n\" is not part of the string.</p>",
      "parameters": {
        "radix": "Optional. An integer in the range 2 through 36 specifying the base to use for representing numeric values."
      },
      "returns": "<p>A string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> object.</p>",
      "throws": {
        "RangeError": "If\n<code>toString()</code>\nis given a radix less than 2 or greater than 36, a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a>\nis thrown."
      }
    },
    "bigint.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the wrapped primitive value of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> object.</p>",
      "returns": "<p>A BigInt representing the primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> object.</p>"
    },
    "bigint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigInt64Array</code></strong> typed array represents an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).</p>"
    },
    "bigint64array.bigint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/bigint64array/bigint64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigInt64Array()</code></strong> typed array constructor creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt64Array\"><code>BigInt64Array</code></a> object, which is, an array of 64-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code><var>typedArray</var></code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "biguint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/biguint64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigUint64Array</code></strong> typed array represents an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).</p>"
    },
    "biguint64array.biguint64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/biguint64array/biguint64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>BigUint64Array()</code></strong> typed array constructor creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigUint64Array\"><code>BigUint64Array</code></a> object, which is, an array of 64-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0n</code>. Once established, you can reference elements in the array using the object's methods, or by using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code><var>typedArray</var></code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "boolean": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Boolean</code></strong> object is an object wrapper for a boolean value.</p>"
    },
    "boolean.boolean": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/boolean",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Boolean()</code></strong> constructor is used to create <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> objects.</p>",
      "parameters": {
        "value": "The initial value of the\n<code>Boolean</code>\nobject."
      }
    },
    "boolean.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <code><strong>toSource()</strong></code> method returns a string representing the source code of the object.</p>",
      "returns": "<p>A string representing the source code of the object.</p>"
    },
    "boolean.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toString()</strong></code> method returns a string representing the specified Boolean object.</p>",
      "returns": "<p>A string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> object.</p>"
    },
    "boolean.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/boolean/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>valueOf()</strong></code> method returns the primitive value of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> object.</p>",
      "returns": "<p>The primitive value of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> object</p>"
    },
    "dataview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>DataView</code></strong> view provides a low-level interface for reading and writing multiple number types in a binary <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, without having to care about the platform's <a href=\"$MDN_URL$/Glossary/Endianness\">endianness</a>.</span></p>"
    },
    "dataview.buffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/buffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>buffer</code></strong> accessor property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> referenced by the <code>DataView</code> at construction time.</p>"
    },
    "dataview.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/bytelength",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteLength</code></strong> accessor property represents the length (in bytes) of this view from the start of its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.</p>"
    },
    "dataview.byteoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/byteoffset",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteOffset</code></strong> accessor property represents the offset (in bytes) of this view from the start of its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>.</p>"
    },
    "dataview.dataview": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/dataview",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>DataView()</code></strong> constructor is used to create <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> objects.</p>",
      "parameters": {
        "buffer": "An existing\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\nor\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a>\nto use as the storage backing the new\n<code>DataView</code>\nobject.",
        "byteOffset": "The offset, in bytes, to the first byte in the above buffer for the new view to reference. If unspecified, the buffer view starts with the first byte.",
        "byteLength": "The number of elements in the byte array. If unspecified, the view's length will match the buffer's length."
      },
      "returns": "<p>A new <code>DataView</code> object representing the specified data buffer. (That probably wasn't a very helpful description.)</p>\n\n<p>You can think of the returned object as an \"interpreter\" of the array buffer of bytes — it knows how to convert numbers to fit within the buffer correctly, both when reading and writing to it. This means handling integer and float conversion, endianness, and other details of representing numbers in binary form.</p>",
      "throws": {
        "RangeError": "Thrown if the <code>byteOffset</code> or <code>byteLength</code> parameter values result in the view extending past the end of the buffer.<br>\nFor example, if the buffer is 16 bytes long, the <code>byteOffset</code> is 8, and the <code>byteLength</code> is 10, this error is thrown because the resulting view tries to extend 2 bytes past the total length of the buffer.<br>"
      }
    },
    "dataview.getbigint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getbigint64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getBigInt64()</code></strong> method gets a signed 64-bit integer (long long) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 64-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is read."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>.</p>"
    },
    "dataview.getbiguint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getbiguint64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getBigUint64()</code></strong> method gets an unsigned 64-bit integer (unsigned long long) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to read the data from.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 64-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is read."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>.</p>"
    },
    "dataview.getfloat32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getfloat32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getFloat32()</code></strong> method gets a signed 32-bit float (float) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 32-bit float is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is read."
      },
      "returns": "<p>A signed 32-bit float number.</p>"
    },
    "dataview.getfloat64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getfloat64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getFloat64()</code></strong> method gets a signed 64-bit float (double) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 64-bit float is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is read."
      },
      "returns": "<p>A signed 64-bit float number.</p>"
    },
    "dataview.getint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint16",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getInt16()</code></strong> method gets a signed 16-bit integer (short) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 16-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is read."
      },
      "returns": "<p>A signed 16-bit integer number.</p>"
    },
    "dataview.getint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getInt32()</code></strong> method gets a signed 32-bit integer (long) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view where to read the data.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 32-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is read."
      },
      "returns": "<p>A signed 32-bit integer number.</p>"
    },
    "dataview.getint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getint8",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getInt8()</code></strong> method gets a signed 8-bit integer (byte) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data."
      },
      "returns": "<p>A signed 8-bit integer number.</p>"
    },
    "dataview.getuint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint16",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUint16()</code></strong> method gets an unsigned 16-bit integer (unsigned short) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 16-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is read."
      },
      "returns": "<p>An unsigned 16-bit integer number.</p>"
    },
    "dataview.getuint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUint32()</code></strong> method gets an unsigned 32-bit integer (unsigned long) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 32-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is read."
      },
      "returns": "<p>An unsigned 32-bit integer number.</p>"
    },
    "dataview.getuint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/getuint8",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUint8()</code></strong> method gets an unsigned 8-bit integer (unsigned byte) at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to read the data."
      },
      "returns": "<p>An unsigned 8-bit integer number.</p>"
    },
    "dataview.setbigint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setbigint64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setBigInt64()</code></strong> method stores a signed 64-bit integer (long long) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data from.",
        "value": "The value to set as a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>\n. The highest possible value that fits in a signed 64-bit integer is\n<code><span class=\"blob-code-inner blob-code-marker\">2n ** (64n -1n) - 1n</span></code>\n<span class=\"blob-code-inner blob-code-marker\"> (<code>9223372036854775807n</code>). Upon overflow, it will be negative (</span>\n<code>-9223372036854775808n</code>\n<span class=\"blob-code-inner blob-code-marker\">).</span>",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 64-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is written."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "dataview.setbiguint64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setbiguint64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setBigUint64()</code></strong> method stores an unsigned 64-bit integer (unsigned long long) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in bytes, from the start of the view to store the data from.",
        "value": "The value to set as a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>\n. The highest possible value that fits in an unsigned 64-bit integer is\n<code><span class=\"blob-code-inner blob-code-marker\">2n ** 64n - 1n</span></code>\n<span class=\"blob-code-inner blob-code-marker\"> (</span>\n<code>18446744073709551615n</code>\n<span class=\"blob-code-inner blob-code-marker\">). Upon overflow, it will be zero (</span>\n<code>0n</code>\n<span class=\"blob-code-inner blob-code-marker\">).</span>",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 64-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is written."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "dataview.setfloat32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setfloat32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setFloat32()</code></strong> method stores a signed 32-bit float (float) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 32-bit float is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is written."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "dataview.setfloat64": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setfloat64",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setFloat64()</code></strong> method stores a signed 64-bit float (double) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 64-bit float is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is written."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "dataview.setint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint16",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setInt16()</code></strong> method stores a signed 16-bit integer (short) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 16-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is written."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "dataview.setint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setInt32()</code></strong> method stores a signed 32-bit integer (long) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 32-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is written."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "dataview.setint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setint8",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setInt8()</code></strong> method stores a signed 8-bit integer (byte) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "dataview.setuint16": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint16",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUint16()</code></strong> method stores an unsigned 16-bit integer (unsigned short) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 16-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is written."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "dataview.setuint32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUint32()</code></strong> method stores an unsigned 32-bit integer (unsigned long) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set.",
        "littleEndian": "<span class=\"badge inline optional\">Optional</span>\nIndicates whether the 32-bit int is stored in\n<a href=\"$MDN_URL$/Glossary/Endianness\">little- or big-endian</a>\nformat. If\n<code>false</code>\nor\n<code>undefined</code>\n, a big-endian value is written."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "dataview.setuint8": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/dataview/setuint8",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUint8()</code></strong> method stores an unsigned 8-bit integer (byte) value at the specified byte offset from the start of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a>.</p>",
      "parameters": {
        "byteOffset": "The offset, in byte, from the start of the view where to store the data.",
        "value": "The value to set."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "date": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">JavaScript <strong><code>Date</code></strong> objects represent a single moment in time in a platform-independent format.</span> <code>Date</code> objects contain a <code>Number</code> that represents milliseconds since 1 January 1970 UTC.</p>\n<div class=\"notecard note\">\n<p>TC39 is working on <a href=\"https://tc39.es/proposal-temporal/docs/index.html\">Temporal</a>, a new Date/Time API.<br>\nRead more about it on the <a href=\"https://blogs.igalia.com/compilers/2020/06/23/dates-and-times-in-javascript/\">Igalia blog</a> and fill out the <a href=\"https://forms.gle/iL9iZg7Y9LvH41Nv8\">survey</a>. It needs real-world feedback from web developers, but is not yet ready for production use!</p>\n</div>"
    },
    "date.@@toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/@@toprimitive",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>[@@toPrimitive]()</strong></code> method converts a <code>Date</code> object to a primitive value.</p>",
      "returns": "<p>The primitive value of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object. Depending on the argument, the method can return either a string or a number.</p>"
    },
    "date.date": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/date",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">Creates a JavaScript <strong><code>Date</code></strong> instance that represents a single moment in time in a platform-independent format.</span> <code>Date</code> objects contain a <code>Number</code> that represents milliseconds since 1 January 1970 UTC.</p>"
    },
    "date.getdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getdate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getDate()</code></strong> method returns the day of the month for the specified date according to local time.</p>",
      "returns": "<p>An integer number, between 1 and 31, representing the day of the month for the given date according to local time.</p>"
    },
    "date.getday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getday",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>getDay()</code></strong> method returns the day of the week for the specified date according to local time, where 0 represents Sunday.</span> For the day of the month, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getDate\"><code>Date.prototype.getDate()</code></a>.</p>",
      "returns": "<p>An integer number, between 0 and 6, corresponding to the day of the week for the given date, according to local time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.</p>"
    },
    "date.getfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getfullyear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getFullYear()</code></strong> method returns the year of the specified date according to local time.</p>\n<p>Use this method instead of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getYear\"><code>getYear()</code></a> method.</p>",
      "returns": "<p>A number corresponding to the year of the given date, according to local time.</p>"
    },
    "date.gethours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gethours",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getHours()</code></strong> method returns the hour for the specified date, according to local time.</p>",
      "returns": "<p>An integer number, between 0 and 23, representing the hour for the given date according to local time.</p>"
    },
    "date.getmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getMilliseconds()</code></strong> method returns the milliseconds in the specified date according to local time.</p>",
      "returns": "<p>A number, between 0 and 999, representing the milliseconds for the given date according to local time.</p>"
    },
    "date.getminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getminutes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getMinutes()</code></strong> method returns the minutes in the specified date according to local time.</p>",
      "returns": "<p>An integer number, between 0 and 59, representing the minutes in the given date according to local time.</p>"
    },
    "date.getmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getmonth",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getMonth()</code></strong> method returns the month in the specified date according to local time, as a zero-based value (where zero indicates the first month of the year).</p>",
      "returns": "<p>An integer number, between 0 and 11, representing the month in the given date according to local time. 0 corresponds to January, 1 to February, and so on.</p>"
    },
    "date.getseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getSeconds()</code></strong> method returns the seconds in the specified date according to local time.</p>",
      "returns": "<p>An integer number, between 0 and 59, representing the seconds in the given date according to local time.</p>"
    },
    "date.gettime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gettime",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getTime()</code></strong> method returns the number of milliseconds* since the <a href=\"https://en.wikipedia.org/wiki/Unix_time\">Unix Epoch</a>.</p>\n<p>* JavaScript uses <em>milliseconds</em> as the unit of measurement, whereas Unix Time is in <em>seconds</em>.</p>\n<p><em>getTime() always uses UTC for time representation. For example, a client browser in one timezone, getTime() will be the same as a client browser in any other timezone.</em></p>\n<p>You can use this method to help assign a date and time to another <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object. This method is functionally equivalent to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/valueOf\"><code>valueOf()</code></a> method.</p>",
      "returns": "<p>A number representing the milliseconds elapsed between 1 January 1970 00:00:00 UTC and the given date.</p>"
    },
    "date.gettimezoneoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/gettimezoneoffset",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getTimezoneOffset()</code></strong> method returns the time zone difference, in minutes, from current locale (host system settings) to UTC.</p>",
      "returns": "<p>A number representing the time-zone offset, in minutes, from the date based on current host system settings to UTC.</p>"
    },
    "date.getutcdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcdate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCDate()</code></strong> method returns the day of the month(from 1 to 31) in the specified date according to universal time.</p>",
      "returns": "<p>An integer number ranging from 1 to 31 representing day of month for the given date, according to universal time.</p>"
    },
    "date.getutcday": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcday",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCDay()</code></strong> method returns the day of the week in the specified date according to universal time, where 0 represents Sunday.</p>",
      "returns": "<p>An integer number corresponding to the day of the week for the given date, according to universal time: 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.</p>"
    },
    "date.getutcfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcfullyear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCFullYear()</code></strong> method returns the year in the specified date according to universal time.</p>",
      "returns": "<p>A number representing the year in the given date according to universal time.</p>"
    },
    "date.getutchours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutchours",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCHours()</code></strong> method returns the hours in the specified date according to universal time.</p>",
      "returns": "<p>An integer number, between 0 and 23, representing the hours in the given date according to universal time.</p>"
    },
    "date.getutcmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCMilliseconds()</code></strong> method returns the milliseconds portion of the time object's value.</p>",
      "returns": "<p>An integer number, between 0 and 999, representing the milliseconds portion of the given date object.  This method is a companion to the other UTC based methods that give hour portion, minute portion, etc.; this method gives milliseconds portion.  </p>\n\n<p>Not to be confused with Unix epoch time.  To get total milliseconds since 1970/01/01, use the method \".getTime()\".</p>"
    },
    "date.getutcminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcminutes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCMinutes()</code></strong> method returns the minutes in the specified date according to universal time.</p>",
      "returns": "<p>An integer number, between 0 and 59, representing the minutes in the given date according to universal time.</p>"
    },
    "date.getutcmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcmonth",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCMonth()</code></strong> returns the month of the specified date according to universal time, as a zero-based value (where zero indicates the first month of the year).</p>",
      "returns": "<p>An integer number, between 0 and 11, corresponding to the month of the given date according to universal time. 0 for January, 1 for February, 2 for March, and so on.</p>"
    },
    "date.getutcseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getutcseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>getUTCSeconds()</code></strong> method returns the seconds in the specified date according to universal time.</p>",
      "returns": "<p>An integer number, between 0 and 59, representing the seconds in the given date according to universal time.</p>"
    },
    "date.getyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/getyear",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>getYear()</code></strong> method returns the year in the specified date according to local time. Because <code>getYear()</code> does not return full years (\"year 2000 problem\"), it is no longer used and has been replaced by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/getFullYear\"><code>getFullYear()</code></a> method.</p>",
      "returns": "<p>A number representing the year of the given date, according to local time, minus 1900.</p>"
    },
    "date.now": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/now",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Date.now()</code></strong> method returns the number of milliseconds elapsed since January 1, 1970 00:00:00 UTC.</p>",
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> representing the milliseconds elapsed since the UNIX epoch.</p>"
    },
    "date.parse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/parse",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Date.parse()</code></strong> method parses a string representation of a date, and returns the number of milliseconds since January 1, 1970, 00:00:00 UTC or <code>NaN</code> if the string is unrecognized or, in some cases, contains illegal date values (e.g. 2015-02-31).</p>\n<p>It is not recommended to use <code>Date.parse</code> as until ES5, parsing of strings was entirely implementation dependent. There are still many differences in how different hosts parse date strings, therefore date strings should be manually parsed (a library can help if many different formats are to be accommodated).</p>",
      "parameters": {
        "dateString": "A string representing\n<a href=\"#Date_Time_String_Format\"> a simplification of the ISO 8601 calendar date extended format</a>\n. (Other formats may be used, but results are implementation-dependent.)"
      },
      "returns": "<p>A number representing the milliseconds elapsed since January 1, 1970, 00:00:00 UTC and the date obtained by parsing the given string representation of a date. If the argument doesn't represent a valid date, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned.</p>"
    },
    "date.setdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setdate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setDate()</code></strong> method sets the day of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object relative to the beginning of the currently set month.</p>",
      "parameters": {
        "dayValue": "An integer representing the day of the month."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the given date (the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object is also changed in place).</p>"
    },
    "date.setfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setfullyear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setFullYear()</code></strong> method sets the full year for a specified date according to local time. Returns new timestamp.</p>",
      "parameters": {
        "yearValue": "An integer specifying the numeric value of the year, for example, 1995.",
        "monthValue": "Optional. An integer between 0 and 11 representing the months January through December.",
        "dateValue": "Optional. An integer between 1 and 31 representing the day of the month. If you specify the\n<code><var>dateValue</var></code>\nparameter, you must also specify the\n<code><var>monthValue</var></code>\n."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.sethours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/sethours",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setHours()</code></strong> method sets the hours for a specified date according to local time, and returns the number of milliseconds since January 1, 1970 00:00:00 UTC until the time represented by the updated <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instance.</p>",
      "parameters": {
        "hoursValue": "Ideally, an integer between 0 and 23, representing the hour. If a value greater than 23 is provided, the datetime will be incremented by the extra hours.",
        "minutesValue": "Optional. Ideally, an integer between 0 and 59, representing the minutes. If a value greater than 59 is provided, the datetime will be incremented by the extra minutes.",
        "secondsValue": "Optional. Ideally, an integer between 0 and 59, representing the seconds. If a value greater than 59 is provided, the datetime will be incremented by the extra seconds. If you specify the\n<code><var>secondsValue</var></code>\nparameter, you must also specify the\n<code><var>minutesValue</var></code>\n.",
        "msValue": "Optional. Ideally, a number between 0 and 999, representing the milliseconds. If a value greater than 999 is provided, the datetime will be incremented by the extra milliseconds. If you specify the\n<code><var>msValue</var></code>\nparameter, you must also specify the\n<code><var>minutesValue</var></code>\nand\n<code>secondsValue</code>\n."
      },
      "returns": "<p>The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setMilliseconds()</code></strong> method sets the milliseconds for a specified date according to local time.</p>",
      "parameters": {
        "millisecondsValue": "A number between 0 and 999, representing the milliseconds."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setminutes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setMinutes()</code></strong> method sets the minutes for a specified date according to local time.</p>",
      "parameters": {
        "minutesValue": "An integer between 0 and 59, representing the minutes.",
        "secondsValue": "Optional. An integer between 0 and 59, representing the seconds. If you specify the\n<code><var>secondsValue</var></code>\nparameter, you must also specify the\n<code><var>minutesValue</var></code>\n.",
        "msValue": "Optional. A number between 0 and 999, representing the milliseconds. If you specify the\n<code><var>msValue</var></code>\nparameter, you must also specify the\n<code><var>minutesValue</var></code>\nand\n<code><var>secondsValue</var></code>\n."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setmonth",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setMonth()</code></strong> method sets the month for a specified date according to the currently set year.</p>",
      "parameters": {
        "monthValue": "A zero-based integer representing the month of the year offset from the start of the year. So, 0 represents January, 11 represents December, -1 represents December of the previous year, and 12 represents January of the following year.",
        "dayValue": "Optional. An integer from 1 to 31, representing the day of the month."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setSeconds()</code></strong> method sets the seconds for a specified date according to local time.</p>",
      "parameters": {
        "secondsValue": "An integer between 0 and 59, representing the seconds.",
        "msValue": "Optional. A number between 0 and 999, representing the milliseconds."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.settime": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/settime",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setTime()</code></strong> method sets the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object to the time represented by a number of milliseconds since January 1, 1970, 00:00:00 UTC.</p>",
      "parameters": {
        "timeValue": "An integer representing the number of milliseconds since 1 January 1970, 00:00:00 UTC."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date (effectively, the value of the argument).</p>"
    },
    "date.setutcdate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcdate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCDate()</code></strong> method sets the day of the month for a specified date according to universal time.</p>",
      "parameters": {
        "dayValue": "An integer from 1 to 31, representing the day of the month."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setutcfullyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcfullyear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCFullYear()</code></strong> method sets the full year for a specified date according to universal time.</p>",
      "parameters": {
        "yearValue": "An integer specifying the numeric value of the year, for example, 1995.",
        "monthValue": "Optional. An integer between 0 and 11 representing the months January through December.",
        "dayValue": "Optional. An integer between 1 and 31 representing the day of the month. If you specify the\n<code><var>dayValue</var></code>\nparameter, you must also specify the\n<code><var>monthValue</var></code>\n."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setutchours": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutchours",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCHours()</code></strong> method sets the hour for a specified date according to universal time, and returns the number of milliseconds since  January 1, 1970 00:00:00 UTC until the time represented by the updated <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instance.</p>",
      "parameters": {
        "hoursValue": "An integer between 0 and 23, representing the hour.",
        "minutesValue": "Optional. An integer between 0 and 59, representing the minutes.",
        "secondsValue": "Optional. An integer between 0 and 59, representing the seconds. If you specify the\n<code><var>secondsValue</var></code>\nparameter, you must also specify the\n<code><var>minutesValue</var></code>\n.",
        "msValue": "Optional. A number between 0 and 999, representing the milliseconds. If you specify the\n<code><var>msValue</var></code>\nparameter, you must also specify the\n<code><var>minutesValue</var></code>\nand\n<code><var>secondsValue</var></code>\n."
      },
      "returns": "<p>The number of milliseconds between January 1, 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setutcmilliseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcmilliseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCMilliseconds()</code></strong> method sets the milliseconds for a specified date according to universal time.</p>",
      "parameters": {
        "millisecondsValue": "A number between 0 and 999, representing the milliseconds."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setutcminutes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcminutes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCMinutes()</code></strong> method sets the minutes for a specified date according to universal time.</p>",
      "parameters": {
        "minutesValue": "An integer between 0 and 59, representing the minutes.",
        "secondsValue": "Optional. An integer between 0 and 59, representing the seconds. If you specify the\n<code><var>secondsValue</var></code>\nparameter, you must also specify the\n<code><var>minutesValue</var></code>\n.",
        "msValue": "Optional. A number between 0 and 999, representing the milliseconds. If you specify the\n<code><var>msValue</var></code>\nparameter, you must also specify the\n<code><var>minutesValue</var></code>\nand\n<code><var>secondsValue</var></code>\n."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setutcmonth": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcmonth",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCMonth()</code></strong> method sets the month for a specified date according to universal time.</p>",
      "parameters": {
        "monthValue": "An integer between 0 and 11, representing the months January through December.",
        "dayValue": "Optional. An integer from 1 to 31, representing the day of the month."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setutcseconds": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setutcseconds",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>setUTCSeconds()</code></strong> method sets the seconds for a specified date according to universal time.</p>",
      "parameters": {
        "secondsValue": "An integer between 0 and 59, representing the seconds.",
        "msValue": "Optional. A number between 0 and 999, representing the milliseconds."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.setyear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/setyear",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>setYear()</code></strong> method sets the year for a specified date according to local time. Because <code>setYear()</code> does not set full years (\"year 2000 problem\"), it is no longer used and has been replaced by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/setFullYear\"><code>setFullYear()</code></a> method.</p>",
      "parameters": {
        "yearValue": "An integer."
      },
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the updated date.</p>"
    },
    "date.todatestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/todatestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toDateString()</code></strong> method returns the date portion of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in English in the following format separated by spaces:</p>\n<ol>\n<li>First three letters of the week day name</li>\n<li>First three letters of the month name</li>\n<li>Two digit day of the month, padded on the left a zero if necessary</li>\n<li>Four digit year (at least), padded on the left with zeros if necessary</li>\n</ol>\n<p>E.g. \"Thu Jan 01 1970\".</p>",
      "returns": "<p>A string representing the date portion of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in human readable form in English.</p>"
    },
    "date.togmtstring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/togmtstring",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>toGMTString()</code></strong> method converts a date to a string, using Internet Greenwich Mean Time (GMT) conventions. The exact format of the value returned by <code>toGMTString()</code> varies according to the platform and browser, in general it should represent a human readable date string.</p>\n<div class=\"note notecard\">\n<p><strong>Note:</strong> <code>toGMTString()</code> is deprecated and should no longer be used. It remains implemented only for backward compatibility; please use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date/toUTCString\"><code>toUTCString()</code></a> instead.</p>\n</div>",
      "returns": "<p>A string representing the given date following the Internet Greenwich Mean Time (GMT) convention.</p>"
    },
    "date.toisostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/toisostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toISOString()</code></strong> method returns a string in <em>simplified</em> extended ISO format (<a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>), which is always 24 or 27 characters long (<code><var>YYYY</var>-<var>MM</var>-<var>DD</var>T<var>HH</var>:<var>mm</var>:<var>ss.sss</var>Z</code> or <code><var>±</var><var>YYYYYY</var>-<var>MM</var>-<var>DD</var>T<var>HH</var>:<var>mm</var>:<var>ss.sss</var>Z</code>, respectively). The timezone is always zero UTC offset, as denoted by the suffix \"<code>Z</code>\".</p>",
      "returns": "<p>A string representing the given date in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> format according to universal time.</p>"
    },
    "date.tojson": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tojson",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toJSON()</code></strong> method returns a string representation of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object.</p>",
      "returns": "<p>A string representation of the given date.</p>"
    },
    "date.tolocaledatestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocaledatestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleDateString()</code></strong> method returns a string with a language sensitive representation of the date portion of this date. The new <code>locales</code> and <code>options</code> arguments let applications specify the language whose formatting conventions should be used and allow to customize the behavior of the function. In older implementations, which ignore the <code>locales</code> and <code>options</code> arguments, the locale used and the form of the string returned are entirely implementation dependent.</p>",
      "returns": "<p>A string representing the date portion of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instance according to language-specific conventions.</p>"
    },
    "date.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleString()</code></strong> method returns a string with a language sensitive representation of this date.</p>\n<p>The new <code><var>locales</var></code> and <code><var>options</var></code> arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function.</p>\n<p>In older implementations, which ignore the <code><var>locales</var></code> and <code><var>options</var></code> arguments, the locale used and the form of the string returned are entirely implementation-dependent.</p>",
      "returns": "<p>A string representing the given date according to language-specific conventions.</p>"
    },
    "date.tolocaletimestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tolocaletimestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleTimeString()</code></strong> method returns a string with a language sensitive representation of the time portion of this date. The new <code>locales</code> and <code>options</code> arguments let applications specify the language whose formatting conventions should be used and customize the behavior of the function. In older implementations, which ignore the <code>locales</code> and <code>options</code> arguments, the locale used and the form of the string returned are entirely implementation dependent.</p>",
      "returns": "<p>A string representing the time portion of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> instance according to language-specific conventions.</p>"
    },
    "date.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>",
      "returns": "<p>A string representing the source code of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object.</p>"
    },
    "date.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object.</p>",
      "returns": "<p>A string representing the given date.</p>"
    },
    "date.totimestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/totimestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toTimeString()</code></strong> method returns the time portion of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object in human readable form in English.</p>",
      "returns": "<p>A string representing the time portion of the given date in human readable form in English.</p>"
    },
    "date.toutcstring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/toutcstring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toUTCString()</code></strong> method converts a date to a string, using the UTC time zone.</p>\n<p>Based on <a href=\"https://tools.ietf.org/html/rfc7231#section-7.1.1.1\">rfc7231</a> and modified according to <a href=\"https://www.ecma-international.org/ecma-262/10.0/index.html#sec-date.prototype.toutcstring\">ecma-262 toUTCString</a>, it can have negative values in the <a href=\"https://tc39.es/ecma262/#sec-date.prototype.toutcstring\">2021 version</a></p>",
      "returns": "<p>A string representing the given date using the UTC time zone.</p>"
    },
    "date.utc": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/utc",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Date.UTC()</code></strong> method accepts parameters similar to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> constructor, but treats them as UTC. It returns the number of milliseconds since January 1, 1970, 00:00:00 UTC.</p>",
      "parameters": {
        "year": "A full year.",
        "month": "An integer between\n<code>0</code>\n(January) and\n<code>11</code>\n(December) representing the month. Since ECMAScript 2017 it defaults to\n<code>0</code>\nif omitted.\n<em>(Up until ECMAScript 2016, <code><var>month</var></code> was a required parameter. As of ES2017, it no longer is.)</em>",
        "day": "An integer between\n<code>1</code>\nand\n<code>31</code>\nrepresenting the day of the month. If omitted, defaults to\n<code>1</code>\n.",
        "hour": "An integer between\n<code>0</code>\nand\n<code>23</code>\nrepresenting the hours. If omitted, defaults to\n<code>0</code>\n.",
        "minute": "An integer between\n<code>0</code>\nand\n<code>59</code>\nrepresenting the minutes. If omitted, defaults to\n<code>0</code>\n.",
        "second": "An integer between\n<code>0</code>\nand\n<code>59</code>\nrepresenting the seconds. If omitted, defaults to\n<code>0</code>\n.",
        "millisecond": "An integer between\n<code>0</code>\nand\n<code>999</code>\nrepresenting the milliseconds. If omitted, defaults to\n<code>0</code>\n."
      },
      "returns": "<p>A number representing the number of milliseconds for the given date since January 1, 1970, 00:00:00, UTC.</p>"
    },
    "date.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/date/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the primitive value of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> object.</p>",
      "returns": "<p>The number of milliseconds between 1 January 1970 00:00:00 UTC and the given date.</p>"
    },
    "decodeuri": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/decodeuri",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>decodeURI()</strong></code> function decodes a Uniform Resource Identifier (URI) previously created by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURI\"><code>encodeURI()</code></a> or by a similar routine.</span></p>",
      "parameters": {
        "encodedURI": "A complete, encoded Uniform Resource Identifier."
      },
      "returns": "<p>A new string representing the unencoded version of the given encoded Uniform Resource Identifier (URI).</p>"
    },
    "decodeuricomponent": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/decodeuricomponent",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>decodeURIComponent()</strong></code> function decodes a Uniform Resource Identifier (URI) component previously created by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\"><code>encodeURIComponent</code></a> or by a similar routine.</p>",
      "parameters": {
        "encodedURI": "An encoded component of a Uniform Resource Identifier."
      },
      "returns": "<p>A new string representing the decoded version of the given encoded Uniform Resource Identifier (URI) component.</p>"
    },
    "encodeuri": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/encodeuri",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>encodeURI()</strong></code> function encodes a <a href=\"$MDN_URL$/Glossary/URI\">URI</a> by replacing each instance of certain characters by one, two, three, or four escape sequences representing the <a href=\"$MDN_URL$/Glossary/UTF-8\">UTF-8</a> encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).</p>",
      "parameters": {
        "URI": "A complete URI."
      },
      "returns": "<p>A new string representing the provided string encoded as a URI.</p>"
    },
    "encodeuricomponent": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/encodeuricomponent",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>encodeURIComponent()</strong></code> function encodes a <a href=\"$MDN_URL$/Glossary/URI\">URI</a> by replacing each instance of certain characters by one, two, three, or four escape sequences representing the <a href=\"$MDN_URL$/Glossary/UTF-8\">UTF-8</a> encoding of the character (will only be four escape sequences for characters composed of two \"surrogate\" characters).</p>",
      "parameters": {
        "str": "String. A component of a URI."
      },
      "returns": "<p>A new string representing the provided string encoded as a URI component.</p>"
    },
    "error": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><code>Error</code> objects are thrown when runtime errors occur. The <code>Error</code> object can also be used as a base object for user-defined exceptions. See below for standard built-in error types.</p>"
    },
    "error.columnnumber": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/columnnumber",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <code><strong>columnNumber</strong></code> property contains the column number in the line of the file that raised this error.</p>"
    },
    "error.error": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/error",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Error</code></strong> constructor creates an error object.</span></p>",
      "parameters": {
        "message": "A human-readable description of the error.",
        "fileName": "The value for the\n<code><var>fileName</var></code>\nproperty on the created\n<code>Error</code>\nobject. Defaults to the name of the file containing the code that called the\n<code>Error()</code>\nconstructor.",
        "lineNumber": "The value for the\n<code><var>lineNumber</var></code>\nproperty on the created\n<code>Error</code>\nobject. Defaults to the line number containing the\n<code>Error()</code>\nconstructor invocation."
      }
    },
    "error.filename": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/filename",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <code><strong>fileName</strong></code> property contains the path to the file that raised this error.</p>"
    },
    "error.linenumber": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/linenumber",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <code><strong>lineNumber</strong></code> property contains the line number in the file that raised this error.</p>"
    },
    "error.message": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/message",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>message</strong></code> property is a human-readable description of the error.</p>"
    },
    "error.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/name",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>name</strong></code> property represents a name for the type of error. The initial value is \"Error\".</p>"
    },
    "error.stack": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/stack",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong><code>stack</code></strong> property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> objects offer a trace of which functions were called, in what order, from which line and file, and with what arguments. The stack string proceeds from the most recent calls to earlier ones, leading back to the original global scope call.</p>"
    },
    "error.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <code><strong>toSource()</strong></code> method returns code that could eval to the same error.</p>",
      "returns": "<p>A string containing the source code of the error.</p>"
    },
    "error.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/error/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toString()</strong></code> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> object.</p>",
      "returns": "<p>A string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> object.</p>"
    },
    "escape": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/escape",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div class=\"warning notecard\"><strong>Warning:</strong> Although <code>escape()</code> is not strictly deprecated (as in \"removed from the Web standards\"), it is defined in <a href=\"https://www.ecma-international.org/ecma-262/9.0/index.html#sec-additional-ecmascript-features-for-web-browsers\">Annex B</a> of the ECMA-262 standard, whose introduction states:\n<blockquote>… All of the language features and behaviours specified in this annex have one or more undesirable characteristics and in the absence of legacy usage would be removed from this specification. …<br>\n… Programmers should not use or assume the existence of these features and behaviours when writing new ECMAScript code. …</blockquote>\n</div>\n<p><span class=\"seoSummary\">The <code><strong>escape()</strong></code> function computes a new string in which certain characters have been replaced by a hexadecimal escape sequence.</span></p>\n<div class=\"notecard note\">\n<p><strong>Note:</strong> This function was used mostly for URL queries (the part of a URL following <code>?</code>)—<em>not</em> for escaping ordinary String literals, which use the format \"<code>\\x<var>HH</var></code>\". (<code><var>HH</var></code> are two hexadecimal digits, and the form <code>\\x<var>HH</var>\\x<var>HH</var></code> is used for higher-plane Unicode characters.)</p>\n<p>Escaped characters in String literals can be expanded by replacing the <code>\\x</code> with <code>%</code>, then using the <code>decodeURIComponent()</code> function.</p>\n</div>",
      "parameters": {
        "str": "A string to be encoded."
      },
      "returns": "<p>A new string in which certain characters have been escaped.</p>"
    },
    "eval": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/eval",
      "status": [
        "StandardTrack"
      ],
      "doc": "<div class=\"notecard warning\">\n<p><strong>Warning:</strong> Executing JavaScript from a string is an enormous security risk. It is far too easy for a bad actor to run arbitrary code when you use <code>eval()</code>. See <a href=\"#Never_use_eval!\">Never use eval()!</a>, below.</p>\n</div>\n<p>The <code><strong>eval()</strong></code> function evaluates JavaScript code represented as a string.</p>",
      "parameters": {
        "string": "A string representing a JavaScript expression, statement, or sequence of statements. The expression can include variables and properties of existing objects."
      },
      "returns": "<p>The completion value of evaluating the given code. If the completion value is empty, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.</p>"
    },
    "evalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/evalerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>EvalError</code></strong> object indicates an error regarding the global <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> function. This exception is not thrown by JavaScript anymore, however the <code>EvalError</code> object remains for compatibility.</p>"
    },
    "evalerror.evalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/evalerror/evalerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>EvalError</code></strong> constructor creates a new error regarding the global <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/eval\"><code>eval()</code></a> function. This exception is not thrown by JavaScript anymore, however the <code>EvalError</code> object remains for compatibility.</p>",
      "parameters": {
        "message": "Human-readable description of the error.",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "finalizationregistry": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>FinalizationRegistry</code></strong> object lets you request a callback when an object is garbage-collected.</p>"
    },
    "finalizationregistry.finalizationregistry": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/finalizationregistry",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>FinalizationRegistry</code></strong> constructor creates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> object that uses the given callback.</p>",
      "parameters": {
        "callback": "The callback function this registry should use. If provided, this must be a function."
      }
    },
    "finalizationregistry.register": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/register",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>register()</code> method registers an object with a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> instance so that if the object is garbage-collected, the registry's callback may get called.</p>",
      "parameters": {
        "target": "The target object to register.",
        "heldValue": "The value to pass to the finalizer for this object. This cannot be the\n<code><var>target</var></code>\nobject.",
        "unregisterToken": "A token that may be used with the\n<code>unregister</code>\nmethod later to unregister the target object. If provided (and not\n<code>undefined</code>\n), this must be an object. If not provided, the target cannot be unregistered."
      },
      "returns": "<p><code>undefined</code>.</p>"
    },
    "finalizationregistry.unregister": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/finalizationregistry/unregister",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>unregister</code> unregisters a target object from a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry\"><code>FinalizationRegistry</code></a> instance.</p>",
      "parameters": {
        "unregisterToken": "The token used with the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/FinalizationRegistry/register\"><code>register</code></a>\nmethod when registering the target object."
      },
      "returns": "<p><code>undefined</code>.</p>"
    },
    "float32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Float32Array</code></strong> typed array represents an array of 32-bit floating point numbers (corresponding to the C <code>float</code> data type) in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "float32array.float32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float32array/float32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Float32Array()</code></strong> typed array constructor creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Float32Array\"><code>Float32Array</code></a> object, which is, an array of 32-bit floating point numbers (corresponding to the C <code>float</code> data type) in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code><var>typedArray</var></code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "float64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Float64Array</code></strong> typed array represents an array of 64-bit floating point numbers (corresponding to the C <code>double</code> data type) in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "float64array.float64array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/float64array/float64array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Float64Array()</code></strong> typed array constructor creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Float64Array\"><code>Float64Array</code></a> object, which is, an array of 64-bit floating point numbers (corresponding to the C <code>double</code> data type) in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code><var>typedArray</var></code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "function": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>Every JavaScript function is actually a <code>Function</code> object. This can be seen with the code <code>(function(){}).constructor === Function</code>, which returns true.</p>"
    },
    "function.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/apply",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>apply()</strong></code> method calls a function with a given <code>this</code> value, and <code>arguments</code> provided as an array (or an <a href=\"$MDN_URL$/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects\">array-like object</a>).</p>",
      "parameters": {
        "thisArg": "The value of <code>this</code> provided for the call to <code><var>func</var></code>.<br>\nNote that <code>this</code> may not be the actual value seen by the method: if the method is a function in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">non-strict mode</a> code, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> will be replaced with the global object, and primitive values will be boxed. This argument is required.<br>",
        "argsArray": "An array-like object, specifying the arguments with which <code><var>func</var></code> should be called, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if no arguments should be provided to the function.<br>\nStarting with ECMAScript 5 these arguments can be a generic array-like object instead of an array. See below for <a href=\"#Browser_compatibility\">browser compatibility</a> information.<br>"
      },
      "returns": "<p>The result of calling the function with the specified <code><strong>this</strong></code> value and arguments.</p>"
    },
    "function.arguments": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/arguments",
      "status": [
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <code><strong><em>function</em>.arguments</strong></code> property refers to an array-like object corresponding to the arguments passed to a function. Use the simple variable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Functions/arguments\"><code>arguments</code></a> instead. This property is restricted to non-strict functions.</p>"
    },
    "function.bind": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/bind",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>bind()</strong></code> method creates a new function that, when called, has its <code>this</code> keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.</span></p>",
      "parameters": {
        "thisArg": "The value to be passed as the\n<code>this</code>\nparameter to the target function\n<code><var>func</var></code>\nwhen the bound function is called. The value is ignored if the bound function is constructed using the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a>\noperator. When using\n<code>bind</code>\nto create a function (supplied as a callback) inside a\n<code>setTimeout</code>\n, any primitive value passed as\n<code><var>thisArg</var></code>\nis converted to object. If no arguments are provided to\n<code>bind </code>\n, or if the\n<code><var>thisArg</var></code>\nis\n<code><var>null</var></code>\nor\n<code><var>undefined</var></code>\n, the\n<code>this</code>\nof the executing scope is treated as the\n<code><var>thisArg</var></code>\nfor the new function.",
        "arg1, arg2, ...argN": "Arguments to prepend to arguments provided to the bound function when invoking\n<code><var>func</var></code>\n."
      },
      "returns": "<p>A copy of the given function with the specified <code>this</code> value, and initial arguments (if provided).</p>"
    },
    "function.call": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/call",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>call()</strong></code> method calls a function with a given <code>this</code> value and arguments provided individually.</span></p>",
      "parameters": {
        "thisArg": "The value to use as <code>this</code> when calling <code><var>func</var></code>.<br>\n<div class=\"notecard note\">\n<strong>Caution:</strong> In certain cases, <code><var>thisArg</var></code> may not be the actual value seen by the method.<br>\nIf the method is a function in <a href=\"$MDN_URL$/Web/JavaScript/Reference/Strict_mode\">non-strict mode</a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> will be replaced with the global object, and primitive values will be converted to objects.<br>\n</div>",
        "arg1, arg2, ...argN": "Arguments for the function."
      },
      "returns": "<p>The result of calling the function with the specified <code><strong>this</strong></code> value and arguments.</p>"
    },
    "function.caller": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/caller",
      "status": [],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code><var>function</var>.caller</code></strong> property returns the function that invoked the specified function. It returns <code>null</code> for strict, async function and generator function callers.</p>"
    },
    "function.displayname": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/displayname",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <code><strong><em>function</em>.displayName</strong></code> property returns the display name of the function.</p>"
    },
    "function.function": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/function",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Function</code> constructor</strong> creates a new <code>Function</code> <strong>object</strong>. Calling the constructor directly can create functions dynamically, but suffers from security and similar (but far less significant) performance issues to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/eval\" ><code>eval</code></a>. However, unlike eval, the <code>Function</code> constructor creates functions which execute in the global scope only.</span></p>",
      "parameters": {
        "arg1, arg2, ... argN": "Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier, or a list of such strings separated with a comma. For example: \"\n<code>x</code>\n\", \"\n<code>theValue</code>\n\"—or \"\n<code>x,theValue</code>\n\".",
        "functionBody": "A string containing the JavaScript statements comprising the function definition."
      }
    },
    "function.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/length",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>length</code></strong> property indicates the number of parameters expected by the function.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Function.length</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "function.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/name",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a> object's read-only <strong><code>name</code></strong> property indicates the function's name as specified when it was created, or it may be either <code>anonymous</code> or <code>''</code> (an empty string) for functions created anonymously.</span></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Function.name</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>\n<div class=\"note notecard\">\n<p>Note that in non-standard, pre-ES2015 implementations the <code>configurable</code> attribute was <code>false</code> as well.</p>\n</div>"
    },
    "function.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object. This method is usually called internally by JavaScript and not explicitly in code. You can call <code>toSource()</code> while debugging to examine the contents of an object.</p>",
      "returns": "<p>A string representing the source code of the object.</p>"
    },
    "function.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/function/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toString()</strong></code> method returns a string representing the source code of the function.</p>",
      "returns": "<p>A string representing the source code of the function.</p>"
    },
    "generator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Generator</strong></code> object is returned by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/function*\">generator function</a> and it conforms to both the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\">iterable protocol</a> and the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#The_iterator_protocol\">iterator protocol</a>.</p>"
    },
    "generator.next": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/next",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>next()</code></strong> method returns an object with two properties <code>done</code> and <code>value</code>. You can also provide a parameter to the <code>next</code> method to send a value to the generator.</span></p>",
      "parameters": {
        "value": "The value to send to the generator.The value will be assigned as a result of a\n<code>yield</code>\nexpression. For example, in\n<code><var>variable</var> = yield <var>expression</var></code>\n, the value passed to the\n<code>.next()</code>\nfunction will be assigned to\n<code><var>variable</var></code>\n."
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:</p>\n\n<dl>\n <dt><code>done</code> (boolean)</dt>\n <dd>Has the value <code>true</code> if the iterator is past the end of the iterated sequence. In this case <code>value</code> optionally specifies the <em>return value</em> of the iterator.</dd>\n <dd>Has the value <code>false</code> if the iterator was able to produce the next value in the sequence. This is equivalent of not specifying the <code>done</code> property altogether.</dd>\n <dt><code>value</code></dt>\n <dd>Any JavaScript value returned by the iterator. Can be omitted when <code>done</code> is <code>true</code>.</dd>\n</dl>"
    },
    "generator.return": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/return",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>return()</code></strong> method returns the given value and finishes the generator.</p>",
      "parameters": {
        "value": "The value to return."
      },
      "returns": "<p>The value that is given as an argument.</p>"
    },
    "generator.throw": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generator/throw",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>throw()</code></strong> method resumes the execution of a generator by throwing an error into it and returns an object with two properties <code>done</code> and <code>value</code>.</span></p>",
      "parameters": {
        "exception": "The exception to throw. For debugging purposes, it is useful to make it an\n<code>instanceof</code>\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a>\n."
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> with two properties:</p>\n\n<dl>\n <dt><code>done</code> (boolean)</dt>\n <dd>\n <ul>\n  <li>Has the value <code>true</code> if the iterator is past the end of the iterated sequence. In this case <code>value</code> optionally specifies the <em>return value</em> of the iterator.</li>\n  <li>Has the value <code>false</code> if the iterator was able to produce the next value in the sequence. This is equivalent of not specifying the <code>done</code> property altogether.</li>\n </ul>\n </dd>\n <dt><code>value</code></dt>\n <dd>Any JavaScript value returned by the iterator. Can be omitted when <code>done</code> is <code>true</code>.</dd>\n</dl>"
    },
    "generatorfunction": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/generatorfunction",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>GeneratorFunction</code> constructor</strong> creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/function*\">generator function</a> object. In JavaScript, every generator function is actually a <code>GeneratorFunction</code> object.</p>\n<p>Note that <code>GeneratorFunction</code> is not a global object. It could be obtained by evaluating the following code.</p>\n<pre class=\"brush: js notranslate\"><code>Object.getPrototypeOf(function*(){}).constructor\n</code></pre>",
      "parameters": {
        "arg1, arg2, ... argN": "Names to be used by the function as formal argument names. Each must be a string that corresponds to a valid JavaScript identifier or a list of such strings separated with a comma; for example \"\n<code>x</code>\n\", \"\n<code>theValue</code>\n\", or \"\n<code>a,b</code>\n\".",
        "functionBody": "A string containing the JavaScript statements comprising the function definition."
      }
    },
    "globalthis": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/globalthis",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The global <code><strong>globalThis</strong></code> property contains the global <code>this</code> value, which is akin to the global object.</span></p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>globalThis</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "infinity": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/infinity",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The global property <code><strong>Infinity</strong></code> is a numeric value representing infinity.</p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Infinity</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "int16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int16array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int16Array</code></strong> typed array represents an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "int16array.int16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int16array/int16array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int16Array()</code></strong> typed array constructor creates an array of twos-complement 16-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code>typedArray</code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "int32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int32Array()</code></strong> typed array constructor creates an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code>typedArray</code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "int32array.int32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int32array/int32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int32Array()</code></strong> typed array constructor creates an array of twos-complement 32-bit signed integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code>typedArray</code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "int8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int8array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int8Array</code></strong> typed array represents an array of twos-complement 8-bit signed integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "int8array.int8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/int8array/int8array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Int8Array()</code></strong> constructor creates a typed array of twos-complement 8-bit signed integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code>typedArray</code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "internalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/internalerror",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <strong><code>InternalError</code> object</strong> indicates an error that occurred internally in the JavaScript engine.</p>\n<p>Example cases are mostly when something is too large, e.g.:</p>\n<ul>\n<li>\"too many switch cases\",</li>\n<li>\"too many parentheses in regular expression\",</li>\n<li>\"array initializer too large\",</li>\n<li>\"too much recursion\".</li>\n</ul>"
    },
    "internalerror.internalerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/internalerror/internalerror",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The <strong><code>InternalError()</code></strong> constructor creates an error that indicates an error that occurred internally in the JavaScript engine. For example: \"<strong>InternalError</strong>: too much recursion\".</p>",
      "parameters": {
        "message": "Human-readable description of the error.",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "intl": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p class=\"summary\">The <strong><code>Intl</code></strong> object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. The <strong><code>Intl</code></strong> object provides access to several constructors as well as functionality common to the internationalization constructors and other language sensitive functions.</p>"
    },
    "intl.@@tostringtag": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/@@tostringtag",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl[@@toStringTag]</code></strong> property has an initial value of \"Intl\".</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Intl[@@toStringTag]</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "intl.collator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Collator</code></strong> objects enable language sensitive string comparison.</p>"
    },
    "intl.collator.collator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/collator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Collator</code></strong> object is a constructor for collators, objects that enable language sensitive string comparison.</p>",
      "parameters": {
        "locales": "Optional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>. The following Unicode extension keys are allowed:<br>\n<dl>\n<dt><code>co</code></dt>\n<dd>Variant collations for certain locales. Possible values include: \"<code>big5han</code>\", \"<code>dict</code>\", \"<code>direct</code>\", \"<code>ducet</code>\", \"<code>gb2312</code>\", \"<code>phonebk</code>\", \"<code>phonetic</code>\", \"<code>pinyin</code>\", \"<code>reformed</code>\", \"<code>searchjl</code>\", \"<code>stroke</code>\", \"<code>trad</code>\", \"<code>unihan</code>\". The \"<code>standard</code>\" and \"<code>search</code>\" values are ignored; they are replaced by the <code>options</code> property <code>usage</code> (see below).</dd>\n<dt><code>kn</code></dt>\n<dd>Whether numeric collation should be used, such that \"1\" &lt; \"2\" &lt; \"10\". Possible values are \"<code>true</code>\" and \"<code>false</code>\". This option can be set through an <code><var>options</var></code> property or through a Unicode extension key; if both are provided, the <code><var>options</var></code> property takes precedence.</dd>\n<dt><code>kf</code></dt>\n<dd>Whether upper case or lower case should sort first. Possible values are \"<code>upper</code>\", \"<code>lower</code>\", or \"<code>false</code>\" (use the locale's default). This option can be set through an <code><var>options</var></code> property or through a Unicode extension key; if both are provided, the <code><var>options</var></code> property takes precedence.</dd>\n</dl>",
        "options": "Optional. An object with some or all of the following properties:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are \"<code>lookup</code>\" and \"<code>best fit</code>\"; the default is \"<code>best fit</code>\". For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n<dt><code>usage</code></dt>\n<dd>Whether the comparison is for sorting or for searching for matching strings. Possible values are \"<code>sort</code>\" and \"<code>search</code>\"; the default is \"<code>sort</code>\".</dd>\n<dt><code>sensitivity</code></dt>\n<dd>\nWhich differences in the strings should lead to non-zero result values. Possible values are:<br>\n<ul>\n<li>\"<code>base</code>\": Only strings that differ in base letters compare as unequal. Examples: <code>a ≠ b</code>, <code>a = á</code>, <code>a = A</code>.</li>\n<li>\"<code>accent</code>\": Only strings that differ in base letters or accents and other diacritic marks compare as unequal. Examples: <code>a ≠ b</code>, <code>a ≠ á</code>, <code>a = A</code>.</li>\n<li>\"<code>case</code>\": Only strings that differ in base letters or case compare as unequal. Examples: <code>a ≠ b</code>, <code>a = á</code>, <code>a ≠ A</code>.</li>\n<li>\"<code>variant</code>\": Strings that differ in base letters, accents and other diacritic marks, or case compare as unequal. Other differences may also be taken into consideration. Examples: <code>a ≠ b</code>, <code>a ≠ á</code>, <code>a ≠ A</code>.</li>\n</ul>\nThe default is \"<code>variant</code>\" for usage \"<code>sort</code>\"; it's locale dependent for usage \"<code>search</code>\".<br>\n</dd>\n<dt><code>ignorePunctuation</code></dt>\n<dd>Whether punctuation should be ignored. Possible values are <code>true</code> and <code>false</code>; the default is <code>false</code>.</dd>\n<dt><code>numeric</code></dt>\n<dd>Whether numeric collation should be used, such that \"1\" &lt; \"2\" &lt; \"10\". Possible values are <code>true</code> and <code>false</code>; the default is <code>false</code>. This option can be set through an <code><var>options</var></code> property or through a Unicode extension key; if both are provided, the <code><var>options</var></code> property takes precedence. Implementations are not required to support this property.</dd>\n<dt><code>caseFirst</code></dt>\n<dd>Whether upper case or lower case should sort first. Possible values are \"<code>upper</code>\", \"<code>lower</code>\", or \"<code>false</code>\" (use the locale's default); the default is \"<code>false</code>\". This option can be set through an <code><var>options</var></code> property or through a Unicode extension key; if both are provided, the <code><var>options</var></code> property takes precedence. Implementations are not required to support this property.</dd>\n</dl>"
      }
    },
    "intl.collator.compare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/compare",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Collator.prototype.compare()</code></strong> method compares two strings according to the sort order of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\" ><code>Collator</code></a> object.</p>",
      "parameters": {
        "string2": "The strings to compare against each other."
      }
    },
    "intl.collator.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Collator.prototype.resolvedOptions()</code></strong> method returns a new object with properties reflecting the locale and collation options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\" ><code>Collator</code></a> object.</p>",
      "returns": "<p>A new object with properties reflecting the locale and collation options computed during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator\" data-flaw-src=\"{{jsxref(\"Collator\")}}\"><code>Collator</code></a> object.</p>"
    },
    "intl.collator.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/collator/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Collator.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in collation without having to fall back to the runtime's default locale.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form of the\n<code>locales</code>\nargument, see the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>\n.",
        "options": "Optional. An object that may have the following property:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n</dl>"
      },
      "returns": "<p>An array of strings representing a subset of the given locale tags that are supported in collation without having to fall back to the runtime's default locale.</p>"
    },
    "intl.datetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.DateTimeFormat</code></strong> object is a constructor for objects that enable language-sensitive date and time formatting.</span></p>"
    },
    "intl.datetimeformat.datetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/datetimeformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.DateTimeFormat()</code></strong> constructor for objects that enable language-sensitive date and time formatting.</span></p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. To use the browser's default locale, pass an empty array. Unicode extension are supported (for example \"<code>en-US-u-ca-buddhist</code>\"). For the general form and interpretation of the <code>locales</code> argument, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>. The following Unicode extension keys are allowed:<br>\n<dl>\n<dt><code>nu</code></dt>\n<dd>Numbering system. Possible values include: \"<code>arab</code>\", \"<code>arabext</code>\", \"<code>bali</code>\", \"<code>beng</code>\", \"<code>deva</code>\", \"<code>fullwide</code>\", \"<code>gujr</code>\", \"<code>guru</code>\", \"<code>hanidec</code>\", \"<code>khmr</code>\", \"<code>knda</code>\", \"<code>laoo</code>\", \"<code>latn</code>\", \"<code>limb</code>\", \"<code>mlym</code>\", \"<code>mong</code>\", \"<code>mymr</code>\", \"<code>orya</code>\", \"<code>tamldec</code>\", \"<code>telu</code>\", \"<code>thai</code>\", \"<code>tibt</code>\".</dd>\n<dt><code>ca</code></dt>\n<dd>Calendar. Possible values include: \"<code>buddhist</code>\", \"<code>chinese</code>\", \"<code>coptic</code>\", \"<code>ethiopia</code>\", \"<code>ethiopic</code>\", \"<code>gregory</code>\", \"<code>hebrew</code>\", \"<code>indian</code>\", \"<code>islamic</code>\", \"<code>iso8601</code>\", \"<code>japanese</code>\", \"<code>persian</code>\", \"<code>roc</code>\".</dd>\n<dt><code>hc</code></dt>\n<dd>Hour cycle. Possible values include: \"<code>h11</code>\", \"<code>h12</code>\", \"<code>h23</code>\", \"<code>h24</code>\".</dd>\n</dl>",
        "options": "An object with some or all of the following properties:<br>\n<dl>\n<dt><code>dateStyle</code></dt>\n<dd>The date formatting style to use when calling <code>format()</code>. Possible values include:\n<ul>\n<li>\"<code>full</code>\"</li>\n<li>\"<code>long</code>\"</li>\n<li>\"<code>medium</code>\"</li>\n<li>\"<code>short</code>\"</li>\n</ul>\n<div class=\"notecard note\">\n<code>dateStyle</code> can be used with <code>timeStyle</code>, but not with other options (e.g. <code>weekday</code>, <code>hour</code>, <code>month</code>, etc.).<br>\n</div>\n</dd>\n<dt><code>timeStyle</code></dt>\n<dd>The time formatting style to use when calling <code>format()</code>. Possible values include:\n<ul>\n<li>\"<code>full</code>\"</li>\n<li>\"<code>long</code>\"</li>\n<li>\"<code>medium</code>\"</li>\n<li>\"<code>short</code>\"</li>\n</ul>\n</dd>\n<dd>\n<div class=\"notecard note\">\n<code>timeStyle</code> can be used with <code>dateStyle</code>, but not with other options (e.g. <code>weekday</code>, <code>hour</code>, <code>month</code>, etc.).<br>\n</div>\n</dd>\n<dt><code>calendar</code></dt>\n<dd>Calendar. Possible values include: \"<code>buddhist</code>\", \"<code>chinese</code>\", \" <code>coptic</code>\", \"<code>ethiopia</code>\", \"<code>ethiopic</code>\", \"<code>gregory</code>\", \" <code>hebrew</code>\", \"<code>indian</code>\", \"<code>islamic</code>\", \"<code>iso8601</code>\", \" <code>japanese</code>\", \"<code>persian</code>\", \"<code>roc</code>\".</dd>\n<dt><code>dayPeriod</code></dt>\n<dd>The way day periods should be expressed. Possible values include: \"<code>narrow</code>\", \"<code>short</code>\", \" <code>long</code>\".</dd>\n<dt><code>numberingSystem</code></dt>\n<dd>Numbering System. Possible values include: \"<code>arab</code>\", \"<code>arabext</code>\", \" <code>bali</code>\", \"<code>beng</code>\", \"<code>deva</code>\", \"<code>fullwide</code>\", \" <code>gujr</code>\", \"<code>guru</code>\", \"<code>hanidec</code>\", \"<code>khmr</code>\", \" <code>knda</code>\", \"<code>laoo</code>\", \"<code>latn</code>\", \"<code>limb</code>\", \"<code>mlym</code>\", \" <code>mong</code>\", \"<code>mymr</code>\", \"<code>orya</code>\", \"<code>tamldec</code>\", \" <code>telu</code>\", \"<code>thai</code>\", \"<code>tibt</code>\".</dd>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are \"<code>lookup</code>\" and \"<code>best fit</code>\"; the default is \"<code>best fit</code>\". For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n<dt><code>timeZone</code></dt>\n<dd>The time zone to use. The only value implementations must recognize is \"<code>UTC</code>\"; the default is the runtime's default time zone. Implementations may also recognize the time zone names of the <a href=\"https://www.iana.org/time-zones\">IANA time zone database</a>, such as \"<code>Asia/Shanghai</code>\", \"<code>Asia/Kolkata</code>\", \"<code>America/New_York</code>\".</dd>\n<dt><code>hour12</code></dt>\n<dd>Whether to use 12-hour time (as opposed to 24-hour time). Possible values are <code>true</code> and <code>false</code>; the default is locale dependent. This option overrides the <code>hc</code> language tag and/or the <code>hourCycle</code> option in case both are present.</dd>\n<dt><code>hourCycle</code></dt>\n<dd>The hour cycle to use. Possible values are \"<code>h11</code>\", \"<code>h12</code>\", \"<code>h23</code>\", or \"<code>h24</code>\". This option overrides the <code>hc</code> language tag, if both are present, and the <code>hour12</code> option takes precedence in case both options have been specified.</dd>\n<dt><code>formatMatcher</code></dt>\n<dd>The format matching algorithm to use. Possible values are \"<code>basic</code>\" and \"<code>best fit</code>\"; the default is \"<code>best fit</code>\". See the following paragraphs for information about the use of this property.</dd>\n</dl>\nThe following properties describe the date-time components to use in formatted output, and their desired representations. Implementations are required to support at least the following subsets:<br>\n<ul>\n<li><code>weekday</code>, <code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code></li>\n<li><code>weekday</code>, <code>year</code>, <code>month</code>, <code>day</code></li>\n<li><code>year</code>, <code>month</code>, <code>day</code></li>\n<li><code>year</code>, <code>month</code></li>\n<li><code>month</code>, <code>day</code></li>\n<li><code>hour</code>, <code>minute</code>, <code>second</code></li>\n<li><code>hour</code>, <code>minute</code></li>\n</ul>\nImplementations may support other subsets, and requests will be negotiated against all available subset-representation combinations to find the best match. Two algorithms are available for this negotiation and selected by the <code>formatMatcher</code> property: A <a href=\"http://www.ecma-international.org/ecma-402/1.0/#BasicFormatMatcher\">fully specified \"<code>basic</code>\" algorithm</a> and an implementation-dependent \"<code>best fit</code>\" algorithm.<br>\n<dl>\n<dt><code>weekday</code></dt>\n<dd>The representation of the weekday. Possible values are:\n<ul>\n<li>\"<code>long</code>\" (e.g., <code>Thursday</code>)</li>\n<li>\"<code>short</code>\" (e.g., <code>Thu</code>)</li>\n<li>\"<code>narrow</code>\" (e.g., <code>T</code>). Two weekdays may have the same narrow style for some locales (e.g. <code>Tuesday</code>'s narrow style is also <code>T</code>).</li>\n</ul>\n</dd>\n<dt><code>era</code></dt>\n<dd>The representation of the era. Possible values are:\n<ul>\n<li>\"<code>long</code>\" (e.g., <code>Anno Domini</code>)</li>\n<li>\"<code>short</code>\" (e.g., <code>AD</code>)</li>\n<li>\"<code>narrow</code>\" (e.g., <code>A</code>)</li>\n</ul>\n</dd>\n<dt><code>year</code></dt>\n<dd>The representation of the year. Possible values are:\n<ul>\n<li>\"<code>numeric</code>\" (e.g., <code>2012</code>)</li>\n<li>\"<code>2-digit</code>\" (e.g., <code>12</code>)</li>\n</ul>\n</dd>\n<dt><code>month</code></dt>\n<dd>The representation of the month. Possible values are:\n<ul>\n<li>\"<code>numeric</code>\" (e.g., <code>2</code>)</li>\n<li>\"<code>2-digit</code>\" (e.g., <code>02</code>)</li>\n<li>\"<code>long</code>\" (e.g., <code>March</code>)</li>\n<li>\"<code>short</code>\" (e.g., <code>Mar</code>)</li>\n<li>\"<code>narrow</code>\" (e.g., <code>M</code>). Two months may have the same narrow style for some locales (e.g. <code>May</code>'s narrow style is also <code>M</code>).</li>\n</ul>\n</dd>\n<dt><code>day</code></dt>\n<dd>The representation of the day. Possible values are:\n<ul>\n<li>\"<code>numeric</code>\" (e.g., <code>1</code>)</li>\n<li>\"<code>2-digit</code>\" (e.g., <code>01</code>)</li>\n</ul>\n</dd>\n<dt><code>hour</code></dt>\n<dd>The representation of the hour. Possible values are \"<code>numeric</code>\", \"<code>2-digit</code>\".</dd>\n<dt><code>minute</code></dt>\n<dd>The representation of the minute. Possible values are \"<code>numeric</code>\", \"<code>2-digit</code>\".</dd>\n<dt><code>second</code></dt>\n<dd>The representation of the second. Possible values are \"<code>numeric</code>\", \"<code>2-digit</code>\".</dd>\n<dt><code>fractionalSecondDigits</code></dt>\n<dd>\n<div class=\"notecard note\">\n<p class=\"noinclude\">Added in Firefox 84, Chrome 84, etc. See compatibility table for more information.</p>\n</div>\nThe number of digits used to represent fractions of a second (any additional digits are truncated). Possible values are:\n<ul>\n<li><code>0</code> (Fractional part dropped.)</li>\n<li><code>1</code> (Fractional part represented as 1 digit. For example, 736 is formatted as <code>7</code>.)</li>\n<li><code>2</code> (Fractional part represented as 2 digits. For example, 736 is formatted as <code>73</code>.)</li>\n<li><code>3</code> (Fractional part represented as 3 digits. For example, 736 is formatted as <code>736</code>.)</li>\n</ul>\n</dd>\n<dt><code>timeZoneName</code></dt>\n<dd>The representation of the time zone name. Possible values are:\n<ul>\n<li>\"<code>long</code>\" (e.g., <code>British Summer Time</code>)</li>\n<li>\"<code>short</code>\" (e.g., <code>GMT+1</code>)</li>\n</ul>\n</dd>\n</dl>\n<p class=\"noinclude\">The default value for each date-time component property is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, but if all component properties are <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, then <code>year</code>, <code>month</code>, and <code>day</code> are assumed to be \"<code>numeric</code>\".</p>"
      }
    },
    "intl.datetimeformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/format",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.prototype.format()</code></strong> method formats a date according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" ><code>Intl.DateTimeFormat</code></a> object.</p>",
      "parameters": {
        "date": "The date to format."
      }
    },
    "intl.datetimeformat.formatrange": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formatrange",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.prototype.formatRange()</code></strong> formats a date range in the most concise way based on the <strong><code>locale</code></strong> and <code><strong>options</strong></code> provided when instantiating <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" ><code>Intl.DateTimeFormat</code></a> object.</p>"
    },
    "intl.datetimeformat.formatrangetoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formatrangetoparts",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.prototype.formatRangeToParts()</code></strong> method allows locale-specific tokens representing each part of the formatted date range produced by <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" data-flaw=\"link1\">DateTimeFormat</a></code> formatters.</p>"
    },
    "intl.datetimeformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.prototype.formatToParts()</code></strong> method allows locale-aware formatting of strings produced by <code>DateTimeFormat</code> formatters.</p>",
      "parameters": {
        "date": "The date to format."
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted date in parts.</p>"
    },
    "intl.datetimeformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.prototype.resolvedOptions()</code></strong> method returns a new object with properties reflecting the locale and date and time formatting options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" ><code>DateTimeFormat</code></a> object.</p>",
      "returns": "<p>A new object with properties reflecting the locale and date and time formatting options computed during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat\" data-flaw-src=\"{{jsxref(\"DateTimeFormat\")}}\"><code>DateTimeFormat</code></a> object.</p>"
    },
    "intl.datetimeformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/datetimeformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DateTimeFormat.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form of the\n<code>locales</code>\nargument, see the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>\n.",
        "options": "Optional. An object that may have the following property:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>lookup</code> and <code>best fit</code>; the default is <code>best fit</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n</dl>"
      },
      "returns": "<p>An array of strings representing a subset of the given locale tags that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.displaynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DisplayNames</code></strong> object is a constructor for objects that enables the consistent translation of language, region and script display names.</p>"
    },
    "intl.displaynames.displaynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/displaynames",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DisplayNames()</code></strong> constructor creates objects that enables the consistent translation of language, region and script display names.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>. The following Unicode extension key is allowed:<br>\n<dl>\n<dt><code>nu</code></dt>\n<dd>The numbering system to be used. Possible values include: <code>\"arab\"</code>, <code>\"arabext\"</code>, <code>\"bali\"</code>, <code>\"beng\"</code>, <code>\"deva\"</code>, <code>\"fullwide\"</code>, <code>\"gujr\"</code>, <code>\"guru\"</code>, <code>\"hanidec\"</code>, <code>\"khmr\"</code>, <code>\"knda\"</code>, <code>\"laoo\"</code>, <code>\"latn\"</code>, <code>\"limb\"</code>, <code>\"mlym\"</code>, <code>\"mong\"</code>, <code>\"mymr\"</code>, <code>\"orya\"</code>, <code>\"tamldec\"</code>, <code>\"telu\"</code>, <code>\"thai\"</code>, <code>\"tibt\"</code>.</dd>\n</dl>",
        "options": "An object with some or all of the following properties:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n<dt><code>style</code></dt>\n<dd>The formatting style to use, the default is <code>\"long\"</code>.\n<ul>\n<li><code>\"narrow\"</code></li>\n<li><code>\"short\"</code></li>\n<li><code>\"long\"</code></li>\n</ul>\n</dd>\n<dt><code>type</code></dt>\n<dd>The type to use.\n<ul>\n<li><code>\"language\"</code></li>\n<li><code>\"region\"</code></li>\n<li><code>\"script\"</code></li>\n<li><code>\"currency\"</code></li>\n</ul>\n</dd>\n<dt><code>fallback</code></dt>\n<dd>The fallback to use, the default is <code>\"code\"</code>.\n<ul>\n<li><code>\"code\"</code></li>\n<li><code>\"none\"</code></li>\n</ul>\n</dd>\n</dl>"
      }
    },
    "intl.displaynames.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/of",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>of</strong></code><strong><code>()</code></strong> method receives a code and returns a string based on the locale and options provided when instantiating Intl.DisplayNames.</p>",
      "parameters": {
        "code": "The\n<code>code</code>\nto provide depends on the\n<code>type</code>\n:\n<ul>\n<li>If the type is \"region\", code should be either an <a href=\"https://www.iso.org/iso-3166-country-codes.html\" rel=\"nofollow\">ISO-3166 two letters region code</a>, or a <a href=\"https://unstats.un.org/unsd/methodology/m49/\" rel=\"nofollow\">three digits UN M49 Geographic Regions</a>.</li>\n<li>If the type is \"script\", code should be an <a href=\"http://unicode.org/iso15924/iso15924-codes.html\" rel=\"nofollow\">ISO-15924 four letters script code</a>.</li>\n<li>If the type is \"language\", code should be a <em>languageCode</em> [\"-\" <em>scriptCode</em>] [\"-\" <em>regionCode</em> ] *(\"-\" <em>variant</em> ) subsequence of the unicode_language_id grammar in <a href=\"http://unicode.org/reports/tr35/#Unicode_language_identifier\" rel=\"nofollow\">UTS 35's Unicode Language and Locale Identifiers grammar</a>. <em>languageCode</em> is either a two letters ISO 639-1 language code or a three letters ISO 639-2 language code.</li>\n<li>If the type is \"currency\", code should be a <a href=\"https://www.iso.org/iso-4217-currency-codes.html\" rel=\"nofollow\">3-letter ISO 4217 currency code</a>.</li>\n</ul>"
      },
      "returns": "<p>A language-specific formatted string.</p>"
    },
    "intl.displaynames.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Intl.DisplayNames.prototype.resolvedOptions()</strong></code> method returns a new object with properties reflecting the locale and style formatting options computed during the construction of the current <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\" ><code>DisplayNames</code></a> object.</p>",
      "returns": "<p>An object with properties reflecting the locale and formatting options computed during the construction of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames\" data-flaw-src=\"{{jsxref(\"DisplayNames\")}}\"><code>DisplayNames</code></a> object.</p>"
    },
    "intl.displaynames.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/displaynames/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.DisplayNames.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form of the\n<code>locales</code>\nargument, see the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>\n.",
        "options": "Optional. An object that may have the following property:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n</dl>"
      },
      "returns": "<p>An array of strings representing a subset of the given locale tags that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.getcanonicallocales": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/getcanonicallocales",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.getCanonicalLocales()</code></strong> method returns an array containing the canonical locale names. Duplicates will be omitted and elements will be validated as structurally valid language tags.</p>",
      "parameters": {
        "locales": "A list of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nvalues for which to get the canonical locale names."
      },
      "returns": "<p>An array containing the canonical locale names.</p>"
    },
    "intl.listformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.ListFormat</code></strong> object is a constructor for objects that enable language-sensitive list formatting.</p>"
    },
    "intl.listformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/format",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>format()</code></strong> method returns a string with a language-specific representation of the list.</p>",
      "parameters": {
        "list": "An iterable object, such as an Array"
      },
      "returns": "<p>A language-specific formatted string representing the elements of the list</p>"
    },
    "intl.listformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/formattoparts",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.ListFormat.prototype.formatToParts()</code></strong> method returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects representing the different components that can be used to format a list of values in a locale-aware fashion.</p>",
      "parameters": {
        "list": "An\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>\nof values to be formatted according to a locale."
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of components which contains the formatted parts from the list.</p>"
    },
    "intl.listformat.listformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/listformat",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.ListFormat()</code></strong> constructor creates objects that enable language-sensitive list formatting.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code><var>locales</var></code> argument, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>.<br>",
        "options": "An object with some or all of the following properties:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>lookup</code> and <code>best fit</code>; the default is <code>best fit</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n<dt><code>type</code></dt>\n<dd>The format of output message. Possible values are <code>conjunction</code> that stands for \"and\"-based lists (default, e.g., <code>A, B, and C</code>), or <code>disjunction</code> that stands for \"or\"-based lists (e.g., <code>A, B, or C</code>). <code>unit</code> stands for lists of values with units (e.g., <code>5 pounds, 12 ounces</code>).</dd>\n<dt><code>style</code></dt>\n<dd>The length of the formated message. Possible values are: <code>long</code> (default, e.g., <code>A, B, and C</code>); <code>short</code> (e.g., <code>A, B, C</code>), or <code>narrow</code> (e.g., <code>A B C</code>). When <code>style</code> is <code>short</code> or <code>narrow</code>, <code>unit</code> is the only allowed value for the type option.</dd>\n</dl>"
      }
    },
    "intl.listformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/resolvedoptions",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Intl.ListFormat.prototype.resolvedOptions()</strong></code> method returns a new object with properties reflecting the locale and style formatting options computed during the construction of the current <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\" ><code>ListFormat</code></a> object.</p>",
      "returns": "<p>An object with properties reflecting the locale and formatting options computed during the construction of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat\" data-flaw-src=\"{{jsxref(\"ListFormat\")}}\"><code>ListFormat</code></a> object.</p>"
    },
    "intl.listformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/listformat/supportedlocalesof",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.ListFormat.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form of the\n<code>locales</code>\nargument, see the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>\n.",
        "options": "Optional. An object that may have the following property:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>lookup</code> and <code>best fit</code>; the default is <code>best fit</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n</dl>"
      },
      "returns": "<p>An array of strings representing a subset of the given locale tags that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.locale": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale</code></strong> object is a standard built-in property of the Intl object that represents a Unicode locale identifier.</span></p>"
    },
    "intl.locale.basename": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/basename",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Locale.prototype.baseName</code></strong> property returns a substring of the <code>Locale</code>'s string representation, containing core information about the <code>Locale</code>.</p>"
    },
    "intl.locale.calendar": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/calendar",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Locale.prototype.calendar</code></strong> property is an accessor property which returns the type of calendar used in the <code>Locale</code>.</p>"
    },
    "intl.locale.casefirst": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/casefirst",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.caseFirst</code></strong> property is an accessor property that returns whether case is taken into account for the locale's collation rules.</span></p>"
    },
    "intl.locale.collation": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/collation",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.collation</code></strong> property is an accessor property that returns the <a href=\"https://www.unicode.org/reports/tr35/tr35-collation.html#CLDR_Collation\">collation type</a> for the <code>Locale</code>, which is used to order strings according to the locale's rules.</span></p>"
    },
    "intl.locale.hourcycle": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/hourcycle",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Locale.prototype.hourCycle</code></strong> property is an accessor property that returns the time keeping format convention used by the locale.</p>"
    },
    "intl.locale.language": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/language",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.language</code></strong> property is an accessor property that returns the language associated with the locale.</span></p>"
    },
    "intl.locale.locale": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/locale",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale</code></strong> constructor is a standard built-in property of the Intl object that represents a Unicode locale identifier.</span></p>",
      "parameters": {
        "tag": "The Unicode locale identifier string.",
        "options": "An object that contains configuration for the Locale. Keys are Unicode locale tags, values are valid Unicode tag values."
      }
    },
    "intl.locale.maximize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/maximize",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.maximize()</code></strong> method gets the most likely values for the language, script, and region of the locale based on existing values.</span></p>",
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\" data-flaw-src=\"{{jsxref(\"Locale\", \"Locale\")}}\"><code>Locale</code></a> instance whose <code>baseName</code> property returns the result of the <a href=\"https://www.unicode.org/reports/tr35/#Likely_Subtags\">Add Likely Subtags</a> algorithm executed against <em><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/baseName\" data-flaw-src=\"{{jsxref(\"Locale/baseName\", \"locale.baseName\")}}\"><code>locale.baseName</code></a></em>.</p>"
    },
    "intl.locale.minimize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/minimize",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.minimize()</code></strong> method attempts to remove information about the locale that would be added by calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/maximize\" ><code>Locale.maximize()</code></a>.</span></p>",
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale\" data-flaw-src=\"{{jsxref(\"Locale\", \"Locale\")}}\"><code>Locale</code></a> instance whose <code>baseName</code> property returns the result of the <a href=\"https://www.unicode.org/reports/tr35/#Likely_Subtags\">Remove Likely Subtags</a> algorithm executed against <code><em>locale.baseName</em></code>. </p>"
    },
    "intl.locale.numberingsystem": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/numberingsystem",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.numberingSystem</code></strong> property is an accessor property that returns the <a href=\"https://en.wikipedia.org/wiki/Numeral_system\">numeral system</a> used by the locale.</span></p>"
    },
    "intl.locale.numeric": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/numeric",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.numeric</code></strong> property is an accessor property that returns whether the locale has special collation handling for numeric characters.</span></p>"
    },
    "intl.locale.region": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/region",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Locale.prototype.region</code></strong> property is an accessor property that returns the region of the world (usually a country) associated with the locale.</p>"
    },
    "intl.locale.script": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/script",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.script</code></strong> property is an accessor property which returns the script used for writing the particular language used in the locale.</span></p>"
    },
    "intl.locale.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/locale/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Locale.prototype.toString()</code></strong> returns the Locale's full <a href=\"https://www.unicode.org/reports/tr35/#Unicode_locale_identifier\">locale identifier string</a>.</span></p>",
      "returns": "<p>The <em>locale</em>'s Unicode locale identifier string.</p>"
    },
    "intl.numberformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.NumberFormat</code></strong> object is a constructor for objects that enable language sensitive number formatting.</p>"
    },
    "intl.numberformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/format",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.NumberFormat.prototype.format()</code></strong> method formats a number according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\" ><code>NumberFormat</code></a> object.</p>",
      "parameters": {
        "number": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>\nor\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>\nto format."
      }
    },
    "intl.numberformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/formattoparts",
      "status": [
        "Experimental",
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.Numberformat.prototype.formatToParts()</code></strong> method allows locale-aware formatting of strings produced by <code>NumberFormat</code> formatters.</p>",
      "parameters": {
        "number": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>\nor\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>\nto format."
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted number in parts.</p>"
    },
    "intl.numberformat.numberformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/numberformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.NumberFormat()</code></strong> constructor creates objects that enable language sensitive number formatting.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code><var>locales</var></code> argument, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>. The following Unicode extension key is allowed:<br>\n<dl>\n<dt><code>nu</code></dt>\n<dd>The numbering system to be used. Possible values include: \"<code>adlm</code>\", \"<code>ahom</code>\", \"<code>arab</code>\", \"<code>arabext</code>\", \"<code>bali</code>\", \"<code>beng</code>\", \"<code>bhks</code>\", \"<code>brah</code>\", \"<code>cakm</code>\", \"<code>cham</code>\", \"<code>deva</code>\", \"<code>diak</code>\", \"<code>fullwide</code>\", \"<code>gong</code>\", \"<code>gonm</code>\", \"<code>gujr</code>\", \"<code>guru</code>\", \"<code>hanidec</code>\", \"<code>hmng</code>\", \"<code>hmnp</code>\", \"<code>java</code>\", \"<code>kali</code>\", \"<code>khmr</code>\", \"<code>knda</code>\", \"<code>lana</code>\", \"<code>lanatham</code>\", \"<code>laoo</code>\", \"<code>latn</code>\", \"<code>lepc</code>\", \"<code>limb</code>\", \"<code>mathbold</code>\", \"<code>mathdbl</code>\", \"<code>mathmono</code>\", \"<code>mathsanb</code>\", \"<code>mathsans</code>\", \"<code>mlym</code>\", \"<code>modi</code>\", \"<code>mong</code>\", \"<code>mroo</code>\", \"<code>mtei</code>\", \"<code>mymr</code>\", \"<code>mymrshan</code>\", \"<code>mymrtlng</code>\", \"<code>newa</code>\", \"<code>nkoo</code>\", \"<code>olck</code>\", \"<code>orya</code>\", \"<code>osma</code>\", \"<code>rohg</code>\", \"<code>saur</code>\", \"<code>segment</code>\", \"<code>shrd</code>\", \"<code>sind</code>\", \"<code>sinh</code>\", \"<code>sora</code>\", \"<code>sund</code>\", \"<code>takr</code>\", \"<code>talu</code>\", \"<code>tamldec</code>\", \"<code>telu</code>\", \"<code>thai</code>\", \"<code>tibt</code>\", \"<code>tirh</code>\", \"<code>vaii</code>\", \"<code>wara</code>\", \"<code>wcho</code>\".  — see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Locale/numberingSystem\">standard Unicode numeral systems list</a>.</dd>\n</dl>",
        "options": "An object with some or all of the following properties:<br>\n<dl>\n<dt><code>compactDisplay</code></dt>\n<dd>Only used when <code>notation</code> is \"<code>compact</code>\". Takes either \"<code>short</code>\" (default) or \"<code>long</code>\".</dd>\n<dt><code>currency</code></dt>\n<dd>The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"<code>USD</code>\" for the US dollar, \"<code>EUR</code>\" for the euro, or \"<code>CNY</code>\" for the Chinese RMB — see the <a href=\"http://www.currency-iso.org/en/home/tables/table-a1.html\">Current currency &amp; funds code list</a>. There is no default value; if the <code>style</code> is \"<code>currency</code>\", the <code>currency</code> property must be provided.</dd>\n<dt><code>currencyDisplay</code></dt>\n<dd>How to display the currency in currency formatting. Possible values are:\n<ul>\n<li>\"<code>symbol</code>\" to use a localized currency symbol such as €, this is the default value,</li>\n<li>\"<code>narrowSymbol</code>\" to use a narrow format symbol (\"$100\" rather than \"US$100\"),</li>\n<li>\"<code>code</code>\" to use the ISO currency code,</li>\n<li>\"<code>name</code>\" to use a localized currency name such as \"<code>dollar</code>\",</li>\n</ul>\n</dd>\n<dt><code>currencySign</code></dt>\n<dd>In many locales, accounting format means to wrap the number with parentheses instead of appending a minus sign. You can enable this formatting by setting the <code>currencySign</code> option to \"<code>accounting</code>\". The default value is \"<code>standard</code>\".</dd>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are \"<code>lookup</code>\" and \"<code>best fit</code>\"; the default is \"<code>best fit</code>\". For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n<dt><code>notation</code></dt>\n<dd>The formatting that should be displayed for the number, the defaults is \"<code>standard</code>\"\n<ul>\n<li>\"<code>standard</code>\" plain number formatting</li>\n<li>\"<code>scientific</code>\" return the order-of-magnitude for formatted number.</li>\n<li>\"<code>engineering</code>\" return the exponent of ten when divisible by three</li>\n<li>\"<code>compact</code>\" string representing exponent, defaults is using the \"short\" form.</li>\n</ul>\n</dd>\n<dt><code>numberingSystem</code></dt>\n<dd>Numbering System. Possible values include: \"<code>arab</code>\", \"<code>arabext</code>\", \" <code>bali</code>\", \"<code>beng</code>\", \"<code>deva</code>\", \"<code>fullwide</code>\", \" <code>gujr</code>\", \"<code>guru</code>\", \"<code>hanidec</code>\", \"<code>khmr</code>\", \" <code>knda</code>\", \"<code>laoo</code>\", \"<code>latn</code>\", \"<code>limb</code>\", \"<code>mlym</code>\", \" <code>mong</code>\", \"<code>mymr</code>\", \"<code>orya</code>\", \"<code>tamldec</code>\", \" <code>telu</code>\", \"<code>thai</code>\", \"<code>tibt</code>\".</dd>\n<dt><code>signDisplay</code></dt>\n<dd>When to display the sign for the number; defaults to \"<code>auto</code>\"\n<ul>\n<li>\"<code>auto</code>\" sign display for negative numbers only</li>\n<li>\"<code>never</code>\" never display sign</li>\n<li>\"<code>always</code>\" always display sign</li>\n<li>\"<code>exceptZero</code>\" sign display for positive and negative numbers, but not zero</li>\n</ul>\n</dd>\n<dt><code>style</code></dt>\n<dd>The formatting style to use , the default is \"<code>decimal</code>\".\n<ul>\n<li>\"<code>decimal</code>\" for plain number formatting.</li>\n<li>\"<code>currency</code>\" for currency formatting.</li>\n<li>\"<code>percent</code>\" for percent formatting</li>\n<li>\"<code>unit</code>\" for unit formatting</li>\n</ul>\n</dd>\n<dt><code>unit</code></dt>\n<dd>The unit to use in <code>unit</code> formatting, Possible values are core unit identifiers, defined in <a href=\"http://unicode.org/reports/tr35/tr35-general.html#Unit_Elements\" rel=\"nofollow\">UTS #35, Part 2, Section 6</a>. A <a href=\"https://tc39.es/proposal-unified-intl-numberformat/section6/locales-currencies-tz_proposed_out.html#sec-issanctionedsimpleunitidentifier\" rel=\"nofollow\">subset</a> of units from the <a href=\"https://github.com/unicode-org/cldr/blob/master/common/validity/unit.xml\">full list</a> was selected for use in ECMAScript. Pairs of simple units can be concatenated with \"<code>-per-</code>\" to make a compound unit. There is no default value; if the <code>style</code> is \"<code>unit</code>\", the <code>unit</code> property must be provided.</dd>\n<dt><code>unitDisplay</code></dt>\n<dd>The unit formatting style to use in <code>unit</code> formatting, the defaults is \"<code>short</code>\".\n<ul>\n<li>\"<code>long</code>\" (e.g., <code>16 litres</code>)</li>\n<li>\"<code>short</code>\" (e.g., <code>16 l</code>)</li>\n<li>\"<code>narrow</code>\" (e.g., <code>16l</code>)</li>\n</ul>\n</dd>\n<dt><code>useGrouping</code></dt>\n<dd>Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators. Possible values are true and false; the default is true.</dd>\n</dl>The following properties fall into two groups: <code>minimumIntegerDigits</code>, <code>minimumFractionDigits</code>, and <code>maximumFractionDigits</code> in one group, <code>minimumSignificantDigits</code> and <code>maximumSignificantDigits</code> in the other. If at least one property from the second group is defined, then the first group is ignored.<br>\n<dl>\n<dt><code>minimumIntegerDigits</code></dt>\n<dd>The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.</dd>\n<dt><code>minimumFractionDigits</code></dt>\n<dd>The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the <a href=\"http://www.currency-iso.org/en/home/tables/table-a1.html\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information).</dd>\n<dt><code>maximumFractionDigits</code></dt>\n<dd>The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of <code>minimumFractionDigits</code> and 3; the default for currency formatting is the larger of <code>minimumFractionDigits</code> and the number of minor unit digits provided by the <a href=\"http://www.currency-iso.org/en/home/tables/table-a1.html\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information); the default for percent formatting is the larger of <code>minimumFractionDigits</code> and 0.</dd>\n<dt><code>minimumSignificantDigits</code></dt>\n<dd>The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.</dd>\n<dt><code>maximumSignificantDigits</code></dt>\n<dd>The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21.</dd>\n</dl>"
      }
    },
    "intl.numberformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.NumberFormat.prototype.resolvedOptions()</code></strong> method returns a new object with properties reflecting the locale and number formatting options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\" ><code>NumberFormat</code></a> object.</p>",
      "returns": "<p>A new object with properties reflecting the locale and number formatting options computed during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat\" data-flaw-src=\"{{jsxref(\"NumberFormat\")}}\"><code>NumberFormat</code></a> object.</p>"
    },
    "intl.numberformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/numberformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.NumberFormat.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in number formatting without having to fall back to the runtime's default locale.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form of the\n<code>locales</code>\nargument, see the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>\n.",
        "options": "Optional. An object that may have the following property:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>lookup</code> and <code>best fit</code>; the default is <code>best fit</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n</dl>"
      },
      "returns": "<p>An array of strings representing a subset of the given locale tags that are supported in number formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.pluralrules": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.PluralRules</code></strong> object enables plural-sensitive formatting and plural-related language rules.</p>"
    },
    "intl.pluralrules.pluralrules": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/pluralrules",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.PluralRules()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\" ><code>Intl.PluralRules</code></a> objects.</p>",
      "parameters": {
        "locales": "Optional. A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>.<br>",
        "options": "Optional. An object with some or all of the following properties:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n<dt><code>type</code></dt>\n<dd>The type to use. Possible values are:\n<ul>\n<li><code>\"cardinal\"</code> for cardinal numbers (refering to the quantity of things). This is the default value.</li>\n<li><code>\"ordinal\"</code> for ordinal number (refering to the ordering or ranking of things, e.g. \"1st\", \"2nd\", \"3rd\" in English).</li>\n</ul>\n</dd>\n</dl>\nThe following properties fall into two groups: <code>minimumIntegerDigits</code>, <code>minimumFractionDigits</code>, and <code>maximumFractionDigits</code> in one group, <code>minimumSignificantDigits</code> and <code>maximumSignificantDigits</code> in the other. If at least one property from the second group is defined, then the first group is ignored.<br><dl>\n<dt><code>minimumIntegerDigits</code></dt>\n<dd>The minimum number of integer digits to use. Possible values are from 1 to 21; the default is 1.</dd>\n<dt><code>minimumFractionDigits</code></dt>\n<dd>The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0; the default for currency formatting is the number of minor unit digits provided by the <a href=\"http://www.currency-iso.org/en/home/tables/table-a1.html\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information).</dd>\n<dt><code>maximumFractionDigits</code></dt>\n<dd>The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of <code>minimumFractionDigits</code> and 3; the default for currency formatting is the larger of <code>minimumFractionDigits</code> and the number of minor unit digits provided by the <a href=\"http://www.currency-iso.org/en/home/tables/table-a1.html\">ISO 4217 currency code list</a> (2 if the list doesn't provide that information); the default for percent formatting is the larger of <code>minimumFractionDigits</code> and 0.</dd>\n<dt><code>minimumSignificantDigits</code></dt>\n<dd>The minimum number of significant digits to use. Possible values are from 1 to 21; the default is 1.</dd>\n<dt><code>maximumSignificantDigits</code></dt>\n<dd>The maximum number of significant digits to use. Possible values are from 1 to 21; the default is 21.</dd>\n</dl>"
      }
    },
    "intl.pluralrules.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.PluralRules.prototype.resolvedOptions()</code></strong> method returns a new object with properties reflecting the locale and plural formatting options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\" ><code>PluralRules</code></a> object.</p>",
      "returns": "<p>A new object with properties reflecting the locale and plural formatting options computed during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/PluralRules\" data-flaw-src=\"{{jsxref(\"PluralRules\")}}\"><code>PluralRules</code></a> object.</p>"
    },
    "intl.pluralrules.select": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/select",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.PluralRules.prototype.select</code></strong> method returns a String indicating which plural rule to use for locale-aware formatting.</p>",
      "parameters": {
        "number": "The number to get a plural rule for."
      },
      "returns": "<p>A <code>string</code> representing the pluralization category of the <code>number</code>, can be one of <code>zero</code>, <code>one</code>, <code>two</code>, <code>few</code>, <code>many</code> or <code>other</code>.</p>"
    },
    "intl.pluralrules.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/pluralrules/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.PluralRules.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in plural formatting without having to fall back to the runtime's default locale.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form of the\n<code>locales</code>\nargument, see the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>\n.",
        "options": "Optional. An object that may have the following property:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>lookup</code> and <code>best fit</code>; the default is <code>best fit</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n</dl>"
      },
      "returns": "<p>An array of strings representing a subset of the given locale tags that are supported in plural formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.relativetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.RelativeTimeFormat</code></strong> object enables language-sensitive relative time formatting.</p>"
    },
    "intl.relativetimeformat.format": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/format",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.RelativeTimeFormat.prototype.format()</code></strong> method formats a <code>value</code> and <code>unit</code> according to the locale and formatting options of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> object.</p>",
      "parameters": {
        "value": "Numeric value to use in the internationalized relative time message.",
        "unit": "Unit to use in the relative time internationalized message. Possible values are: \"\n<code>year</code>\n\", \"\n<code>quarter</code>\n\", \"\n<code>month</code>\n\", \"\n<code>week</code>\n\", \"\n<code>day</code>\n\", \"\n<code>hour</code>\n\", \"\n<code>minute</code>\n\", \"\n<code>second</code>\n\". Plural forms are also permitted."
      }
    },
    "intl.relativetimeformat.formattoparts": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/formattoparts",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>Intl.RelativeTimeFormat.prototype.formatToParts()</code> method returns an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects representing the relative time format in parts that can be used for custom locale-aware formatting.</p>",
      "parameters": {
        "value": "Numeric value to use in the internationalized relative time message.",
        "unit": "Unit to use in the relative time internationalized message. Possible values are:\n<code>\"year\"</code>\n,\n<code>\"quarter\"</code>\n,\n<code>\"month\", \"week\", \"day\", \"hour\", \"minute\", \"second\"</code>\n. Plural forms are also permitted."
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of objects containing the formatted relative time in parts.</p>"
    },
    "intl.relativetimeformat.relativetimeformat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/relativetimeformat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.RelativeTimeFormat()</code></strong> constructor creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\"><code>Intl.RelativeTimeFormat</code></a> objects.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the <code>locales</code> argument, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>.<br>",
        "options": "An object with some or all of the following properties:\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>lookup</code> and <code>best fit</code>; the default is <code>best fit</code>. For information about this option, see <a class=\"new\"  ><code>Intl</code></a>.</dd>\n<dt><code>numeric</code></dt>\n<dd>\nThe format of output message. Possible values are:\n<ul>\n<li>\"<code>always</code>\" (default, e.g., <code>1 day ago</code>),</li>\n<li>or \"<code>auto</code>\" (e.g., <code>yesterday</code>). The \"<code>auto</code>\" value allows to not always have to use numeric values in the output.</li>\n</ul>\n</dd>\n<dt><code>style</code></dt>\n<dd>\nThe length of the internationalized message. Possible values are:\n<ul>\n<li>\"<code>long</code>\" (default, e.g., <code>in 1 month</code>)</li>\n<li>\"<code>short</code>\" (e.g., <code>in 1 mo.</code>),</li>\n<li>or \"<code>narrow</code>\" (e.g., <code>in 1 mo.</code>). The narrow style could be similar to the short style for some locales.</li>\n</ul>\n</dd>\n</dl>"
      }
    },
    "intl.relativetimeformat.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/resolvedoptions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.RelativeTimeFormat.prototype.resolvedOptions()</code></strong> method returns a new object with properties reflecting the locale and relative time formatting options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" ><code>RelativeTimeFormat</code></a> object.</p>",
      "returns": "<p>A new object with properties reflecting the locale and number formatting options computed during the initialization of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat\" data-flaw-src=\"{{jsxref(\"RelativeTimeFormat\")}}\"><code>RelativeTimeFormat</code></a> object.</p>"
    },
    "intl.relativetimeformat.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/relativetimeformat/supportedlocalesof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Intl.RelativeTimeFormat.supportedLocalesOf()</code></strong> method returns an array containing those of the provided locales that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>",
      "parameters": {
        "locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form of the\n<code>locales</code>\nargument, see the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\">Intl page</a>\n.",
        "options": "Optional. An object that may have the following property:<br>\n<dl>\n<dt><code>localeMatcher</code></dt>\n<dd>The locale matching algorithm to use. Possible values are <code>\"lookup\"</code> and <code>\"best fit\"</code>; the default is <code>\"best fit\"</code>. For information about this option, see the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation\">Intl page</a>.</dd>\n</dl>"
      },
      "returns": "<p>An array of strings representing a subset of the given locale tags that are supported in date and time formatting without having to fall back to the runtime's default locale.</p>"
    },
    "intl.segmenter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter",
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Intl.Segmenter</code></strong> object is a constructor for segmenters, objects that enable language sensitive string splitting.</span></p>"
    },
    "intl.segmenter.resolvedoptions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/resolvedoptions",
      "doc": "<p>Returns a new object with properties reflecting the locale and granularity options computed during initialization of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> object.</p>"
    },
    "intl.segmenter.segment": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segment",
      "doc": "<p>Getter function that segments a string according to the locale and granularity of this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Segmenter\"><code>Intl.Segmenter</code></a> object.</p>"
    },
    "intl.segmenter.segmentdata": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segmentdata",
      "doc": ""
    },
    "intl.segmenter.segments": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segments",
      "doc": "<p>[Placeholder: See https://github.com/mdn/sprints/issues/3876]</p>"
    },
    "intl.segmenter.segments.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segments/@@iterator",
      "doc": "<p>[Placeholder: See https://github.com/mdn/sprints/issues/3876]</p>"
    },
    "intl.segmenter.segments.containing": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/segments/containing",
      "doc": "<p>[Placeholder: See https://github.com/mdn/sprints/issues/3876]</p>"
    },
    "intl.segmenter.supportedlocalesof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/intl/segmenter/supportedlocalesof",
      "doc": "<p>Returns an array containing those of the provided locales that are supported without having to fall back to the runtime's default locale.</p>"
    },
    "isfinite": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/isfinite",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The global <code><strong>isFinite()</strong></code> function determines whether the passed value is a finite number. If  needed, the parameter is first converted to a number.</p>",
      "parameters": {
        "testValue": "The value to be tested for finiteness."
      },
      "returns": "<p><strong><code>false</code></strong> if the argument is (or will be coerced to) positive or negative <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>; otherwise, <strong><code>true</code></strong>.</p>"
    },
    "isnan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/isnan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>isNaN()</strong></code> function determines whether a value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> or not. Note, coercion inside the <code>isNaN</code> function has <a href=\"#Description\">interesting</a> rules; you may alternatively want to use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/isNaN\"><code>Number.isNaN()</code></a>, as defined in ECMAScript 2015.</p>",
      "parameters": {
        "value": "The value to be tested."
      },
      "returns": "<p><strong><code>true</code></strong> if the given value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>; otherwise, <strong><code>false</code></strong>.</p>"
    },
    "json": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>JSON</code></strong> object contains methods for parsing <a class=\"external\" href=\"https://json.org/\">JavaScript Object Notation</a> (<a href=\"$MDN_URL$/Glossary/JSON\">JSON</a>) and converting values to JSON. It can't be called or constructed, and aside from its two method properties, it has no interesting functionality of its own.</span></p>"
    },
    "json.parse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json/parse",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>JSON.parse()</code></strong> method parses a JSON string, constructing the JavaScript value or object described by the string. An optional <strong>reviver</strong> function can be provided to perform a transformation on the resulting object before it is returned.</span></p>",
      "parameters": {
        "text": "The string to parse as JSON. See the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/JSON\"><code>JSON</code></a>\nobject for a description of JSON syntax.",
        "reviver": "If a function, this prescribes how the value originally produced by parsing is transformed, before being returned."
      },
      "returns": "<p>The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>, string, number, boolean, or null value corresponding to the given JSON <code><var>text</var></code>.</p>"
    },
    "json.stringify": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/json/stringify",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>JSON.stringify()</code></strong> method converts a JavaScript object or value to a JSON string, optionally replacing values if a replacer function is specified or optionally including only the specified properties if a replacer array is specified.</p>",
      "parameters": {
        "value": "The value to convert to a JSON string.",
        "replacer": "A function that alters the behavior of the stringification process, or an array of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nand\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>\nthat serve as an allowlist for selecting/filtering the properties of the value object to be included in the JSON string. If this value is\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>\nor not provided, all properties of the object are included in the resulting JSON string.",
        "space": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nor\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>\nobject that's used to insert white space into the output JSON string for readability purposes.\nIf this is a <code>Number</code>, it indicates the number of space characters to use as white space; this number is capped at 10 (if it is greater, the value is just <code>10</code>). Values less than 1 indicate that no space should be used.<br>\nIf this is a <code>String</code>, the string (or the first 10 characters of the string, if it's longer than that) is used as white space. If this parameter is not provided (or is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>), no white space is used.<br>"
      },
      "returns": "<p>A JSON string representing the given value.</p>"
    },
    "map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Map</code></strong> object holds key-value pairs and remembers the original insertion order of the keys.</span> Any value (both objects and <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a>) may be used as either a key or a value.</p>"
    },
    "map.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p class=\"seoSummary\">The initial value of the <strong><code>@@iterator</code></strong> property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>entries</code></a> method.</p>",
      "returns": "<p>The map <strong>iterator</strong> function, which is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map/entries\"><code>entries()</code></a> function by default.</p>"
    },
    "map.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Map[@@species]</code></strong> accessor property returns the <code>Map</code> constructor.</p>"
    },
    "map.@@tostringtag": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/@@tostringtag",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Map[@@toStringTag]</code></strong> property has an initial value of \"Map\".</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Map.prototype[@@toStringTag]</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "map.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/clear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>clear()</code></strong> method removes all elements from a <code>Map</code> object.</p>",
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "map.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/delete",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>delete()</code></strong> method removes the specified element from a <code>Map</code> object by key.</p>",
      "parameters": {
        "key": "The key of the element to remove from the\n<code>Map</code>\nobject."
      },
      "returns": "<p><code>true</code> if an element in the <code>Map</code> object existed and has been removed, or <code>false</code> if the element does not exist.</p>"
    },
    "map.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/entries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>entries()</code></strong> method returns a new <strong><a href=\"$MDN_URL$/Web/JavaScript/Guide/Iterators_and_Generators\">Iterator</a></strong> object that contains the <code>[key, value]</code> pairs for each element in the <code>Map</code> object in insertion order.</p>",
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> iterator object.</p>"
    },
    "map.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/foreach",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>forEach()</code></strong> method executes a provided function once per each key/value pair in the <code>Map</code> object, in insertion order.</span></p>",
      "parameters": {
        "callback": "Function to execute for each entry of <code><var>myMap</var></code>. It takes the following arguments:<br>\n<dl>\n<dt><code><var>value</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>Value of each iteration.</dd>\n<dt><code><var>key</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>Key of each iteration.</dd>\n<dt><code><var>map</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The map being iterated (<code><var>myMap</var></code> in the above Syntax box).</dd>\n</dl>",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "map.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/get",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>get()</code></strong> method returns a specified element from a <code>Map</code> object. If the value that is associated to the provided key is an object, then you will get a reference to that object and any change made to that object will effectively modify it inside the <code>Map</code> object.</p>",
      "parameters": {
        "key": "The key of the element to return from the\n<code>Map</code>\nobject."
      },
      "returns": "<p>The element associated with the specified key, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if the key can't be found in the <code>Map</code> object.</p>"
    },
    "map.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>has()</code></strong> method returns a boolean indicating whether an element with the specified key exists or not.</p>",
      "parameters": {
        "key": "The key of the element to test for presence in the\n<code>Map</code>\nobject."
      },
      "returns": "<p><code>true</code> if an element with the specified key exists in the <code>Map</code> object; otherwise <code>false</code>.</p>"
    },
    "map.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/keys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>keys()</code></strong> method returns a new <strong><a href=\"$MDN_URL$/Web/JavaScript/Guide/Iterators_and_Generators\">Iterator</a></strong> object that contains the keys for each element in the <code>Map</code> object in insertion order.</p>",
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> iterator object.</p>"
    },
    "map.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/map",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Map()</code> constructor</strong> creates <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> objects.</p>",
      "parameters": {
        "iterable": "An\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>\nor other\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\" data-flaw=\"link1\">iterable</a>\nobject whose elements are key-value pairs. (For example, arrays with two elements, such as\n<code>[[ 1, 'one' ],[ 2, 'two' ]]</code>\n.) Each key-value pair is added to the new\n<code>Map</code>\n."
      }
    },
    "map.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>set()</code></strong> method adds or updates an element with a specified key and a value to a <code>Map</code> object.</p>",
      "parameters": {
        "key": "The key of the element to add to the\n<code>Map</code>\nobject.",
        "value": "The value of the element to add to the\n<code>Map</code>\nobject."
      },
      "returns": "<p>The <code>Map</code> object.</p>"
    },
    "map.size": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/size",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>size</code></strong> accessor property returns the number of elements in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> object.</p>"
    },
    "map.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/map/values",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>values()</code></strong> method returns a new <strong><a href=\"$MDN_URL$/Web/JavaScript/Guide/Iterators_and_Generators\">Iterator</a></strong> object that contains the values for each element in the <code>Map</code> object in insertion order.</p>",
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> iterator object.</p>"
    },
    "math": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math",
      "doc": "<p><strong><code>Math</code></strong> is a built-in object that has properties and methods for mathematical constants and functions. It’s not a function object.</p>\n<p><code>Math</code> works with the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> type. It doesn't work with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a>.</p>"
    },
    "math.abs": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/abs",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Math.abs()</code></strong> function returns the absolute value of a number</span>, that is</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.abs</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mrow><mo stretchy=\"false\">|</mo><mi>x</mi><mo stretchy=\"false\">|</mo></mrow><mo>=</mo><mrow><mo>{</mo><mtable columnalign=\"left left\"><mtr><mtd><mi>x</mi></mtd><mtd><mtext>if</mtext><mspace width=\"1em\"></mspace><mi>x</mi><mo>&gt;</mo><mn>0</mn></mtd></mtr><mtr><mtd><mi>0</mi></mtd><mtd><mtext>if</mtext><mspace width=\"1em\"></mspace><mi>x</mi><mo>=</mo><mn>0</mn></mtd></mtr><mtr><mtd><mo>-</mo><mi>x</mi></mtd><mtd><mtext>if</mtext><mspace width=\"1em\"></mspace><mi>x</mi><mo>&lt;</mo><mn>0</mn></mtd></mtr></mtable></mrow></mrow><annotation encoding=\"TeX\">{\\mathtt{\\operatorname{Math.abs}(z)}} = {|z|} = \\begin{cases} x &amp; \\text{if} \\quad x \\geq 0 \\\\ x &amp; \\text{if} \\quad x &lt; 0 \\end{cases} </annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The absolute value of the given number.</p>"
    },
    "math.acos": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/acos",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.acos()</code></strong> function returns the arccosine (in radians) of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mrow><mo>-</mo><mn>1</mn></mrow><mo>;</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>,</mo><mspace width=\"thickmathspace\"></mspace><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.acos</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arccos</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo>;</mo><mi>π</mi><mo stretchy=\"false\">]</mo><mspace width=\"thinmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">cos</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\in [{-1};1],\\;\\mathtt{\\operatorname{Math.acos}(x)} = \\arccos(x) = \\text{ the unique } \\; y \\in [0; \\pi] \\, \\text{such that} \\; \\cos(y) = x</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number representing a cosine, where\n<code><var>x</var></code>\nis between\n<code>-1</code>\nand\n<code>1</code>\n."
      },
      "returns": "<p>The arccosine (angle in radians) of the given number if it's between <code>-1</code> and <code>1</code>; otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.</p>"
    },
    "math.acosh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/acosh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.acosh()</code></strong> function returns the hyperbolic arc-cosine of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>≥</mo><mn>1</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.acosh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"thinmathspace\">arcosh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mo>≥</mo><mn>0</mn><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">cosh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\geq 1, \\mathtt{\\operatorname{Math.acosh}(x)} = \\operatorname{arcosh}(x) = \\text{ the unique } \\; y \\geq 0 \\; \\text{such that} \\; \\cosh(y) = x</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The hyperbolic arc-cosine of the given number. If the number is less than <strong>1</strong>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.</p>"
    },
    "math.asin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/asin",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.asin()</code></strong> function returns the arcsine (in radians) of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>∊</mo><mo stretchy=\"false\">[</mo><mrow><mo>-</mo><mn>1</mn></mrow><mo>;</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>,</mo><mspace width=\"thickmathspace\"></mspace><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.asin</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arcsin</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mo>∊</mo><mrow><mo>[</mo><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo>;</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><mo>]</mo></mrow><mspace width=\"thinmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">sin</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\in [{-1};1],\\;\\mathtt{\\operatorname{Math.asin}(x)} = \\arcsin(x) = \\text{ the unique } \\; y \\in \\left[-\\frac{\\pi}{2}; \\frac{\\pi}{2}\\right] \\, \\text{such that} \\; \\sin(y) = x</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The arcsine (in radians) of the given number if it's between <strong>-1</strong> and <strong>1</strong>; otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.</p>"
    },
    "math.asinh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/asinh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.asinh()</code></strong> function returns the hyperbolic arcsine of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.asinh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"thinmathspace\">arsinh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">sinh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.asinh}(x)} = \\operatorname{arsinh}(x) = \\text{ the unique } \\; y \\; \\text{such that} \\; \\sinh(y) = x</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The hyperbolic arcsine of the given number.</p>"
    },
    "math.atan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.atan()</code></strong> function returns the arctangent (in radians) of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.atan</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">arctan</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mo>∊</mo><mrow><mo>[</mo><mrow><mo>-</mo><mfrac><mi>π</mi><mn>2</mn></mfrac><mo>;</mo><mfrac><mi>π</mi><mn>2</mn></mfrac></mrow><mo>]</mo></mrow><mspace width=\"thinmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">tan</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.atan}(x)} = \\arctan(x) = \\text{ the unique } \\; y \\in \\left[-\\frac{\\pi}{2}; \\frac{\\pi}{2}\\right] \\, \\text{such that} \\; \\tan(y) = x</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The arctangent (in radians) of the given number.</p>"
    },
    "math.atan2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atan2",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.atan2()</code></strong> function returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y), for <code>Math.atan2(y,x)</code>.</p>",
      "parameters": {
        "y": "The y coordinate of the point.",
        "x": "The x coordinate of the point"
      },
      "returns": "<p>The angle in radians (in <math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>-</mo><mi>π</mi><mo>,</mo><mi>π</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"TeX\">[-\\pi, \\pi]</annotation></semantics></math>) between the positive x-axis and the ray from (0,0) to the point <math><semantics><annotation encoding=\"TeX\">(x,y).</annotation></semantics></math></p>"
    },
    "math.atanh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/atanh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.atanh()</code></strong> function returns the hyperbolic arctangent of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>∊</mo><mrow><mo>(</mo><mrow><mo>-</mo><mn>1</mn><mo>,</mo><mn>1</mn></mrow><mo>)</mo></mrow><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.atanh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"thinmathspace\">arctanh</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext> the unique </mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><mo lspace=\"0em\" rspace=\"0em\">tanh</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\in \\left( -1, 1 \\right), \\mathtt{\\operatorname{Math.atanh}(x)} = \\operatorname{arctanh}(x) = \\text{ the unique } \\; y \\; \\text{such that} \\; \\tanh(y) = x</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The hyperbolic arctangent of the given number.</p>"
    },
    "math.cbrt": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cbrt",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.cbrt()</code></strong> function returns the cube root of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mrow><mi>M</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo>.</mo><mi>c</mi><mi>b</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mroot><mi>x</mi><mn>3</mn></mroot><mo>=</mo><mtext>the unique</mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><msup><mi>y</mi><mn>3</mn></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\mathtt{Math.cbrt(x)} = \\sqrt[3]{x} = \\text{the unique} \\; y \\; \\text{such that} \\; y^3 = x</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The cube root of the given number.</p>"
    },
    "math.ceil": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ceil",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.ceil()</code></strong> function always rounds a number up to the next largest integer.</p>\n<p><strong>Note: </strong><code>Math.ceil(<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>)</code> returns integer 0 and does not give a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> error.</p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The smallest integer greater than or equal to the given number.</p>"
    },
    "math.clz32": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/clz32",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.clz32()</code></strong> function returns the number of leading zero bits in the 32-bit binary representation of a number.</p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The number of leading zero bits in the 32-bit binary representation of the given number.</p>"
    },
    "math.cos": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cos",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Math.cos()</code></strong> static function returns the <a  href=\"https://en.wikipedia.org/wiki/cosine\">cosine</a> of the specified angle, which must be specified in <a  href=\"https://en.wikipedia.org/wiki/radians\">radians</a>. This value is </span><math style=\"display: inline;\"> <mstyle displaystyle=\"true\"> <mfrac> <msub> <mrow> <mtext>length</mtext> </mrow> <mrow> <mrow> <mtext>adjacent</mtext> </mrow> </mrow> </msub> <msub> <mrow> <mtext>length</mtext> </mrow> <mrow> <mrow> <mtext>hypotenuse</mtext> </mrow> </mrow> </msub> </mfrac> </mstyle> </math>.</p>",
      "parameters": {
        "x": "The angle in radians for which to return the cosine."
      },
      "returns": "<p>The cosine of the given number.</p>"
    },
    "math.cosh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/cosh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.cosh()</code></strong> function returns the hyperbolic cosine of a number, that can be expressed using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">constant e</a>:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.cosh(x)</mo></mstyle><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>-</mo><mi>x</mi></mrow></msup></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.cosh(x)}} = \\frac{e^x + e^{-x}}{2}</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The hyperbolic cosine of the given number.</p>"
    },
    "math.e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/e",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.E</code></strong> property represents the base of natural logarithms, e, approximately 2.718.</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.E</mi></mstyle><mo>=</mo><mi>e</mi><mo>≈</mo><mn>2.718</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.E}} = e \\approx 2.718</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.E</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.exp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/exp",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.exp()</code></strong> function returns <code>e<sup>x</sup></code>, where <code>x</code> is the argument, and <code>e</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">Euler's number (also known as Napier's constant)</a>, the base of the natural logarithms.</p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>A number representing <code>e<sup><var>x</var></sup></code>, where <code>e</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">Euler's number</a> and <code><var>x</var></code> is the argument.</p>"
    },
    "math.expm1": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/expm1",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.expm1()</code></strong> function returns <code>e<sup>x</sup> - 1</code>, where <code>x</code> is the argument, and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">e</a> the base of the natural logarithms.</p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>A number representing <code>e<sup>x</sup> - 1</code>, where <code>e</code> is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">Euler's number</a> and <code>x</code> is the argument.</p>"
    },
    "math.floor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/floor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.floor()</code></strong> function returns the largest integer less than or equal to a given number.</p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>A number representing the largest integer less than or equal to the specified number.</p>"
    },
    "math.fround": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/fround",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p class=\"seoSummary\">The <strong><code>Math.fround()</code></strong> function returns the nearest <a  href=\"https://en.wikipedia.org/wiki/Single-precision floating-point format\">32-bit single precision</a> float representation of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>.</p>",
      "parameters": {
        "doubleFloat": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>\n. If the parameter is of a different type, it will get converted to a number or to\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>\nif it cannot be converted."
      },
      "returns": "<p>The nearest <a title=\"32-bit single precision\" href=\"https://en.wikipedia.org/wiki/Single-precision floating-point format\">32-bit single precision</a> float representation of the given number.</p>"
    },
    "math.hypot": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/hypot",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.hypot()</code></strong> function returns the square root of the sum of squares of its arguments, that is:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.hypot</mo><mo stretchy=\"false\">(</mo><msub><mi>v</mi><mn>1</mn></msub><mo>,</mo><msub><mi>v</mi><mn>2</mn></msub><mo>,</mo><mo>…</mo><mo>,</mo><msub><mi>v</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><msqrt><mrow><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msubsup><mi>v</mi><mi>i</mi><mn>2</mn></msubsup></mrow></msqrt><mo>=</mo><msqrt><mrow><msubsup><mi>v</mi><mn>1</mn><mn>2</mn></msubsup><mo>+</mo><msubsup><mi>v</mi><mn>2</mn><mn>2</mn></msubsup><mo>+</mo><mo>…</mo><mo>+</mo><msubsup><mi>v</mi><mi>n</mi><mn>2</mn></msubsup></mrow></msqrt></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.hypot}(v_1, v_2, \\dots, v_n)} = \\sqrt{\\sum_{i=1}^n v_i^2} = \\sqrt{v_1^2 + v_2^2 + \\dots + v_n^2}</annotation></semantics></math></p>",
      "parameters": {
        "value1, value2, ...": "Numbers."
      },
      "returns": "<p>The square root of the sum of squares of the given arguments. If at least one of the arguments cannot be converted to a number, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned.</p>"
    },
    "math.imul": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/imul",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.imul()</code></strong> function returns the result of the C-like 32-bit multiplication of the two parameters.</p>",
      "parameters": {
        "a": "First number.",
        "b": "Second number."
      },
      "returns": "<p>The result of the C-like 32-bit multiplication of the given arguments.</p>"
    },
    "math.ln10": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ln10",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.LN10</code></strong> property represents the natural logarithm of 10, approximately 2.302:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.LN10</mi></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mn>10</mn><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>2.302</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LN10}} = \\ln(10) \\approx 2.302</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.LN10</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.ln2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/ln2",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.LN2</code></strong> property represents the natural logarithm of 2, approximately 0.693:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.LN2</mi></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>0.693</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LN2}} = \\ln(2) \\approx 0.693</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.LN2</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.log": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.log()</code></strong> function returns the natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\"><code>e</code></a>) of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.log</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique</mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><msup><mi>e</mi><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0, \\mathtt{\\operatorname{Math.log}(x)} = \\ln(x) = \\text{the unique} \\; y \\; \\text{such that} \\; e^y = x</annotation></semantics></math></p>\n<p>The JavaScript <strong><code>Math.log()</code></strong> function is equivalent to <em>ln(x)</em> in mathematics.</p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\"><code>e</code></a>) of the given number. If the number is negative, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned.</p>"
    },
    "math.log10": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log10",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.log10()</code></strong> function returns the base 10 logarithm of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.log10</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>10</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique</mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><msup><mn>10</mn><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0, \\mathtt{\\operatorname{Math.log10}(x)} = \\log_10(x) = \\text{the unique} \\; y \\; \\text{such that} \\; 10^y = x</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The base 10 logarithm of the given number. If the number is negative, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned.</p>"
    },
    "math.log10e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log10e",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.LOG10E</code></strong> property represents the base 10 logarithm of e, approximately 0.434:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.LOG10E</mi></mstyle><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>10</mn></msub><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>0.434</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LOG10E}} = \\log_10(e) \\approx 0.434</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.LOG10E</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.log1p": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log1p",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.log1p()</code></strong> function returns the natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\"><code>e</code></a>) of 1 + a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mo>-</mo><mn>1</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.log1p</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><mo lspace=\"0em\" rspace=\"0em\">ln</mo><mo stretchy=\"false\">(</mo><mn>1</mn><mo>+</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"TeX\">\\forall x &gt; -1, \\mathtt{\\operatorname{Math.log1p}(x)} = \\ln(1 + x)</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The natural logarithm (base <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\"><code>e</code></a>) of <strong>1</strong> plus the given number. If the number is less than <strong>-1</strong>, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned.</p>"
    },
    "math.log2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log2",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.log2()</code></strong> function returns the base 2 logarithm of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>&gt;</mo><mn>0</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.log2</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mtext>the unique</mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><msup><mn>2</mn><mi>y</mi></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x &gt; 0, \\mathtt{\\operatorname{Math.log2}(x)} = \\log_2(x) = \\text{the unique} \\; y \\; \\text{such that} \\; 2^y = x</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The base 2 logarithm of the given number. If the number is negative, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned.</p>"
    },
    "math.log2e": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/log2e",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.LOG2E</code></strong> property represents the base 2 logarithm of e, approximately 1.442:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.LOG2E</mi></mstyle><mo>=</mo><msub><mo lspace=\"0em\" rspace=\"0em\">log</mo><mn>2</mn></msub><mo stretchy=\"false\">(</mo><mi>e</mi><mo stretchy=\"false\">)</mo><mo>≈</mo><mn>1.442</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.LOG2E}} = \\log_2(e) \\approx 1.442</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.LOG2E</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.max": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/max",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Math.max()</code></strong> function returns the largest of the zero or more numbers given as input parameters.</span></p>",
      "parameters": {
        "value1, value2, ...": "Numbers."
      },
      "returns": "<p>The largest of the given numbers. If any of the arguments are <code>NaN</code> or cannot be converted to a number, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned.</p>"
    },
    "math.min": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/min",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static function <strong><code>Math.min()</code></strong> returns the lowest-valued number passed into it, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> if any parameter isn't a number and can't be converted into one.</span></p>",
      "parameters": {
        "value1, value2, ...": "Zero or more numbers among which the lowest value will be selected and returned."
      },
      "returns": "<p>The smallest of the given numbers. If any one or more of the parameters cannot be converted into a number, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned. The result is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a> if no parameters are provided.</p>"
    },
    "math.pi": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/pi",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.PI</code></strong> property represents the ratio of the circumference of a circle to its diameter, approximately 3.14159:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.PI</mi></mstyle><mo>=</mo><mi>π</mi><mo>≈</mo><mn>3.14159</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.PI}} = \\pi \\approx 3.14159</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.PI</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.pow": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/pow",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.pow()</code></strong> function returns the <code><var>base</var></code> to the <code><var>exponent</var></code> power, that is, <code>base<sup>exponent</sup></code>.</p>",
      "parameters": {
        "base": "The base number.",
        "exponent": "The exponent used to raise the\n<code><var>base</var></code>\n."
      },
      "returns": "<p>A number representing the given base taken to the power of the given exponent.</p>"
    },
    "math.random": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/random",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.random()</code></strong> function returns a floating-point, pseudo-random number in the range 0 to less than 1 (inclusive of 0, but not 1) with approximately uniform distribution over that range — which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user.</p>\n<div class=\"note notecard\">\n<p><code>Math.random()</code> <em>does not</em> provide cryptographically secure random numbers. Do not use them for anything related to security. Use the Web Crypto API instead, and more precisely the <a href=\"$MDN_URL$/Web/API/Crypto/getRandomValues\"><code>window.crypto.getRandomValues()</code></a> method.</p>\n</div>",
      "returns": "<p>A floating-point, pseudo-random number between <code>0</code> (inclusive) and 1 (exclusive).</p>"
    },
    "math.round": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/round",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.round()</code></strong> function returns the value of a number rounded to the nearest integer.</p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The value of the given number rounded to the nearest integer.</p>"
    },
    "math.sign": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sign",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.sign()</code></strong> function returns either a <strong>positive</strong> or <strong>negative</strong> +/- 1, indicating the sign of a number passed into the argument. If the number passed into <code>Math.sign()</code> is 0, it will return a +/- 0. Note that if the number is positive, an explicit (+) will <strong>not</strong> be returned.</p>",
      "parameters": {
        "x": "A number. If this argument is not a\n<code>number</code>\n, it is implicitly converted to one."
      },
      "returns": "<p>A number representing the sign of the given argument:</p>\n\n<ul>\n <li>If the argument is positive, returns <code>1</code>.</li>\n <li>If the argument is negative, returns <code>-1</code>.</li>\n <li>If the argument is positive zero, returns <code>0</code>.</li>\n <li>If the argument is negative zero, returns <code>-0</code>.</li>\n <li>Otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned.</li>\n</ul>"
    },
    "math.sin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sin",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.sin()</code></strong> function returns the sine of a number.</p>",
      "parameters": {
        "x": "A number (given in radians)."
      },
      "returns": "<p>The sine of the given number.</p>"
    },
    "math.sinh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sinh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.sinh()</code></strong> function returns the hyperbolic sine of a number, that can be expressed using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math/E\">constant e</a>:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mo lspace=\"0em\" rspace=\"thinmathspace\">Math.sinh(x)</mo></mstyle><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>-</mo><msup><mi>e</mi><mrow><mo>-</mo><mi>x</mi></mrow></msup></mrow><mn>2</mn></mfrac></mrow><annotation encoding=\"TeX\">\\mathtt{\\operatorname{Math.sinh(x)}} = \\frac{e^x - e^{-x}}{2}</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The hyperbolic sine of the given number.</p>"
    },
    "math.sqrt": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sqrt",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.sqrt()</code></strong> function returns the square root of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo>∀</mo><mi>x</mi><mo>≥</mo><mn>0</mn><mo>,</mo><mstyle mathvariant=\"monospace\"><mrow><mi>M</mi><mi>a</mi><mi>t</mi><mi>h</mi><mo>.</mo><mi>s</mi><mi>q</mi><mi>r</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow></mstyle><mo>=</mo><msqrt><mi>x</mi></msqrt><mo>=</mo><mtext>the unique</mtext><mspace width=\"thickmathspace\"></mspace><mi>y</mi><mo>≥</mo><mn>0</mn><mspace width=\"thickmathspace\"></mspace><mtext>such that</mtext><mspace width=\"thickmathspace\"></mspace><msup><mi>y</mi><mn>2</mn></msup><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"TeX\">\\forall x \\geq 0, \\mathtt{Math.sqrt(x)} = \\sqrt{x} = \\text{the unique} \\; y \\geq 0 \\; \\text{such that} \\; y^2 = x</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The square root of the given number. If the number is negative, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned.</p>"
    },
    "math.sqrt2": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/sqrt2",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.SQRT2</code></strong> property represents the square root of 2, approximately 1.414:</p>\n<p><math display=\"block\"><semantics><mrow><mstyle mathvariant=\"monospace\"><mi>Math.SQRT2</mi></mstyle><mo>=</mo><msqrt><mn>2</mn></msqrt><mo>≈</mo><mn>1.414</mn></mrow><annotation encoding=\"TeX\">\\mathtt{\\mi{Math.SQRT2}} = \\sqrt{2} \\approx 1.414</annotation></semantics></math></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Math.SQRT2</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "math.tan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/tan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.tan()</code></strong> function returns the tangent of a number.</p>",
      "parameters": {
        "x": "A number representing an angle in radians."
      },
      "returns": "<p>The tangent of the given number.</p>"
    },
    "math.tanh": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/tanh",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.tanh()</code></strong> function returns the hyperbolic tangent of a number, that is</p>\n<p><math display=\"block\"><semantics><mrow><mo lspace=\"0em\" rspace=\"0em\">tanh</mo><mi>x</mi><mo>=</mo><mfrac><mrow><mo lspace=\"0em\" rspace=\"0em\">sinh</mo><mi>x</mi></mrow><mrow><mo lspace=\"0em\" rspace=\"0em\">cosh</mo><mi>x</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>-</mo><msup><mi>e</mi><mrow><mo>-</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>-</mo><mi>x</mi></mrow></msup></mrow></mfrac><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>x</mi></mrow></msup><mo>-</mo><mn>1</mn></mrow><mrow><msup><mi>e</mi><mrow><mn>2</mn><mi>x</mi></mrow></msup><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"TeX\">\\tanh x = \\frac{\\sinh x}{\\cosh x} = \\frac {e^x - e^{-x}} {e^x + e^{-x}} = \\frac{e^{2x} - 1}{e^{2x}+1}</annotation></semantics></math></p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The hyperbolic tangent of the given number.</p>"
    },
    "math.trunc": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/math/trunc",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Math.trunc()</code></strong> function returns the integer part of a number by removing any fractional digits.</p>",
      "parameters": {
        "x": "A number."
      },
      "returns": "<p>The integer part of the given number.</p>"
    },
    "nan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/nan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The global <code><strong>NaN</strong></code> property is a value representing Not-A-Number.</p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>NaN</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "null": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/null",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The value <code>null</code> represents the intentional absence of any object value. It is one of JavaScript's <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a> and is treated as <a href=\"$MDN_URL$/Glossary/Falsy\">falsy</a> for boolean operations.</p>"
    },
    "number": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number",
      "status": [
        "StandardTrack"
      ],
      "doc": "<div><strong><code>Number</code></strong> is a <a href=\"$MDN_URL$/Glossary/Primitive#Primitive_wrapper_objects_in_JavaScript\">primitive wrapper object</a> used to represent and manipulate numbers like <code>37</code> or <code>-9.25</code>.</div>\n<p>The <strong><code>Number</code></strong> constructor contains constants and methods for working with numbers. Values of other types can be converted to numbers using the<strong><code>Number()</code> function</strong>.</p>\n<p>The JavaScript <strong>Number</strong> type is a <a href=\"https://en.wikipedia.org/wiki/Floating-point_arithmetic\">double-precision 64-bit binary format IEEE 754</a> value, like <code>double</code> in Java or C#. This means it can represent fractional values, but there are some limits to what it can store. A Number only keeps about 17 decimal places of precision; arithmetic is subject to <a href=\"https://en.wikipedia.org/wiki/Floating-point_arithmetic#Representable_numbers,_conversion_and_rounding\">rounding</a>. The largest value a Number can hold is about 1.8×10<sup>308</sup>. Numbers beyond that are replaced with the special Number constant <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\"><code>Infinity</code></a>.</p>\n<p>A number literal like <code>37</code> in JavaScript code is a floating-point value, not an integer. There is no separate integer type in common everyday use. (JavaScript now has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> type, but it was not designed to replace Number for everyday uses. <code>37</code> is still a Number, not a BigInt.)</p>\n<p>Number may also be expressed in literal forms like <code>0b101</code>, <code>0o13</code>, <code>0x0A</code>. Learn more on numeric <a href=\"$MDN_URL$/Web/JavaScript/Reference/Lexical_grammar#Numeric_literals\">lexical grammar here</a>.</p>"
    },
    "number.epsilon": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/epsilon",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.EPSILON</code></strong> property represents the difference between 1 and the smallest floating point number greater than 1.</p>\n<p>You do not have to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object to access this static property (use <code>Number.EPSILON</code>).</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Number.EPSILON</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "number.isfinite": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isfinite",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Number.isFinite()</code></strong> method determines whether the passed value is a finite number — that is, it checks that a number is neither positive nor negative <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Infinity\">Infinity</a>, since JavaScript has both.</span></p>",
      "parameters": {
        "value": "The value to be tested for finiteness."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given value is a finite number.</p>"
    },
    "number.isinteger": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isinteger",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.isInteger()</code></strong> method determines whether the passed value is an integer.</p>",
      "parameters": {
        "value": "The value to be tested for being an integer."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given value is an integer.</p>"
    },
    "number.isnan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/isnan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.isNaN()</code></strong> method determines whether the passed value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> and its type is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>. It is a more robust version of the original, global <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/isNaN\"><code>isNaN()</code></a>.</p>",
      "parameters": {
        "value": "The value to be tested for\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>\n."
      },
      "returns": "<p><strong>true</strong> if the given value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> and its type is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>; otherwise, <strong>false</strong>.</p>"
    },
    "number.issafeinteger": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/issafeinteger",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.isSafeInteger()</code></strong> method determines whether the provided value is a number that is a <dfn>safe integer</dfn>.</p>\n<p>A safe integer is an integer that</p>\n<ul>\n<li>can be exactly represented as an IEEE-754 double precision number, and</li>\n<li>whose IEEE-754 representation cannot be the result of rounding any other integer to fit the IEEE-754 representation.</li>\n</ul>\n<p>For example, <code>2<sup>53</sup> - 1</code> is a safe integer: it can be exactly represented, and no other integer rounds to it under any IEEE-754 rounding mode. In contrast, <code>2<sup>53</sup></code> is <em>not</em> a safe integer: it can be exactly represented in IEEE-754, but the integer <code>2<sup>53</sup> + 1</code> can't be directly represented in IEEE-754 but instead rounds to <code>2<sup>53</sup></code> under round-to-nearest and round-to-zero rounding. The safe integers consist of all integers from <code>-(2<sup>53</sup> - 1)</code> inclusive to <code>2<sup>53</sup> - 1</code> inclusive (± <code>9007199254740991</code> or ± 9,007,199,254,740,991).</p>\n<p>Handling values larger or smaller than ~9 quadrillion with full precision requires using an <a href=\"https://en.wikipedia.org/wiki/Arbitrary-precision_arithmetic\">arbitrary precision arithmetic library</a>. See <a href=\"http://floating-point-gui.de/\">What Every Programmer Needs to Know about Floating Point Arithmetic</a> for more information on floating point representations of numbers.</p>\n<p>For larger integers, consider using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/BigInt\"><code>BigInt</code></a> type.</p>",
      "parameters": {
        "testValue": "The value to be tested for being a safe integer."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given value is a number that is a safe integer.</p>"
    },
    "number.nan": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/nan",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.NaN</code></strong> property represents Not-A-Number. Equivalent of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.</p>\n<p>You do not have to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object to access this static property (use <code>Number.NaN</code>).</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Number.NaN</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "number.number": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/number",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number()</code> constructor</strong> creates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object.</p>",
      "parameters": {
        "value": "The numeric value of the object being created."
      }
    },
    "number.parsefloat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/parsefloat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Number.parseFloat()</code></strong> method parses an argument and returns a floating point number. If a number cannot be parsed from the argument, it returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.</span></p>",
      "parameters": {
        "string": "The value to parse. If this argument is not a string, then it is converted to one using the\n<code><a href=\"https://tc39.es/ecma262/#sec-tostring\">ToString</a></code>\nabstract operation. Leading\n<a href=\"$MDN_URL$/Glossary/whitespace\">whitespace</a>\nin this argument is ignored."
      },
      "returns": "<p>A floating point number parsed from the given <code><var>string</var></code>.</p>\n\n<p>Or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> when the first non-whitespace character cannot be converted to a number.</p>"
    },
    "number.parseint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/parseint",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Number.parseInt()</code></strong> method parses a string argument and returns an integer of the specified radix or base.</p>",
      "returns": "<p>An integer parsed from the given <code><var>string</var></code>.</p>\n\n<p>If the <code><var>radix</var></code> is smaller than <code>2</code> or bigger than <code>36</code>, and the first non-whitespace character cannot be converted to a number, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> is returned.</p>"
    },
    "number.toexponential": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/toexponential",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toExponential()</code></strong> method returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object in exponential notation.</p>",
      "parameters": {
        "fractionDigits": "Optional. An integer specifying the number of digits after the decimal point. Defaults to as many digits as necessary to specify the number."
      },
      "returns": "<p>A string representing the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object in exponential notation with one digit before the decimal point, rounded to <code><var>fractionDigits</var></code> digits after the decimal point.</p>",
      "throws": {
        "RangeError": "If\n<code><var>fractionDigits</var></code>\nis too small or too large. Values between\n<code>0</code>\nand\n<code>20</code>\n, inclusive, will not cause a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a>\n. Implementations are allowed to support larger and smaller values as well.",
        "TypeError": "If this method is invoked on an object that is not a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>\n."
      }
    },
    "number.tofixed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tofixed",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toFixed()</code></strong> method formats a number using fixed-point notation.</p>",
      "parameters": {
        "digits": "The number of digits to appear after the decimal point; this may be a value between\n<code>0</code>\nand\n<code>20</code>\n, inclusive, and implementations may optionally support a larger range of values. If this argument is omitted, it is treated as\n<code>0</code>\n."
      },
      "returns": "<p>A string representing the given number using fixed-point notation.</p>",
      "throws": {
        "RangeError": "If\n<code><var>digits</var></code>\nis too small or too large. Values between\n<code>0</code>\nand\n<code>100</code>\n, inclusive, will not cause a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a>\n. Implementations are allowed to support larger and smaller values as chosen.",
        "TypeError": "If this method is invoked on an object that is not a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a>\n."
      }
    },
    "number.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleString()</code></strong> method returns a string with a language-sensitive representation of this number.</p>",
      "returns": "<p>A string with a language-sensitive representation of the given number.</p>"
    },
    "number.toprecision": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/toprecision",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toPrecision()</code></strong> method returns a string representing the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object to the specified precision.</p>",
      "parameters": {
        "precision": "An integer specifying the number of significant digits."
      },
      "returns": "<p>A string representing a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object in fixed-point or exponential notation rounded to <code>precision</code> significant digits. See the discussion of rounding in the description of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toFixed\"><code>Number.prototype.toFixed()</code></a> method, which also applies to <code>toPrecision()</code>.</p>\n\n<p>If the <code>precision</code> argument is omitted, behaves as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toString\"><code>Number.prototype.toString()</code></a>. If the <code>precision</code> argument is a non-integer value, it is rounded to the nearest integer.</p>",
      "throws": {
        "RangeError": "If\n<code>precision</code>\nis not between\n<code>1</code>\nand\n<code>100</code>\n(inclusive), a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a>\nis thrown. Implementations are allowed to support larger and smaller values as well. ECMA-262 only requires a precision of up to 21 significant digits."
      }
    },
    "number.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>",
      "returns": "<p>A string representing the source code of the object.</p>"
    },
    "number.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object.</p>",
      "parameters": {
        "radix": "An integer in the range\n<code>2</code>\nthrough\n<code>36</code>\nspecifying the base to use for representing numeric values."
      },
      "returns": "<p>A string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object.</p>",
      "throws": {
        "RangeError": "If\n<code>toString()</code>\nis given a\n<code><var>radix</var></code>\nless than\n<code>2</code>\nor greater than\n<code>36</code>\n, a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RangeError\"><code>RangeError</code></a>\nis thrown."
      }
    },
    "number.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/number/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the wrapped primitive value of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object.</p>",
      "returns": "<p>A number representing the primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number</code></a> object.</p>"
    },
    "object": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object</strong></code> class represents one of <a href=\"$MDN_URL$/Web/JavaScript/Data_structures\">JavaScript's data types</a>. It is used to store various keyed collections and more complex entities. Objects can be created using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/Object\"><code>Object()</code></a> constructor or the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer / literal syntax</a>.</p>"
    },
    "object.assign": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/assign",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Object.assign()</code></strong> method copies all <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable\">enumerable</a> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\">own properties</a> from one or more <em>source objects</em> to a <em>target object</em>. It returns the target object.</span></p>",
      "parameters": {
        "target": "The target object — what to apply the sources’ properties to, which is returned after it is modified.",
        "sources": "The source object(s) — objects containing the properties you want to apply."
      },
      "returns": "<p>The target object.</p>"
    },
    "object.constructor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/constructor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>constructor</code></strong> property returns a reference to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\"><code>Object</code></a> constructor function that created the instance object. Note that the value of this property is a reference to <em>the function itself</em>, not a string containing the function's name.</p>\n<p>The value is only read-only for primitive values such as <code>1</code>, <code>true</code>, and <code>\"test\"</code>.</p>"
    },
    "object.create": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/create",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.create()</strong></code> method creates a new object, using an existing object as the prototype of the newly created object.</p>",
      "parameters": {
        "proto": "The object which should be the prototype of the newly-created object.",
        "propertiesObject": "If specified and not\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>\n, an object whose enumerable own properties (that is, those properties defined upon itself and\n<em>not</em>\nenumerable properties along its prototype chain) specify property descriptors to be added to the newly-created object, with the corresponding property names. These properties correspond to the second argument of\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperties\"><code>Object.defineProperties()</code></a>\n."
      },
      "returns": "<p>A new object with the specified prototype object and properties.</p>"
    },
    "object.defineproperties": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/defineproperties",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.defineProperties()</code></strong> method defines new or modifies existing properties directly on an object, returning the object.</p>",
      "parameters": {
        "obj": "The object on which to define or modify properties.",
        "props": "An object whose keys represent the names of properties to be defined or modified and whose values are objects describing those properties. Each value in\n<code>props</code>\nmust be either a data descriptor or an accessor descriptor; it cannot be both (see\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a>\nfor more details).Data descriptors and accessor descriptors may optionally contain the following keys:<dl>\n<dt><code>configurable</code></dt>\n<dd><code>true</code> if and only if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.<br>\n<strong>Defaults to <code>false</code>.</strong></dd>\n<dt><code>enumerable</code></dt>\n<dd><code>true</code> if and only if this property shows up during enumeration of the properties on the corresponding object.<br>\n<strong>Defaults to <code>false</code>.</strong></dd>\n</dl>\nA data descriptor also has the following optional keys:<br>\n<dl>\n<dt><code>value</code></dt>\n<dd>The value associated with the property. Can be any valid JavaScript value (number, object, function, etc).<br>\n<strong>Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</strong></dd>\n<dt><code>writable</code></dt>\n<dd><code>true</code> if and only if the value associated with the property may be changed with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators#assignment_operators\" >assignment operator</a>.<br>\n<strong>Defaults to <code>false</code>.</strong></dd>\n</dl>\nAn accessor descriptor also has the following optional keys:<br>\n<dl>\n<dt><code>get</code></dt>\n<dd>A function which serves as a getter for the property, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if there is no getter. The function's return value will be used as the value of the property.<br>\n<strong>Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</strong></dd>\n<dt><code>set</code></dt>\n<dd>A function which serves as a setter for the property, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if there is no setter. The function will receive as its only argument the new value being assigned to the property.<br>\n<strong>Defaults to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</strong></dd>\n</dl>\nIf a descriptor has neither of <code>value</code>, <code>writable</code>, <code>get</code> and <code>set</code> keys, it is treated as a data descriptor. If a descriptor has both <code>value</code> or <code>writable</code> and <code>get</code> or <code>set</code> keys, an exception is thrown.<br>"
      },
      "returns": "<p>The object that was passed to the function.</p>"
    },
    "object.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static method <code><strong>Object.defineProperty()</strong></code> defines a new property directly on an object, or modifies an existing property on an object, and returns the object.</p>",
      "parameters": {
        "obj": "The object on which to define the property.",
        "prop": "The name or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>\nof the property to be defined or modified.",
        "descriptor": "The descriptor for the property being defined or modified."
      },
      "returns": "<p>The object that was passed to the function.</p>"
    },
    "object.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/entries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.entries()</strong></code> method returns an array of a given object's own enumerable string-keyed property <code>[<var>key</var>, <var>value</var>]</code> pairs, in the same order as that provided by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...in\"><code>for...in</code></a> loop. (The only important difference is that a <code>for...in</code> loop enumerates properties in the prototype chain as well). </p>\n<p>The order of the array returned by <code><strong>Object.entries()</strong></code> does not depend on how an object is defined. If there is a need for certain ordering, then the array should be sorted first, like <code>Object.entries(obj).sort((a, b) =&gt; b[0].localeCompare(a[0]));</code>.</p>",
      "parameters": {
        "obj": "The object whose own enumerable string-keyed property\n<code>[<var>key</var>, <var>value</var>]</code>\npairs are to be returned."
      },
      "returns": "<p>An array of the given object's own enumerable string-keyed property <code>[<var>key</var>, <var>value</var>]</code> pairs.</p>"
    },
    "object.freeze": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/freeze",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.freeze()</strong></code> method <strong>freezes</strong> an object. A frozen object can no longer be changed; freezing an object prevents new properties from being added to it, existing properties from being removed, prevents changing the enumerability, configurability, or writability of existing properties, and prevents the values of existing properties from being changed. In addition, freezing an object also prevents its prototype from being changed. <code>freeze()</code> returns the same object that was passed in.</p>",
      "parameters": {
        "obj": "The object to freeze."
      },
      "returns": "<p>The object that was passed to the function.</p>"
    },
    "object.fromentries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/fromentries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.fromEntries()</strong></code> method transforms a list of key-value pairs into an object.</p>",
      "parameters": {
        "iterable": "An iterable such as\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>\nor\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a>\nor other objects implementing the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\">iterable protocol</a>\n."
      },
      "returns": "<p>A new object whose properties are given by the entries of the iterable.</p>"
    },
    "object.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.getOwnPropertyDescriptor()</code></strong> method returns an object describing the configuration of a specific property on a given object (that is, one directly present on an object and not in the object's prototype chain). The object returned is mutable but mutating it has no effect on the original property's configuration.</p>",
      "parameters": {
        "obj": "The object in which to look for the property.",
        "prop": "The name or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>\nof the property whose description is to be retrieved."
      },
      "returns": "<p>A property descriptor of the given property if it exists on the object, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> otherwise.</p>"
    },
    "object.getownpropertydescriptors": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertydescriptors",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.getOwnPropertyDescriptors()</strong></code> method returns all own property descriptors of a given object.</p>",
      "parameters": {
        "obj": "The object for which to get all own property descriptors."
      },
      "returns": "<p>An object containing all own property descriptors of an object. Might be an empty object, if there are no properties.</p>"
    },
    "object.getownpropertynames": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertynames",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.getOwnPropertyNames()</code></strong> method returns an array of all properties (including non-enumerable properties except for those which use Symbol) found directly in a given object.</p>",
      "parameters": {
        "obj": "The object whose enumerable and non-enumerable properties are to be returned."
      },
      "returns": "<p>An array of strings that corresponds to the properties found directly in the given object.</p>"
    },
    "object.getownpropertysymbols": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getownpropertysymbols",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.getOwnPropertySymbols()</code></strong> method returns an array of all symbol properties found directly upon a given object.</p>",
      "parameters": {
        "obj": "The object whose symbol properties are to be returned."
      },
      "returns": "<p>An array of all symbol properties found directly upon the given object.</p>"
    },
    "object.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.getPrototypeOf()</code></strong> method returns the prototype (i.e. the value of the internal <code>[[Prototype]]</code> property) of the specified object.</p>",
      "parameters": {
        "obj": "The object whose prototype is to be returned."
      },
      "returns": "<p>The prototype of the given object. If there are no inherited properties, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a> is returned.</p>"
    },
    "object.hasownproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/hasownproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>hasOwnProperty()</code></strong> method returns a boolean indicating whether the object has the specified property as its own property (as opposed to inheriting it).</p>",
      "parameters": {
        "prop": "The\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nname or\n<a href=\"$MDN_URL$/Glossary/Symbol\">Symbol</a>\nof the property to test."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the object has the specified property as own property.</p>"
    },
    "object.is": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/is",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.is()</code></strong> method determines whether two values are <a href=\"$MDN_URL$/Web/JavaScript/Equality_comparisons_and_sameness\">the same value</a>.</p>",
      "parameters": {
        "value1": "The first value to compare.",
        "value2": "The second value to compare."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the two arguments are the same value.</p>"
    },
    "object.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isextensible",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.isExtensible()</code></strong> method determines if an object is extensible (whether it can have new properties added to it).</p>",
      "parameters": {
        "obj": "The object which should be checked."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given object is extensible.</p>"
    },
    "object.isfrozen": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isfrozen",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.isFrozen()</code></strong> determines if an object is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/freeze\">frozen</a>.</p>",
      "parameters": {
        "obj": "The object which should be checked."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given object is frozen.</p>"
    },
    "object.isprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/isprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>isPrototypeOf()</strong></code> method checks if an object exists in another object's prototype chain.</p>\n<div class=\"note notecard\">\n<p><code>isPrototypeOf()</code> differs from the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> operator. In the expression \"<code>object instanceof AFunction</code>\", the <code>object</code> prototype chain is checked against <code>AFunction.prototype</code>, not against <code>AFunction</code> itself.</p>\n</div>",
      "parameters": {
        "object": "The object whose prototype chain will be searched."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether the calling object lies in the prototype chain of the specified object.</p>"
    },
    "object.issealed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/issealed",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.isSealed()</code></strong> method determines if an object is sealed.</p>",
      "parameters": {
        "obj": "The object which should be checked."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the given object is sealed.</p>"
    },
    "object.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/keys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>Object.keys()</strong></code> method returns an array of a given object's own enumerable property <strong>names</strong>, iterated in the same order that a normal loop would.</span></p>",
      "parameters": {
        "obj": "The object of which the enumerable's own properties are to be returned."
      },
      "returns": "<p>An array of strings that represent all the enumerable properties of the given object.</p>"
    },
    "object.object": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/object",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object</code> constructor</strong> creates an object wrapper for the given value.</p>\n<ul>\n<li>If the value is <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, it will create and return an empty object.</li>\n<li>Otherwise, it will return an object of a Type that corresponds to the given value.</li>\n<li>If the value is an object already, it will return the value.</li>\n</ul>\n<p>When called in a non-constructor context, <code>Object</code> behaves identically to <code>new Object()</code>.</p>",
      "parameters": {
        "value": "Any value."
      }
    },
    "object.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Object.preventExtensions()</code></strong> method prevents new properties from ever being added to an object (i.e. prevents future extensions to the object).</p>",
      "parameters": {
        "obj": "The object which should be made non-extensible."
      },
      "returns": "<p>The object being made non-extensible.</p>"
    },
    "object.propertyisenumerable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/propertyisenumerable",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>propertyIsEnumerable()</strong></code> method returns a Boolean indicating whether the specified property is enumerable and is the object's own property.</p>",
      "parameters": {
        "prop": "The name of the property to test."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether the specified property is enumerable and is the object's own property.</p>"
    },
    "object.proto": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/proto",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div><div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div>\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong> Changing the <code>[[Prototype]]</code> of an object is, by the nature of how modern JavaScript engines optimize property accesses, a very slow operation, in <strong><em>every</em></strong> browser and JavaScript engine. The effects on the performance of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in <code>obj.__proto__ = ...</code> statements, but may extend to <strong><em>any</em></strong> code that has access to <strong><em>any</em></strong> object whose <code>[[Prototype]]</code> has been altered. If you care about performance you should avoid setting the <code>[[Prototype]]</code> of an object. Instead, create a new object with the desired <code>[[Prototype]]</code> using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>.</p>\n</div>\n<div class=\"notecard warning\">\n<p><strong>Warning:</strong> While <code>Object.prototype.__proto__</code> is supported today in most browsers, its existence and exact behavior has only been standardized in the ECMAScript 2015 specification as a legacy feature to ensure compatibility for web browsers. For better support, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a> instead.</p>\n</div>\n</div>\n<p>The <code>__proto__</code> property of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object\" ><code>Object.prototype</code></a> is an accessor property (a getter function and a setter function) that exposes the internal <code>[[Prototype]]</code> (either an object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>) of the object through which it is accessed.</p>\n<p>The use of <code>__proto__</code> is controversial and discouraged. It was never originally included in the ECMAScript language spec, but modern browsers implemented it anyway. Only recently was the <code>__proto__</code> property standardized by the ECMAScript 2015 specification for compatibility with web browsers, so it will be supported into the future. It is deprecated in favor of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf</code></a>/<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/getPrototypeOf\"><code>Reflect.getPrototypeOf</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf</code></a>/<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/setPrototypeOf\"><code>Reflect.setPrototypeOf</code></a> (though still, setting the <code>[[Prototype]]</code> of an object is a slow operation that should be avoided if performance is a concern).</p>\n<p>The <code>__proto__</code> property can also be used in an object literal definition to set the object <code>[[Prototype]]</code> on creation, as an alternative to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>. See: <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/Object_initializer\">object initializer / literal syntax</a>.</p>"
    },
    "object.seal": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/seal",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.seal()</strong></code> method seals an object, preventing new properties from being added to it and marking all existing properties as non-configurable. Values of present properties can still be changed as long as they are writable.</p>",
      "parameters": {
        "obj": "The object which should be sealed."
      },
      "returns": "<p>The object being sealed.</p>"
    },
    "object.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Object.setPrototypeOf()</strong></code> method sets the prototype (i.e., the internal <code>[[Prototype]]</code> property) of a specified object to another object or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>.</p>\n<div class=\"warning notecard\">\n<p><strong>Warning:</strong> Changing the <code>[[Prototype]]</code> of an object is, by the nature of <a href=\"https://mathiasbynens.be/notes/prototypes\">how modern JavaScript engines optimize property accesses</a>, currently a very slow operation in every browser and JavaScript engine. In addition, the effects of altering inheritance are subtle and far-flung, and are not limited to simply the time spent in the <code>Object.setPrototypeOf(...)</code> statement, but may extend to <strong><em>any</em></strong> code that has access to any object whose <code>[[Prototype]]</code> has been altered.</p>\n<p>Because this feature is a part of the language, it is still the burden on engine developers to implement that feature performantly (ideally). Until engine developers address this issue, if you are concerned about performance, you should avoid setting the <code>[[Prototype]]</code> of an object. Instead, create a new object with the desired <code>[[Prototype]]</code> using <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/create\"><code>Object.create()</code></a>.</p>\n</div>",
      "parameters": {
        "obj": "The object which is to have its prototype set.",
        "prototype": "The object's new prototype (an object or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>\n)."
      },
      "returns": "<p>The specified object.</p>"
    },
    "object.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toLocaleString()</strong></code> method returns a string representing the object. This method is meant to be overridden by derived objects for locale-specific purposes.</p>",
      "returns": "<p>A string representing the object.</p>"
    },
    "object.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/tosource",
      "status": [
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>",
      "returns": "<p>A string representing the source code of the object.</p>"
    },
    "object.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>toString()</strong></code> method returns a string representing the object.</p>",
      "returns": "<p>A string representing the object.</p>"
    },
    "object.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the primitive value of the specified object.</p>",
      "returns": "<p>The primitive value of the specified object.</p>\n\n<div class=\"notecard note\">\n<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators#Unary_plus\" data-flaw=\"link1\">(unary) plus sign</a> can sometimes be used as a shorthand for <code>valueOf</code>, e.g. in <code>+new Number()</code>. Also see <a href=\"#Using_unary_plus\">Using unary plus</a>.</p>\n</div>"
    },
    "object.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/object/values",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>Object.values()</strong></code> method returns an array of a given object's own enumerable property values, in the same order as that provided by a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...in\"><code>for...in</code></a> loop. (The only difference is that a <code>for...in</code> loop enumerates properties in the prototype chain as well.)</span></p>",
      "parameters": {
        "obj": "The object whose enumerable own property values are to be returned."
      },
      "returns": "<p>An array containing the given object's own enumerable property values.</p>"
    },
    "parsefloat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/parsefloat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>parseFloat()</strong></code> function parses an argument (converting it to a string first if needed) and returns a floating point number.</span></p>",
      "parameters": {
        "string": "The value to parse. If this argument is not a string, then it is converted to one using the\n<code><a href=\"https://tc39.es/ecma262/#sec-tostring\">ToString</a></code>\nabstract operation. Leading\n<a href=\"$MDN_URL$/Glossary/whitespace\">whitespace</a>\nin this argument is ignored."
      },
      "returns": "<p>A floating point number parsed from the given <code><var>string</var></code>.</p>\n\n<p>Or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> when the first non-whitespace character cannot be converted to a number.</p>"
    },
    "parseint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/parseint",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>parseInt()</strong></code> function parses a string argument and returns an integer of the specified <a href=\"https://en.wikipedia.org/wiki/Radix\">radix</a> (the base in mathematical numeral systems).</p>",
      "parameters": {
        "string": "The value to parse. If this argument is not a string, then it is converted to one using the\n<code><a href=\"https://tc39.es/ecma262/#sec-tostring\">ToString</a></code>\nabstract operation. Leading\n<a href=\"$MDN_URL$/Glossary/whitespace\">whitespace</a>\nin this argument is ignored.",
        "radix": "An integer between\n<code>2</code>\nand\n<code>36</code>\nthat represents the\n<em>radix</em>\n(the base in mathematical numeral systems) of the\n<code><var>string</var></code>\n. Be careful—this does\n<strong><em>not</em></strong>\ndefault to\n<code>10</code>\n! If the radix value is not of the\n<code>Number</code>\ntype it will be coerced to a\n<code>Number</code>The\n<a href=\"#Description\">description below</a>\nexplains in more detail what happens when\n<code><var>radix</var></code>\nis not provided."
      },
      "returns": "<p>An integer parsed from the given <code><var>string</var></code>.</p>\n\n<p>Or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> when</p>\n\n<ul>\n <li>the <code><var>radix</var></code> is smaller than <code>2</code> or bigger than <code>36</code>, or</li>\n <li>the first non-whitespace character cannot be converted to a number.</li>\n</ul>"
    },
    "promise": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Promise</code></strong> object represents the eventual completion (or failure) of an asynchronous operation and its resulting value.</p>\n<div class=\"notecard note\"><h4 id=\"Note\">Note:</h4>This feature is available in <a href=\"$MDN_URL$/Web/API/Web_Workers_API\">Web Workers</a>.</div>\n<p>To learn about the way promises work and how you can use them, we advise you to read <a href=\"$MDN_URL$/Web/JavaScript/Guide/Using_promises\">Using promises</a> first.</p>"
    },
    "promise.all": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/all",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Promise.all()</code></strong> method takes an iterable of promises as an input, and returns a single <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that resolves to an array of the results of the input promises. This returned promise will resolve when all of the input's promises have resolved, or if the input iterable contains no promises. It rejects immediately upon any of the input promises rejecting or non-promises throwing an error, and will reject with this first rejection message / error.</p>",
      "parameters": {
        "iterable": "An\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\">iterable</a>\nobject such as an\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>\n."
      },
      "returns": "<ul>\n <li>An <strong>already resolved</strong> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> if the <var>iterable</var> passed is empty.</li>\n <li>An <strong>asynchronously resolved</strong> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> if the <var>iterable</var> passed contains no promises. Note, Google Chrome 58 returns an <strong>already resolved</strong> promise in this case.</li>\n <li>A <strong>pending</strong> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> in all other cases. This returned promise is then resolved/rejected <strong>asynchronously</strong> (as soon as the stack is empty) when all the promises in the given <var>iterable</var> have resolved, or if any of the promises reject. See the example about \"Asynchronicity or synchronicity of Promise.all\" below. Returned values will be in order of the Promises passed, regardless of completion order.</li>\n</ul>"
    },
    "promise.allsettled": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/allsettled",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Promise.allSettled()</strong></code> method returns a promise that resolves after all of the given promises have either fulfilled or rejected, with an array of objects that each describes the outcome of each promise.</p>\n<p>It is typically used when you have multiple asynchronous tasks that are not dependent on one another to complete successfully, or you'd always like to know the result of each promise.</p>\n<p>In comparison, the Promise returned by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code>Promise.all()</code></a> may be more appropriate if the tasks are dependent on each other / if you'd like to immediately reject upon any of them rejecting.</p>",
      "parameters": {
        "iterable": "An\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols\" data-flaw=\"link1\">iterable</a>\nobject, such as an\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>\n, in which each member is a\n<code>Promise</code>\n."
      },
      "returns": "<p>A <strong>pending</strong> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that will be <strong>asynchronously</strong> fulfilled once every promise in the specified collection of promises has completed, either by successfully being fulfilled or by being rejected. At that time, the returned promise's handler is passed as input an array containing the outcome of each promise in the original set of promises.</p>\n\n<p>However, <strong>if and only if</strong> an empty iterable is passed as an argument, <code>Promise.allSettled()</code> returns a <code>Promise</code> object that has <strong>already been resolved</strong> as an empty array.</p>\n\n<p>For each outcome object, a <code>status</code> string is present. If the status is <code>fulfilled</code>, then a <code>value</code> is present. If the status is <code>rejected</code>, then a <code>reason</code> is present. The value (or reason) reflects what value each promise was fulfilled (or rejected) with.</p>"
    },
    "promise.any": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/any",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><code>Promise.any()</code> takes an iterable of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> objects and, as soon as one of the promises in the iterable fulfills, returns a single promise that resolves with the value from that promise. If no promises in the iterable fulfill (if all of the given promises are rejected), then the returned promise is rejected with an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/AggregateError\"><code>AggregateError</code></a>, a new subclass of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\"><code>Error</code></a> that groups together individual errors. Essentially, this method is the opposite of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code>Promise.all()</code></a>.</p>",
      "parameters": {
        "iterable": "An\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\">iterable</a>\nobject, such as an\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>\n."
      },
      "returns": "<ul>\n <li>An <strong>already rejected</strong> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> if the <var>iterable</var> passed is empty.</li>\n <li>An <strong>asynchronously resolved</strong> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> if the <var>iterable</var> passed contains no promises.</li>\n <li>A <strong>pending</strong> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> in all other cases. This returned promise is then resolved/rejected <strong>asynchronously</strong> (as soon as the stack is empty) when any of the promises in the given <var>iterable</var> resolve, or if all the promises have rejected.</li>\n</ul>"
    },
    "promise.catch": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/catch",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>catch()</strong></code> method returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> and deals with rejected cases only. It behaves the same as calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>Promise.prototype.then(undefined, onRejected)</code></a> (in fact, calling <code>obj.catch(onRejected)</code> internally calls <code>obj.then(undefined, onRejected)</code>). This means that you have to provide an <code>onRejected</code> function even if you want to fall back to an <code>undefined</code> result value - for example <code>obj.catch(() =&gt; {})</code>.</p>",
      "parameters": {
        "onRejected": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>\ncalled when the\n<code>Promise</code>\nis rejected. This function has one argument:\n<dl>\n<dt><code><var>reason</var></code></dt>\n<dd>The rejection reason.</dd>\n</dl>\nThe Promise returned by\n<code>catch()</code>\nis rejected if\n<code><var>onRejected</var></code>\nthrows an error or returns a Promise which is itself rejected; otherwise, it is resolved."
      },
      "returns": "<p>Internally calls <code>Promise.prototype.then</code> on the object upon which it was called, passing the parameters <code>undefined</code> and the received <code><var>onRejected</var></code> handler. Returns the value of that call, which is a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>.</p>\n\n<div class=\"warning notecard\">\n<p>Note the examples below are throwing instances of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Error\">Error</a>. This is considered good practice in contrast to throwing Strings; otherwise, the part doing the catching would have to perform checks to see if the argument was a string or an error, and you might lose valuable information like stack traces.</p>\n</div>\n\n<p><strong>Demonstration of the internal call:</strong></p>\n\n<pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// overriding original Promise.prototype.then/catch just to add some logs</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Promise</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> originalThen <span class=\"token operator\">=</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>then<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> originalCatch <span class=\"token operator\">=</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>catch<span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">then</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&gt; &gt; &gt; &gt; &gt; &gt; called .then on %o with arguments: %o'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">originalThen</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">catch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&gt; &gt; &gt; &gt; &gt; &gt; called .catch on %o with arguments: %o'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">originalCatch</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Promise<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n\n<span class=\"token comment\">// calling catch on an already resolved promise</span>\nPromise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token constant\">XXX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// logs:</span>\n<span class=\"token comment\">// &gt; &gt; &gt; &gt; &gt; &gt; called .catch on Promise{} with arguments: Arguments{1} [0: function XXX()]</span>\n<span class=\"token comment\">// &gt; &gt; &gt; &gt; &gt; &gt; called .then on Promise{} with arguments: Arguments{2} [0: undefined, 1: function XXX()]</span>\n</code></pre>"
    },
    "promise.finally": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/finally",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>finally()</code></strong> method returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. When the promise is settled, i.e either fulfilled or rejected, the specified callback function is executed. This provides a way for code to be run whether the promise was fulfilled successfully or rejected once the <code>Promise</code> has been dealt with.</p>\n<p>This helps to avoid duplicating code in both the promise's <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>then()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/catch\"><code>catch()</code></a> handlers.</p>",
      "parameters": {
        "onFinally": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>\ncalled when the\n<code>Promise</code>\nis settled."
      },
      "returns": "<p>Returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> whose <code>finally</code> handler is set to the specified function, <code>onFinally</code>.</p>"
    },
    "promise.promise": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/promise",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Promise</code></strong> constructor is primarily used to wrap functions that do not already support promises.</p>",
      "parameters": {
        "executor": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>function</code></a>\nto be executed by the constructor, during the process of constructing the new\n<code>Promise</code>\nobject. The\n<code><var>executor</var></code>\nis custom code that ties an outcome to a promise. You, the programmer, write the\n<code><var>executor</var></code>\n. The signature of this function is expected to be:",
        "function(resolutionFunc, rejectionFunc){\n    // typically, some asynchronous operation.\n}": "At the time when the constructor generates the new\n<code>Promise</code>\nobject, it also generates a corresponding pair of functions for\n<code><var>resolutionFunc</var></code>\nand\n<code><var>rejectionFunc</var></code>\n; these are \"tethered\" to the\n<code>Promise</code>\nobject. Therefore, the code within the\n<code><var>executor</var></code>\nhas the opportunity to perform some operation and then reflect the operation's outcome (If the value is not another Promise object) as either \"fulfilled\" or \"rejected\" by terminating with an invocation of either the\n<code><var>resolutionFunc</var></code>\nor the\n<code><var>rejectionFunc</var></code>\n, respectively.The\n<code><var>executor</var></code>\nhas no meaningful return value. It communicates via the side-effect caused by\n<code><var>resolutionFunc</var></code>\nor\n<code><var>rejectionFunc</var></code>\n. The side-effect is that the\n<code>Promise</code>\nobject becomes \"resolved.\"Typically, it works like this: The operation within\n<code><var>executor</var></code>\nis asynchronous and provides a callback. The callback is defined within the\n<code><var>executor</var></code>\ncode. The callback terminates by invoking\n<code><var>resolutionFunc</var></code>\n. The invocation of\n<code><var>resolutionFunc</var></code>\nincludes a\n<code>value</code>\nparameter. The\n<code>value</code>\nis passed back to the tethered\n<code>Promise</code>\nobject. The\n<code>Promise</code>\nobject (asynchronously) invokes any\n<code>.then()</code>\nassociated with it. The\n<code>value</code>\nreceived by\n<code>.then()</code>\nis passed to the invocation of\n<code>handleFulfilled</code>\nas an input parameter (See \"Chained Promises\" section).The\n<code><var>executor</var></code>\nmight also include a\n<code>try{} catch()</code>\nblock that invokes\n<code><var>rejectionFunc</var></code>\nupon error.The signatures of these two functions are simple, they accept a single parameter of any type. Of course, the actual names of these functions can be whatever is desired, i.e. they are named as the parameters of\n<code><var>executor</var></code>\n. Each function is used by simply calling it when appropriate.<pre class=\"brush: js notranslate\"><code>resolutionFunc(value) // call on fulfilled\nrejectionFunc(reason) // call on rejected</code></pre>\nThe returned <code>value</code> can be another promise object, in which case the promise gets dynamically inserted into the chain.<br>"
      },
      "returns": "<p>When called via <code>new</code>, the <code>Promise</code> constructor returns a promise object. The promise object will become \"resolved\" when either of the functions <code><var>resolutionFunc</var></code> or <code><var>rejectionFunc</var></code> are invoked. Note that if you call <code><var>resolutionFunc</var></code> or <code><var>rejectionFunc</var></code> and pass another Promise object as an argument, you can say that it is \"resolved\", but still cannot be said to be \"settled\".</p>"
    },
    "promise.race": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/race",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Promise.race()</strong></code> method returns a promise that fulfills or rejects as soon as one of the promises in an iterable fulfills or rejects, with the value or reason from that promise.</p>",
      "parameters": {
        "iterable": "An iterable object, such as an\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>\n. See\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Iteration_protocols#The_iterable_protocol\">iterable</a>\n."
      },
      "returns": "<p>A <strong>pending</strong> <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that <strong>asynchronously</strong> yields the value of the first promise in the given iterable to fulfill or reject.</p>"
    },
    "promise.reject": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/reject",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Promise.reject()</code></strong> method returns a <code>Promise</code> object that is rejected with a given reason.</p>",
      "parameters": {
        "reason": "Reason why this\n<code>Promise</code>\nrejected."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is rejected with the given reason.</p>"
    },
    "promise.resolve": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/resolve",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Promise.resolve()</code></strong> method returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> object that is resolved with a given value. If the value is a promise, that promise is returned; if the value is a thenable (i.e. has a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise/then\"><code>\"then\" method</code></a>), the returned promise will \"follow\" that thenable, adopting its eventual state; otherwise the returned promise will be fulfilled with the value. This function flattens nested layers of promise-like objects (e.g. a promise that resolves to a promise that resolves to something) into a single layer.</p>",
      "parameters": {
        "value": "Argument to be resolved by this\n<code>Promise</code>\n. Can also be a\n<code>Promise</code>\nor a thenable to resolve."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> that is resolved with the given value, or the promise passed as value, if the value was a promise object.</p>"
    },
    "promise.then": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/promise/then",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>then()</strong></code> method returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a>. It takes up to two arguments: callback functions for the success and failure cases of the <code>Promise</code>.</p>\n<div class=\"note notecard\">\n<p>If one or both arguments are omitted or are provided non-functions, then <code>then</code> will be missing the handler(s), but will not generate any errors. If the <code>Promise</code> that <code>then</code> is called on adopts a state (<code>fulfillment</code> or <code>rejection</code>) for which <code>then</code> has no handler, the returned promise simply adopts the final state of the original <code>Promise</code> on which <code>then</code> was called.</p>\n</div>",
      "parameters": {
        "onFulfilled": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>\ncalled if the\n<code>Promise</code>\nis fulfilled. This function has one argument, the\n<code>fulfillment value</code>\n. If it is not a function, it is internally replaced with an \"Identity\" function (it returns the received argument).",
        "onRejected": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Function\"><code>Function</code></a>\ncalled if the\n<code>Promise</code>\nis rejected. This function has one argument, the\n<code>rejection reason</code>\n. If it is not a function, it is internally replaced with a \"Thrower\" function (it throws an error it received as argument)."
      },
      "returns": "<p>Once a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise</code></a> is fulfilled or rejected, the respective handler function (<code>onFulfilled</code> or <code>onRejected</code>) will be called <strong>asynchronously</strong> (scheduled in the current thread loop). The behavior of the handler function follows a specific set of rules. If a handler function:</p>\n\n<ul>\n <li>returns a value, the promise returned by <code>then</code> gets resolved with the returned value as its value.</li>\n <li>doesn't return anything, the promise returned by <code>then</code> gets resolved with an <code>undefined</code> value.</li>\n <li>throws an error, the promise returned by <code>then</code> gets rejected with the thrown error as its value.</li>\n <li>returns an already fulfilled promise, the promise returned by <code>then</code> gets fulfilled with that promise's value as its value.</li>\n <li>returns an already rejected promise, the promise returned by <code>then</code> gets rejected with that promise's value as its value.</li>\n <li>returns another <strong>pending</strong> promise object, the resolution/rejection of the promise returned by <code>then</code> will be subsequent to the resolution/rejection of the promise returned by the handler. Also, the resolved value of the promise returned by <code>then</code> will be the same as the resolved value of the promise returned by the handler.</li>\n</ul>\n\n<p>Following, an example to demonstrate the asynchronicity of the <code>then</code> method.</p>\n\n<pre class=\"brush: js notranslate\"><code><span class=\"token comment\">// using a resolved promise, the 'then' block will be triggered instantly,</span>\n<span class=\"token comment\">// but its handlers will be triggered asynchronously as demonstrated by the console.logs</span>\n<span class=\"token keyword\">const</span> resolvedProm <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">33</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> thenProm <span class=\"token operator\">=</span> resolvedProm<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this gets called after the end of the main stack. the value received and returned is: \"</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// instantly logging the value of thenProm</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>thenProm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// using setTimeout we can postpone the execution of a function to the moment the stack is empty</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>thenProm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// logs, in order:</span>\n<span class=\"token comment\">// Promise {[[PromiseStatus]]: \"pending\", [[PromiseValue]]: undefined}</span>\n<span class=\"token comment\">// \"this gets called after the end of the main stack. the value received and returned is: 33\"</span>\n<span class=\"token comment\">// Promise {[[PromiseStatus]]: \"resolved\", [[PromiseValue]]: 33}</span></code></pre>"
    },
    "proxy": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>Proxy</code> object enables you to create a proxy for another object, which can intercept and redefine fundamental operations for that object.</p>"
    },
    "proxy.proxy": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Proxy()</strong></code> constructor is used to create <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>Proxy</code></a> objects.</p>",
      "parameters": {
        "target": "A target object to wrap with\n<code>Proxy</code>\n. It can be any sort of object, including a native array, a function, or even another proxy.",
        "handler": "An object whose properties are functions that define the behavior of the proxy when an operation is performed on it."
      }
    },
    "proxy.proxy.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/apply",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.apply()</code></strong> method is a trap for a function call.</p>",
      "parameters": {
        "target": "The target object.",
        "thisArg": "The\n<code>this</code>\nargument for the call.",
        "argumentsList": "The list of arguments for the call."
      },
      "returns": "<p>The <code>apply()</code> method can return any value.</p>"
    },
    "proxy.proxy.construct": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/construct",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.construct()</code></strong> method is a trap for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator. In order for the new operation to be valid on the resulting Proxy object, the target used to initialize the proxy must itself have a <code>[[Construct]]</code> internal method (i.e. <code>new target</code> must be valid).</p>",
      "parameters": {
        "target": "The target object.",
        "argumentsList": "The list of arguments for the constructor.",
        "newTarget": "The constructor that was originally called,\n<code><var>p</var></code>\nabove."
      },
      "returns": "<p>The <code>construct</code> method must return an object.</p>"
    },
    "proxy.proxy.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.defineProperty()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a>.</p>",
      "parameters": {
        "target": "The target object.",
        "property": "The name or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>\nof the property whose description is to be retrieved.",
        "descriptor": "The descriptor for the property being defined or modified."
      },
      "returns": "<p>The <code>defineProperty()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the property has been successfully defined.</p>"
    },
    "proxy.proxy.deleteproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/deleteproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.deleteProperty()</code></strong> method is a trap for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code></a> operator.</p>",
      "parameters": {
        "target": "The target object.",
        "property": "The name or \n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>\nof the property to delete."
      },
      "returns": "<p>The <code>deleteProperty()</code> method must return a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the property has been successfully deleted.</p>"
    },
    "proxy.proxy.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/get",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.get()</code></strong> method is a trap for getting a property value.</p>",
      "parameters": {
        "target": "The target object.",
        "property": "The name or \n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>\n of the property to get.",
        "receiver": "Either the proxy or an object that inherits from the proxy."
      },
      "returns": "<p>The <code>get()</code> method can return any value.</p>"
    },
    "proxy.proxy.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.getOwnPropertyDescriptor()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a>.</p>",
      "parameters": {
        "target": "The target object.",
        "prop": "The name of the property whose description should be retrieved."
      },
      "returns": "<p>The <code>getOwnPropertyDescriptor()</code> method must return an object or <code>undefined</code>.</p>"
    },
    "proxy.proxy.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.getPrototypeOf()</code></strong> method is a trap for the <code>[[GetPrototypeOf]]</code> internal method.</p>",
      "parameters": {
        "target": "The target object."
      },
      "returns": "<p>The <code>getPrototypeOf()</code> method must return an object or <code>null</code>.</p>"
    },
    "proxy.proxy.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.has()</code></strong> method is a trap for the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/in\"><code>in</code></a> operator.</p>",
      "parameters": {
        "target": "The target object.",
        "prop": "The name or \n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>\nof the property to check for existence."
      },
      "returns": "<p>The <code>has()</code> method must return a boolean value.</p>"
    },
    "proxy.proxy.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/isextensible",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.isExtensible()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>.</p>",
      "parameters": {
        "target": "The target object."
      },
      "returns": "<p>The <code>isExtensible()</code> method must return a boolean value.</p>"
    },
    "proxy.proxy.ownkeys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/ownkeys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.ownKeys()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\"><code>Reflect.ownKeys()</code></a>.</p>",
      "parameters": {
        "target": "The target object."
      },
      "returns": "<p>The <code>ownKeys()</code> method must return an enumerable object.</p>"
    },
    "proxy.proxy.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.preventExtensions()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>.</p>",
      "parameters": {
        "target": "The target object."
      },
      "returns": "<p>The <code>preventExtensions()</code> method must return a boolean value.</p>"
    },
    "proxy.proxy.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.set()</code></strong> method is a trap for setting a property value.</p>",
      "parameters": {
        "target": "The target object.",
        "property": "The name or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a>\nof the property to set.",
        "value": "The new value of the property to set.",
        "receiver": "The object to which the assignment was originally directed. This is usually the proxy itself. But a <code>set()</code> handler can also be called indirectly, via the prototype chain or various other ways.<br>\n<div class=\"note notecard\">\n<strong>For example:</strong> Suppose a script does <code><var>obj</var>.name = \"jen\"</code>, and <code><var>obj</var></code> is not a proxy, and has no own property <code>.name</code>, but it has a proxy on its prototype chain. That proxy's <code>set()</code> handler will be called, and <code>obj</code> will be passed as the receiver.<br>\n</div>"
      },
      "returns": "<p>The <code>set()</code> method should return a boolean value.</p>\n\n<ul>\n <li>Return <code>true</code> to indicate that assignment succeeded.</li>\n <li>If the <code>set()</code> method returns <code>false</code>, and the assignment happened in strict-mode code, a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a> will be thrown.</li>\n</ul>"
    },
    "proxy.proxy.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/proxy/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>handler.setPrototypeOf()</code></strong> method is a trap for <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>.</p>",
      "parameters": {
        "target": "The target object.",
        "prototype": "The object's new prototype or\n<code>null</code>\n."
      },
      "returns": "<p>The <code>setPrototypeOf()</code> method returns <code>true</code> if the <code>[[Prototype]]</code> was successfully changed, otherwise <code>false</code>.</p>"
    },
    "proxy.revocable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/proxy/revocable",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Proxy.revocable()</strong></code> method is used to create a revocable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>Proxy</code></a> object.</p>",
      "returns": "<p>A newly created revocable <code>Proxy</code> object is returned.</p>"
    },
    "rangeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/rangeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>RangeError</strong></code> object indicates an error when a value is not in the set or range of allowed values.</span></p>"
    },
    "rangeerror.rangeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/rangeerror/rangeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <code><strong>RangeError()</strong></code> constructor creates an error when a value is not in the set or range of allowed values.</span></p>",
      "parameters": {
        "message": "Human-readable description of the error.",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "referenceerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/referenceerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>ReferenceError</strong></code> object represents an error when a non-existent variable is referenced.</p>"
    },
    "referenceerror.referenceerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/referenceerror/referenceerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ReferenceError</code></strong> object represents an error when a non-existent variable is referenced.</p>",
      "parameters": {
        "message": "Human-readable description of the error.",
        "fileName": "The name of the file containing the code that caused the exception.",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "reflect": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\"><strong>Reflect</strong> is a built-in object that provides methods for interceptable JavaScript operations. The methods are the same as those of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy/Proxy\" data-flaw=\"link1\">proxy handlers</a>. <code>Reflect</code> is not a function object, so it's not constructible.</span></p>"
    },
    "reflect.apply": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/apply",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.apply()</code></strong> method calls a target function with arguments as specified.</p>",
      "parameters": {
        "target": "The target function to call.",
        "thisArgument": "The value of\n<code>this</code>\nprovided for the call to\n<code><var>target</var></code>\n.",
        "argumentsList": "An array-like object specifying the arguments with which\n<code><var>target</var></code>\nshould be called."
      },
      "returns": "<p>The result of calling the given <code><var>target</var></code> function with the specified <code>this</code> value and arguments.</p>"
    },
    "reflect.construct": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/construct",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Reflect.construct()</strong></code> method acts like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new\"><code>new</code></a> operator, but as a function. It is equivalent to calling <code>new target(...args)</code>. It gives also the added option to specify a different prototype.</p>",
      "parameters": {
        "target": "The target function to call.",
        "argumentsList": "An array-like object specifying the arguments with which\n<code><var>target</var></code>\nshould be called.",
        "newTarget": "The constructor whose prototype should be used. See also the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/new.target\"><code>new.target</code></a>\noperator. If\n<code><var>newTarget</var></code>\nis not present, its value defaults to\n<code><var>target</var></code>\n."
      },
      "returns": "<p>A new instance of <code><var>target</var></code> (or <code><var>newTarget</var></code>, if present), initialized by <code><var>target</var></code> as a constructor with the given <code><var>argumentsList</var></code>.</p>"
    },
    "reflect.defineproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/defineproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.defineProperty()</code></strong> method is like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty()</code></a> but returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>.</p>",
      "parameters": {
        "target": "The target object on which to define the property.",
        "propertyKey": "The name of the property to be defined or modified.",
        "attributes": "The attributes for the property being defined or modified."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the property was successfully defined.</p>"
    },
    "reflect.deleteproperty": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/deleteproperty",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <code><strong>Reflect</strong></code><strong><code>.deleteProperty()</code></strong> method allows to delete properties. It is like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/delete\"><code>delete</code> operator</a> as a function.</p>",
      "parameters": {
        "target": "The target object on which to delete the property.",
        "propertyKey": "The name of the property to be deleted."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the property was successfully deleted.</p>"
    },
    "reflect.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/get",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.get()</code></strong> method works like getting a property from an object (<code>target[propertyKey]</code>) as a function.</p>",
      "parameters": {
        "target": "The target object on which to get the property.",
        "propertyKey": "The name of the property to get.",
        "receiver": "The value of\n<code>this</code>\nprovided for the call to\n<code><var>target</var></code>\nif a getter is encountered. When used with\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Proxy\"><code>Proxy</code></a>\n, it can be an object that inherits from\n<code><var>target</var></code>\n."
      },
      "returns": "<p>The value of the property.</p>"
    },
    "reflect.getownpropertydescriptor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/getownpropertydescriptor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static <strong><code>Reflect.getOwnPropertyDescriptor()</code></strong> method is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\"><code>Object.getOwnPropertyDescriptor()</code></a>. It returns a property descriptor of the given property if it exists on the object, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> otherwise.</span></p>",
      "parameters": {
        "target": "The target object in which to look for the property.",
        "propertyKey": "The name of the property to get an own property descriptor for."
      },
      "returns": "<p>A property descriptor object if the property exists in <code><var>target</var></code> object; otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "reflect.getprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/getprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.getPrototypeOf()</code></strong> method is almost the same method as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\"><code>Object.getPrototypeOf()</code></a>. It returns the prototype (i.e. the value of the internal <code>[[Prototype]]</code> property) of the specified object.</p>",
      "parameters": {
        "target": "The target object of which to get the prototype."
      },
      "returns": "<p>The prototype of the given object. If there are no inherited properties, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a> is returned.</p>"
    },
    "reflect.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.has()</code></strong> method works like the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/in\"><code>in</code> operator</a> as a function.</p>",
      "parameters": {
        "target": "The target object in which to look for the property.",
        "propertyKey": "The name of the property to check."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the <code><var>target</var></code> has the property.</p>"
    },
    "reflect.isextensible": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/isextensible",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static <strong><code>Reflect.isExtensible()</code></strong> method determines if an object is extensible (whether it can have new properties added to it). It is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/isExtensible\"><code>Object.isExtensible()</code></a>, but with some <a href=\"#Difference_to_Object.isExtensible\">differences</a>.</span></p>",
      "parameters": {
        "target": "The target object which to check if it is extensible."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the target is extensible.</p>"
    },
    "reflect.ownkeys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/ownkeys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.ownKeys()</code></strong> method returns an array of the <code>target</code> object's own property keys.</p>",
      "parameters": {
        "target": "The target object from which to get the own keys."
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of the <code><var>target</var></code> object's own property keys.</p>"
    },
    "reflect.preventextensions": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/preventextensions",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static <strong><code>Reflect.preventExtensions()</code></strong> method prevents new properties from ever being added to an object (i.e., prevents future extensions to the object).</span> It is similar to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions\"><code>Object.preventExtensions()</code></a>, but with some <a href=\"#Difference_from_Object.preventExtensions\">differences</a>.</p>",
      "parameters": {
        "target": "The target object on which to prevent extensions."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the target was successfully set to prevent extensions.</p>"
    },
    "reflect.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>Reflect.set()</code></strong> method works like setting a property on an object.</p>",
      "parameters": {
        "target": "The target object on which to set the property.",
        "propertyKey": "The name of the property to set.",
        "value": "The value to set.",
        "receiver": "The value of\n<code>this</code>\nprovided for the call to\n<code><var>target</var></code>\nif a setter is encountered."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not setting the property was successful.</p>"
    },
    "reflect.setprototypeof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/reflect/setprototypeof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static <strong><code>Reflect.setPrototypeOf()</code></strong> method is the same method as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf\"><code>Object.setPrototypeOf()</code></a>, except for its return type. It sets the prototype (i.e., the internal <code>[[Prototype]]</code> property) of a specified object to another object or to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>, and returns <code>true</code> if the operation was successful, or <code>false</code> otherwise</span>.</p>",
      "parameters": {
        "target": "The target object of which to set the prototype.",
        "prototype": "The object's new prototype (an object or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>\n)."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a> indicating whether or not the prototype was successfully set.</p>"
    },
    "regexp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>RegExp</code></strong> object is used for matching text with a pattern.</p>\n<p>For an introduction to regular expressions, read the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">Regular Expressions chapter</a> in the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">JavaScript Guide</a>.</p>"
    },
    "regexp.@@match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@match",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@match]()</code></strong> method retrieves the matches when matching a <em>string</em> against a <em>regular expression</em>.</p>",
      "parameters": {
        "str": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nthat is a target of the match."
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> containing the entire match result and any parentheses-captured matched results, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a> if there were no matches.</p>"
    },
    "regexp.@@matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@matchall",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@matchAll]</code></strong> method returns all matches of the regular expression against a string.</p>",
      "parameters": {
        "str": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nthat is a target of the match."
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Guide/Iterators_and_Generators\">iterator</a>.</p>"
    },
    "regexp.@@replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@replace",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@replace]()</code></strong> method replaces some or all matches of a <code>this</code> pattern in a string by a <code>replacement</code>, and returns the result of the replacement as a new string. The <code>replacement</code> can be a string or a function to be called for each match.</p>",
      "parameters": {
        "str": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nthat is a target of the replacement.",
        "newSubStr (replacement)": "The\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nthat replaces the substring. A number of special replacement patterns are supported; see the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\">Specifying a string as a parameter</a>\nsection in\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a>\npage.",
        "function (replacement)": "A function to be invoked to create the new substring. The arguments supplied to this function are described in the\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_function_as_a_parameter\">Specifying a function as a parameter</a>\nsection in\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a>\npage."
      },
      "returns": "<p>A new string with some or all matches of a pattern replaced by a replacement.</p>"
    },
    "regexp.@@search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@search",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@search]()</code></strong> method executes a search for a match between a <code>this</code> regular expression and a string.</p>",
      "parameters": {
        "str": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nthat is a target of the search."
      },
      "returns": "<dl>\n <dt>integer</dt>\n <dd>If successful, <code>[@@search]()</code> returns the index of the first match of the regular expression inside the string. Otherwise, it returns -1.</dd>\n</dl>"
    },
    "regexp.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>RegExp[@@species]</code></strong> accessor property returns the <code>RegExp</code> constructor.</p>"
    },
    "regexp.@@split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/@@split",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@split]()</code></strong> method splits a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object into an array of strings by separating the string into substrings.</p>",
      "parameters": {
        "str": "The target of the split operation.",
        "limit": "Integer specifying a limit on the number of splits to be found. The <code>[@@split]()</code> method still splits on every match of <code>this</code> RegExp pattern (or, in the Syntax above, <code><var>regexp</var></code>), until the number of split items match the <code><var>limit</var></code> or the string falls short of <code>this</code> pattern.<br>"
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> containing substrings as its elements.</p>"
    },
    "regexp.compile": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/compile",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The deprecated <code><strong>compile</strong></code><strong><code>()</code></strong> method is used to (re-)compile a regular expression during execution of a script. It is basically the same as the <code>RegExp</code> constructor.</p>",
      "parameters": {
        "pattern": "The text of the regular expression.",
        "flags": "If specified, flags can have any combination of the following values:<br>\n<dl>\n<dt><code>g</code></dt>\n<dd>global match</dd>\n<dt><code>i</code></dt>\n<dd>ignore case</dd>\n<dt><code>m</code></dt>\n<dd>multiline; treat beginning and end characters (^ and $) as working over multiple lines (i.e., match the beginning or end of <em>each</em> line (delimited by \\n or \\r), not only the very beginning or end of the whole input string)</dd>\n<dt><code>y</code></dt>\n<dd>sticky; matches only from the index indicated by the <code>lastIndex</code> property of this regular expression in the target string (and does not attempt to match from any later indexes).</dd>\n</dl>"
      }
    },
    "regexp.dotall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/dotall",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>dotAll</code></strong> property indicates whether or not the \"<code>s</code>\" flag is used with the regular expression. <code>dotAll</code> is a read-only property of an individual regular expression instance.</p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.dotAll</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "regexp.exec": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/exec",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>exec()</code></strong> method executes a search for a match in a specified string. Returns a result array, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>.</span></p>\n<p>JavaScript <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> objects are <strong>stateful</strong> when they have the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/global\"><code>global</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/sticky\"><code>sticky</code></a> flags set (e.g. <code>/foo/g</code> or <code>/foo/y</code>). They store a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> from the previous match. Using this internally, <code>exec()</code> can be used to iterate over multiple matches in a string of text (with capture groups), as opposed to getting just the matching strings with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a>.</p>\n<p>A newer function has been proposed to simplify matching multiple parts of a string (with capture groups): <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a>.</p>\n<p>If you are executing a match simply to find <code>true</code> or <code>false</code>, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/test\"><code>RegExp.prototype.test()</code></a> method or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a> instead.</p>",
      "parameters": {
        "str": "The string against which to match the regular expression."
      },
      "returns": "<p>If the match succeeds, the <code>exec()</code> method returns an array (with extra properties <code>index</code> and <code>input</code>; see below) and updates the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> property of the regular expression object. The returned array has the matched text as the first item, and then one item for each parenthetical capture group of the matched text.</p>\n\n<p>If the match fails, the <code>exec()</code> method returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>, and sets <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> to <code>0</code>.</p>"
    },
    "regexp.flags": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/flags",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>flags</code></strong> property returns a string consisting of the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2\">flags</a> of the current regular expression object.</p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.flags</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "regexp.global": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/global",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>global</code></strong> property indicates whether or not the \"<code>g</code>\" flag is used with the regular expression. <code>global</code> is a read-only property of an individual regular expression instance.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.global</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.ignorecase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/ignorecase",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>ignoreCase</code></strong> property indicates whether or not the \"<code>i</code>\" flag is used with the regular expression. <code>ignoreCase</code> is a read-only property of an individual regular expression instance.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.ignoreCase</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.input": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/input",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong><code>input</code> </strong>property is a static property of regular expressions that contains the string against which a regular expression is matched. <code>RegExp.$_</code> is an alias for this property.</p>"
    },
    "regexp.lastindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastindex",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>lastIndex</code></strong> is a read/write integer property of regular expression instances that specifies the index at which to start the next match.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExpInstance.lastIndex</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.lastmatch": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastmatch",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong>lastMatch</strong> property is a static and read-only property of regular expressions that contains the last matched characters. <code>RegExp.$&amp;</code> is an alias for this property.</p>"
    },
    "regexp.lastparen": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/lastparen",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong><code>lastParen</code></strong> property is a static and read-only property of regular expressions that contains the last parenthesized substring match, if any. <code>RegExp.$+</code> is an alias for this property.</p>"
    },
    "regexp.leftcontext": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/leftcontext",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong>leftContext </strong>property is a static and read-only property of regular expressions that contains the substring preceding the most recent match. <code>RegExp.$`</code> is an alias for this property.</p>"
    },
    "regexp.multiline": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/multiline",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>multiline</code></strong> property indicates whether or not the \"<code>m</code>\" flag is used with the regular expression. <code>multiline</code> is a read-only property of an individual regular expression instance.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.multiline</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.n": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/n",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The legacy RegExp <strong>$1, $2, $3, $4, $5, $6, $7, $8, $9</strong> properties are static and read-only properties of regular expressions that contain parenthesized substring matches.</p>"
    },
    "regexp.regexp": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/regexp",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>RegExp</code></strong> constructor creates a regular expression object for matching text with a pattern.</p>\n<p>For an introduction to regular expressions, read the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">Regular Expressions chapter</a> in the <a href=\"$MDN_URL$/Web/JavaScript/Guide\">JavaScript Guide</a>.</p>",
      "parameters": {
        "pattern": "The text of the regular expression.As of ES5, this can also be another\n<code>RegExp</code>\nobject or literal (for the two RegExp constructor notations only). Patterns may include\n<a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions#Using_special_characters\">special characters</a>\nto match a wider range of values than would a literal string.",
        "flags": "If specified, <code><var>flags</var></code> is a string that contains the flags to add.<br>\nAlternatively, if an object is supplied for the pattern, the <code><var>flags</var></code> string will replace any of that object's flags (and <code>lastIndex</code> will be reset to <code>0</code>) (as of ES2015).<br>\nIf <code><var>flags</var></code> is not specified and a regular expressions object is supplied, that object's flags (and <code>lastIndex</code> value) will be copied over.<br>\n<code><var>flags</var></code> may contain any combination of the following characters:<br>\n<dl>\n<dt><code>g</code> (global match)</dt>\n<dd>Find all matches rather than stopping after the first match.</dd>\n<dt><code>i</code> (ignore case)</dt>\n<dd>If <code>u</code> flag is also enabled, use Unicode case folding.</dd>\n<dt><code>m</code> (multiline)</dt>\n<dd>Treat beginning and end characters (<code>^</code> and <code>$</code>) as working over multiple lines. In other words, match the beginning or end of <em>each</em> line (delimited by <code>\\n</code> or <code>\\r</code>), not only the very beginning or end of the whole input string.</dd>\n<dt><code>s</code> (\"dotAll\")</dt>\n<dd>Allows <code>.</code> to match newlines.</dd>\n<dt><code>u</code> (unicode)</dt>\n<dd>Treat <code><var>pattern</var></code> as a sequence of Unicode code points. (See also <a href=\"$MDN_URL$/Web/API/DOMString/Binary\">Binary strings</a>).</dd>\n<dt><code>y</code> (sticky)</dt>\n<dd>Matches only from the index indicated by the <code>lastIndex</code> property of this regular expression in the target string. Does not attempt to match from any later indexes.</dd>\n</dl>"
      }
    },
    "regexp.rightcontext": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/rightcontext",
      "status": [],
      "doc": "<div> <div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div></div>\n<p>The non-standard <strong>rightContext </strong>property is a static and read-only property of regular expressions that contains the substring following the most recent match. <code>RegExp.$'</code> is an alias for this property.</p>"
    },
    "regexp.source": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/source",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>source</code></strong> property returns a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> containing the source text of the regexp object, and it doesn't contain the two forward slashes on both sides and any flags.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.source</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.sticky": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/sticky",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>sticky</code></strong> property reflects whether or not the search is sticky (searches in strings only from the index indicated by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\"><code>lastIndex</code></a> property of this regular expression). <code>sticky</code> is a read-only property of an individual regular expression object.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.sticky</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "regexp.test": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/test",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>test()</code></strong> method executes a search for a match between a regular expression and a specified string. Returns <code>true</code> or <code>false</code>.</p>",
      "parameters": {
        "str": "The string against which to match the regular expression."
      }
    },
    "regexp.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>",
      "returns": "<p>A string representing the source code of the given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> object.</p>"
    },
    "regexp.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the regular expression.</p>",
      "returns": "<p>A string representing the given object.</p>"
    },
    "regexp.unicode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/regexp/unicode",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>unicode</code></strong> property indicates whether or not the \"<code>u</code>\" flag is used with a regular expression. <code>unicode</code> is a read-only property of an individual regular expression instance.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>RegExp.prototype.unicode</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>yes</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Set</code></strong> object lets you store unique values of any type, whether <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a> or object references.</span></p>"
    },
    "set.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The initial value of the <strong><code>@@iterator</code></strong> property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>values</code></a> property.</p>",
      "returns": "<p>The <code>Set</code> <strong>iterator</strong> function, which is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set/values\"><code>values()</code></a> function by default.</p>"
    },
    "set.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Set[Symbol.species]</code></strong> accessor property returns the <code>Set</code> constructor.</p>"
    },
    "set.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/add",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>add()</code></strong> method appends a new element with a specified value to the end of a <code>Set</code> object.</p>",
      "parameters": {
        "value": "The value of the element to add to the\n<code>Set</code>\nobject."
      },
      "returns": "<p>The <code>Set</code> object with added value.</p>"
    },
    "set.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/clear",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>clear()</code></strong> method removes all elements from a <code>Set</code> object.</p>",
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "set.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/delete",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>delete()</code></strong> method removes the specified element from a <code>Set</code> object.</p>",
      "parameters": {
        "value": "The value to remove from\n<code><var>mySet</var></code>\n."
      },
      "returns": "<p>Returns <code>true</code> if <code><var>value</var></code> was successfully removed from <code><var>mySet</var></code>; otherwise <code>false</code>.</p>"
    },
    "set.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/entries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>entries()</strong></code> method returns a new <a href=\"$MDN_URL$/Web/JavaScript/Guide/Iterators_and_Generators\">Iterator</a> object that contains<strong> an array of <code>[value, value]</code></strong> for each element in the <code>Set</code> object, in insertion order. For <code>Set</code> objects there is no <code>key</code> like in <code>Map</code> objects. However, to keep the API similar to the <code>Map</code> object, each <em>entry</em> has the same value for its <em>key</em> and <em>value</em> here, so that an array <code>[value, value]</code> is returned.</p>",
      "returns": "<p>A new <code>Iterator</code> object that contains an array of <code>[value, value]</code> for each element in the given <code>Set</code>, in insertion order.</p>"
    },
    "set.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/foreach",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>forEach()</code></strong> method executes a provided function once for each value in the <code>Set</code> object, in insertion order.</p>",
      "parameters": {
        "callback": "Function to execute for each element, taking three arguments:<dl>\n<dt><code><var>currentValue</var></code>, <code><var>currentKey</var></code></dt>\n<dd>The current element being processed in the <code>Set</code>. As there are no keys in <code>Set</code>, the value is passed for both arguments.</dd>\n<dt><code><var>set</var></code></dt>\n<dd>The <code>Set</code> object which <code>forEach()</code> was called upon.</dd>\n</dl>",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "set.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>has()</code></strong> method returns a boolean indicating whether an element with the specified value exists in a <code>Set</code> object or not.</p>",
      "parameters": {
        "value": "The value to test for presence in the\n<code>Set</code>\nobject."
      },
      "returns": "<p>Returns <code>true</code> if an element with the specified value exists in the <code>Set</code> object; otherwise <code>false</code>.</p>\n\n<div class=\"notecard note\">\n<p><strong>Note:</strong> Technically speaking, <code>has()</code> uses the <a href=\"$MDN_URL$/Web/JavaScript/Equality_comparisons_and_sameness#Same-value-zero_equality\">Same-value-zero</a> algorithm to determine whether the given element is found.</p>\n</div>"
    },
    "set.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Set</code> constructor</strong> lets you create <code>Set</code> objects that store unique values of any type, whether <a href=\"$MDN_URL$/Glossary/Primitive\">primitive values</a> or object references.</span></p>",
      "parameters": {
        "iterable": "If an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\">iterable object</a> is passed, all of its elements will be added to the new <code>Set</code>.<br>\nIf you don't specify this parameter, or its value is <code>null</code>, the new <code>Set</code> is empty.<br>"
      },
      "returns": "<p>A new <code>Set</code> object.</p>"
    },
    "set.size": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/size",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>size</code></strong> accessor property returns the number of (unique) elements in a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Set\"><code>Set</code></a> object.</p>"
    },
    "set.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/set/values",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>values()</code></strong> method returns a new iterator object that contains the values for each element in the <code>Set</code> object in insertion order.</p>\n<div class=\"notecard note\">\n<p><strong>Note</strong>: The <strong><code>keys()</code></strong> method is an alias for this method (for similarity with <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Map\"><code>Map</code></a> objects), hence the <code>keys()</code> page redirecting here. It behaves exactly the same and returns <strong>values</strong> of <code>Set</code> elements.</p>\n</div>",
      "returns": "<p>A new iterator object containing the values for each element in the given <code>Set</code>, in insertion order.</p>"
    },
    "sharedarraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>SharedArrayBuffer</code></strong> object is used to represent a generic, fixed-length raw binary data buffer, similar to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object, but in a way that they can be used to create views on shared memory. Unlike an <code>ArrayBuffer</code>, a <code>SharedArrayBuffer</code> cannot become detached.</p>"
    },
    "sharedarraybuffer.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/bytelength",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteLength</code></strong> accessor property represents the length of an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> in bytes.</p>"
    },
    "sharedarraybuffer.sharedarraybuffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/sharedarraybuffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<div class=\"note notecard\">\n<p>Note that <code>SharedArrayBuffer</code> was disabled by default in all major browsers on 5 January, 2018 in response to <a href=\"https://meltdownattack.com/\">Spectre</a>. Chrome <a href=\"https://bugs.chromium.org/p/chromium/issues/detail?id=821270\">re-enabled it in v67</a> on platforms where its site-isolation feature is enabled to protect against Spectre-style vulnerabilities.</p>\n</div>\n<p>The <strong><code>SharedArrayBuffer()</code> constructor</strong> is used to create a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> object representing a generic, fixed-length raw binary data buffer, similar to the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> object.</p>",
      "parameters": {
        "length": "The size, in bytes, of the array buffer to create."
      },
      "returns": "<p>A new <code>SharedArrayBuffer</code> object of the specified size. Its contents are initialized to 0.</p>"
    },
    "sharedarraybuffer.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/sharedarraybuffer/slice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>SharedArrayBuffer.prototype.slice()</code></strong> method returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> whose contents are a copy of this <code>SharedArrayBuffer</code>'s bytes from begin, inclusive, up to end, exclusive. If either begin or end is negative, it refers to an index from the end of the array, as opposed to from the beginning. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>.</p>",
      "parameters": {
        "begin": "Zero-based index at which to begin extraction.A negative index can be used, indicating an offset from the end of the sequence.\n<code>slice(-2)</code>\nextracts the last two elements in the sequence.If\n<code><var>begin</var></code>\nis undefined,\n<code>slice</code>\nbegins from index\n<code>0</code>\n.",
        "end": "Zero-based index\n<em>before</em>\nwhich to end extraction.\n<code>slice</code>\nextracts up to but not including\n<code><var>end</var></code>\n.For example,\n<code>slice(1,4)</code>\nextracts the second element through the fourth element (elements indexed 1, 2, and 3).A negative index can be used, indicating an offset from the end of the sequence.\n<code>slice(2,-1)</code>\nextracts the third element through the second-to-last element in the sequence.If\n<code><var>end</var></code>\nis omitted,\n<code>slice</code>\nextracts through the end of the sequence (\n<code>sab.byteLength</code>\n)."
      },
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\"><code>SharedArrayBuffer</code></a> containing the extracted elements.</p>"
    },
    "string": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>String</code></strong> object is used to represent and manipulate a sequence of characters.</p>"
    },
    "string.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@iterator]()</code></strong> method returns a new iterator object that iterates over the code points of a String value, returning each code point as a String value.</p>",
      "returns": "<p>A new iterator object.</p>"
    },
    "string.anchor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/anchor",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>anchor()</code></strong> method creates a string beginning with an <code>&lt;a name=\"...\"&gt;</code> start tag, then some text, and then an <code>&lt;/a&gt;</code> end tag.</p>\n<div class=\"notecard warning\">\n<p>Don't use this method. Use <a href=\"$MDN_URL$/Web/API/Document_Object_Model\">DOM APIs</a> instead. Also, the HTML specification no longer allows the <a href=\"$MDN_URL$/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> element to have a <code>name</code> attribute, so this method doesn't even create valid markup.</p>\n</div>",
      "parameters": {
        "name": "A string representing a\n<code>name</code>\nvalue to put into the generated\n<code>&lt;a name=\"...\"&gt;</code>\nstart tag."
      },
      "returns": "<p>A string beginning with an <code>&lt;a name=\"<var>name</var>\"&gt;</code> start tag, then the text <var>str</var>, and then an <code>&lt;/a&gt;</code> end tag.</p>"
    },
    "string.big": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/big",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>big()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/big\"><code>&lt;big&gt;</code></a> HTML element that causes a string to be displayed in a big font.</p>\n<div class=\"note notecard\">\n<p><strong>Usage note:</strong> The &lt;big&gt; element has been removed in <a href=\"$MDN_URL$/Web/Guide/HTML/HTML5\">HTML5</a> and shouldn't be used anymore. Instead web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties.</p>\n</div>",
      "returns": "<p>A string containing a <a href=\"$MDN_URL$/Web/HTML/Element/big\"><code>&lt;big&gt;</code></a> HTML element.</p>"
    },
    "string.blink": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/blink",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>blink()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/blink\"><code>&lt;blink&gt;</code></a> HTML element that causes a string to blink.</p>\n<div class=\"warning notecard\">\n<p><strong>Warning:</strong> Blinking text is frowned upon by several accessibility standards. The <code>&lt;blink&gt;</code> element itself is non-standard and deprecated!</p>\n</div>",
      "returns": "<p>A string containing a <a href=\"$MDN_URL$/Web/HTML/Element/blink\"><code>&lt;blink&gt;</code></a> HTML element.</p>"
    },
    "string.bold": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/bold",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>bold()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/b\"><code>&lt;b&gt;</code></a> HTML element that causes a string to be displayed as bold.</p>",
      "returns": "<p>A string containing a <a href=\"$MDN_URL$/Web/HTML/Element/b\"><code>&lt;b&gt;</code></a> HTML element.</p>"
    },
    "string.charat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/charat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object's <strong><code>charAt()</code></strong> method returns a new string consisting of the single UTF-16 code unit located at the specified offset into the string.</span></p>",
      "parameters": {
        "index": "An integer between\n<code>0</code>\nand\n<code><var>str</var>.length - 1</code>\n. If the\n<code><var>index</var></code>\ncannot be converted to the integer or no\n<code><var>index</var></code>\nis provided, the default is\n<code>0</code>\n, so the first character of\n<code><var>str</var></code>\nis returned."
      },
      "returns": "<p>A string representing the character (exactly one UTF-16 code unit) at the specified <code><var>index</var></code>. If <code><var>index</var></code> is out of range, <code>charAt()</code> returns an empty string.</p>"
    },
    "string.charcodeat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/charcodeat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>charCodeAt()</code></strong> method returns an integer between <code>0</code> and <code>65535</code> representing the UTF-16 code unit at the given index.</span></p>\n<p>The UTF-16 code unit matches the Unicode code point for code points which can be represented in a single UTF-16 code unit. If the Unicode code point cannot be represented in a single UTF-16 code unit (because its value is greater than <code>0xFFFF</code>) then the code unit returned will be <em>the first part of a surrogate pair</em> for the code point. If you want the entire code point value, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/codePointAt\"><code>codePointAt()</code></a>.</p>",
      "parameters": {
        "index": "An integer greater than or equal to\n<code>0</code>\nand less than the\n<code>length</code>\nof the string. If\n<code><var>index</var></code>\nis not a number, it defaults to\n<code>0</code>\n."
      },
      "returns": "<p>A number representing the UTF-16 code unit value of the character at the given <code><var>index</var></code>. If <code><var>index</var></code> is out of range, <code>charCodeAt()</code> returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a>.</p>"
    },
    "string.codepointat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/codepointat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>codePointAt()</code></strong> method returns a non-negative integer that is the Unicode code point value.</p>",
      "parameters": {
        "pos": "Position of an element in\n<code><var>str</var></code>\nto return the code point value from."
      },
      "returns": "<p>A number representing the code point value of the character at the given <code><var>pos</var></code>. If there is no element at <code>pos</code>, returns <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "string.concat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/concat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>concat()</code></strong> method concatenates the string arguments to the calling string and returns a new string.</span></p>",
      "parameters": {
        "str2 [, ...strN]": "Strings to concatenate to\n<code><var>str</var></code>\n."
      },
      "returns": "<p>A new string containing the combined text of the strings provided.</p>"
    },
    "string.endswith": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/endswith",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>endsWith()</code></strong> method determines whether a string ends with the characters of a specified string, returning <code>true</code> or <code>false</code> as appropriate.</span></p>",
      "parameters": {
        "searchString": "The characters to be searched for at the end of\n<code><var>str</var></code>\n.",
        "length": "If provided, it is used as the length of\n<code><var>str</var></code>\n. Defaults to\n<code><var>str</var>.length</code>\n."
      },
      "returns": "<p><strong><code>true</code></strong> if the given characters are found at the end of the string; otherwise, <strong><code>false</code></strong>.</p>"
    },
    "string.fixed": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fixed",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>fixed()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/tt\"><code>&lt;tt&gt;</code></a> HTML element that causes a string to be displayed in fixed-pitch font.</p>",
      "returns": "<p>A string representing a <a href=\"$MDN_URL$/Web/HTML/Element/tt\"><code>&lt;tt&gt;</code></a> HTML element.</p>"
    },
    "string.fontcolor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fontcolor",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>fontcolor()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/font\"><code>&lt;font&gt;</code></a> HTML element that causes a string to be displayed in the specified font color.</p>\n<div class=\"note notecard\">\n<p><strong>Usage note:</strong> The &lt;font&gt; element has been removed in <a href=\"$MDN_URL$/Web/Guide/HTML/HTML5\">HTML5</a> and shouldn't be used anymore. Instead web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties.</p>\n</div>",
      "parameters": {
        "color": "A string expressing the color as a hexadecimal RGB triplet or as a string literal. String literals for color names are listed in the\n<a href=\"$MDN_URL$/Web/CSS/color_value\">CSS color reference</a>\n."
      },
      "returns": "<p>A string containing a <a href=\"$MDN_URL$/Web/HTML/Element/font\"><code>&lt;font&gt;</code></a> HTML element.</p>"
    },
    "string.fontsize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fontsize",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>fontsize()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/font\"><code>&lt;font&gt;</code></a> HTML element that causes a string to be displayed in the specified font size.</p>\n<div class=\"note notecard\">\n<p><strong>Usage note:</strong> The &lt;font&gt; element has been removed in <a href=\"$MDN_URL$/Web/Guide/HTML/HTML5\">HTML5</a> and shouldn't be used anymore. Instead web developers should use <a href=\"$MDN_URL$/Web/CSS\">CSS</a> properties.</p>\n</div>",
      "parameters": {
        "size": "An integer between 1 and 7, a string representing a signed integer between 1 and 7."
      },
      "returns": "<p>A string containing a <a href=\"$MDN_URL$/Web/HTML/Element/font\"><code>&lt;font&gt;</code></a> HTML element.</p>"
    },
    "string.fromcharcode": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fromcharcode",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>String.fromCharCode()</code></strong> method returns a string created from the specified sequence of UTF-16 code units.</p>",
      "parameters": {
        "num1, ..., numN": "A sequence of numbers that are UTF-16 code units. The range is between\n<code>0</code>\nand\n<code>65535</code>\n(\n<code>0xFFFF</code>\n). Numbers greater than\n<code>0xFFFF</code>\nare truncated. No validity checks are performed."
      },
      "returns": "<p>A string of length <code><var>N</var></code> consisting of the <code><var>N</var></code> specified UTF-16 code units.</p>"
    },
    "string.fromcodepoint": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/fromcodepoint",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The static <strong><code>String.fromCodePoint()</code></strong> method returns a string created by using the specified sequence of code points.</p>",
      "parameters": {
        "num1, ..., numN": "A sequence of code points."
      },
      "returns": "<p>A string created by using the specified sequence of code points.</p>"
    },
    "string.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/includes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>includes()</code></strong> method determines whether one string may be found within another string, returning <code>true</code> or <code>false</code> as appropriate.</p>",
      "parameters": {
        "searchString": "A string to be searched for within\n<code><var>str</var></code>\n.",
        "position": "The position within the string at which to begin searching for\n<code>searchString</code>\n. (Defaults to\n<code>0</code>\n.)"
      },
      "returns": "<p><strong><code>true</code></strong> if the search string is found anywhere within the given string; otherwise, <strong><code>false</code></strong> if not.</p>"
    },
    "string.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/indexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>indexOf()</code></strong> method returns the index within the calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object of the first occurrence of the specified value, starting the search at <code>fromIndex</code>. Returns <code>-1</code> if the value is not found.</span></p>\n<div class=\"note notecard\"><strong>Note:</strong> For the Array method, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a>.</div>",
      "parameters": {
        "searchValue": "The string value to search for.<br>\nIf no string is explicitly provided, <a href=\"https://tc39.github.io/ecma262/#sec-tostring\"><var>searchValue</var> will be coerced to \"<code>undefined</code>\"</a>, and this value will be searched for in <code><var>str</var></code>.<br>\nSo, for example: <code>'undefined'.indexOf()</code> will return <code>0</code>, as <code>undefined</code> is found at position <code>0</code> in the string <code>undefined</code>. <code>'undefine'.indexOf()</code> however will return <code>-1</code>, as <code>undefined</code> is not found in the string <code>undefine</code>.<br>",
        "fromIndex": "An integer representing the index at which to start the search. Defaults to <code>0</code>.<br>\nFor <var><code>fromIndex</code></var> values lower than <code>0</code>, or greater than <code><var>str</var>.length</code>, the search starts at index <code>0</code> and <code><var>str</var>.length</code>, respectively.<br>\nFor example, <code>'hello world'.indexOf('o', -5)</code> will return <code>4</code>, as it starts at position <code>0</code>, and <code>o</code> is found at position <code>4</code>. On the other hand, <code>'hello world'.indexOf('o', 11)</code> (and with any <code>fromIndex</code> value greater than <code>11</code>) will return <code>-1</code>, as the search is started at position <code>11</code>, a position <em>after</em> the end of the string.<br>"
      },
      "returns": "<p>The index of the first occurrence of <code><var>searchValue</var></code>, or <code><strong>-1</strong></code> if not found.</p>\n\n<p>An empty string <code><var>searchValue</var></code> produces strange results. With no <code><var>fromIndex</var></code> value, or any <code><var>fromIndex</var></code> value lower than the string's <code>length</code>, the returned value is the same as the <code><var>fromIndex</var></code> value:</p>\n\n<pre class=\"brush: js notranslate\"><code><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 0</span>\n<span class=\"token string\">'hello world'</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 0</span>\n<span class=\"token string\">'hello world'</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 3</span>\n<span class=\"token string\">'hello world'</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 8</span></code></pre>\n\n<p>However, with any <code><var>fromIndex</var></code> value equal to or greater than the string's <code>length</code>, the returned value <em>is</em> the string's <code>length</code>:</p>\n\n<pre class=\"brush: js notranslate\"><code><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 11</span>\n<span class=\"token string\">'hello world'</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 11</span>\n<span class=\"token string\">'hello world'</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// returns 11</span></code></pre>\n\n<p>In the former instance, JS seems to find an empty string just after the specified index value. In the latter instance, JS seems to be finding an empty string at the end of the searched string.</p>"
    },
    "string.italics": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/italics",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>italics()</code></strong> method creates an <a href=\"$MDN_URL$/Web/HTML/Element/i\"><code>&lt;i&gt;</code></a> HTML element that causes a string to be italic.</p>",
      "returns": "<p>A string containing a <a href=\"$MDN_URL$/Web/HTML/Element/i\"><code>&lt;i&gt;</code></a> HTML element.</p>"
    },
    "string.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>lastIndexOf()</code></strong> method returns the index within the calling <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object of the last occurrence of the specified value, searching backwards from <code>fromIndex</code>. Returns <code>-1</code> if the value is not found.</p>",
      "parameters": {
        "searchValue": "A string representing the value to search for. If\n<code><var>searchValue</var></code>\nis an empty string, then\n<code><var>fromIndex</var></code>\nis returned.",
        "fromIndex": "The index of the last character in the string to be considered as the beginning of a match. The default value is\n<code>+Infinity</code>\n. If\n<code><var>fromIndex</var> &gt;= <var>str</var>.length</code>\n, the whole string is searched. If\n<code><var>fromIndex</var> &lt; 0</code>\n, the behavior will be the same as if it would be\n<code>0</code>\n."
      },
      "returns": "<p>The index of the last occurrence of <code><var>searchValue</var></code>; <code>-1</code> if not found.</p>"
    },
    "string.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/length",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>length</code></strong> property of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object contains the length of the string, in UTF-16 code units. <code>length</code> is a read-only data property of string instances.</span></p>"
    },
    "string.link": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/link",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>link()</code></strong> method creates a string representing the code for an <a href=\"$MDN_URL$/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> HTML element to be used as a hypertext link to another URL.</p>",
      "parameters": {
        "url": "Any string that specifies the\n<code>href</code>\nattribute of the\n<code>&lt;a&gt;</code>\nelement; it should be a valid URL (relative or absolute), with any\n<code>&amp;</code>\ncharacters escaped as\n<code>&amp;amp;</code>\n, and any\n<code>\"</code>\ncharacters escaped as\n<code>&amp;quot;</code>\n."
      },
      "returns": "<p>A string containing an <a href=\"$MDN_URL$/Web/HTML/Element/a\"><code>&lt;a&gt;</code></a> HTML element.</p>"
    },
    "string.localecompare": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/localecompare",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>localeCompare()</code></strong> method returns a number indicating whether a reference string comes before, or after, or is the same as the given string in sort order.</p>\n<p>The new <code><var>locales</var></code> and <code><var>options</var></code> arguments let applications specify the language whose sort order should be used and customize the behavior of the function. In older implementations, which ignore the <code><var>locales</var></code> and <code><var>options</var></code> arguments, the locale and sort order used are entirely implementation-dependent.</p>",
      "parameters": {
        "compareString": "The string against which the\n<code><var>referenceStr</var></code>\nis compared.",
        "locales and options": "These arguments customize the behavior of the function and let applications specify the language whose formatting conventions should be used. In implementations which ignore the <code><var>locales</var></code> and <code><var>options</var></code> arguments, the locale used and the form of the string returned are entirely implementation-dependent.<br>\nSee the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl/Collator/Collator\" data-flaw=\"link1\"><code>Intl.Collator()</code> constructor</a> for details on these parameters and how to use them.<br>"
      },
      "returns": "<p>A <strong>negative</strong> number if <code><var>referenceStr</var></code> occurs before <code><var>compareString</var></code>; <strong>positive</strong> if the <code><var>referenceStr</var></code> occurs after <code><var>compareString</var></code>; <code>0</code> if they are equivalent.</p>"
    },
    "string.match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/match",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>match()</code></strong> method retrieves the result of matching a <em>string</em> against a <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">regular expression</a>.</p>",
      "parameters": {
        "regexp": "A regular expression object.If\n<code><var>regexp</var></code>\nis a non-\n<code>RegExp</code>\nobject, it is implicitly converted to a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>\nby using\n<code>new RegExp(<var>regexp</var>)</code>\n.If you don't give any parameter and use the\n<code>match()</code>\nmethod directly, you will get an\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>\nwith an empty string:\n<code>[\"\"]</code>\n."
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> whose contents depend on the presence or absence of the global (<code>g</code>) flag, or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a> if no matches are found.</p>\n\n<ul>\n <li>If the <code>g</code> flag is used, all results matching the complete regular expression will be returned, but capturing groups will not.</li>\n <li>if the <code>g</code> flag is not used, only the first complete match and its related capturing groups are returned. In this case, the returned item will have additional properties as described below.</li>\n</ul>\n\n<h4 id=\"Additional_properties\">Additional properties</h4>\n\n<p>As explained above, some results contain additional properties as described below.</p>\n\n<dl>\n <dt><code>groups</code></dt>\n <dd>An object of named capturing groups whose keys are the names and values are the capturing groups or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> if no named capturing groups were defined. See <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges\">Groups and Ranges</a> for more information.</dd>\n <dt><code>index</code></dt>\n <dd>The index of the search at which the result was found.</dd>\n <dt><code>input</code></dt>\n <dd>A copy of the search string.</dd>\n</dl>"
    },
    "string.matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/matchall",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>matchAll()</code></strong> method returns an iterator of all results matching a <var>string</var> against a <em><a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">regular expression</a></em>, including <a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions/Groups_and_Ranges\">capturing groups</a>.</p>",
      "parameters": {
        "regexp": "A regular expression object.<br>\nIf a non-<code>RegExp</code> object <code><var>obj</var></code> is passed, it is implicitly converted to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a> by using <code>new RegExp(<var>obj</var>)</code>.<br>\nThe <code>RegExp</code> object must have the <code>/g</code> flag, otherwise a <code>TypeError</code> will be thrown.<br>"
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Guide/Iterators_and_Generators\">iterator</a> (which is not a restartable iterable).</p>"
    },
    "string.normalize": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/normalize",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>normalize()</code></strong> method returns the Unicode Normalization Form of the string.</p>",
      "parameters": {
        "form": "One of <code>\"NFC\"</code>, <code>\"NFD\"</code>, <code>\"NFKC\"</code>, or <code>\"NFKD\"</code>, specifying the Unicode Normalization Form. If omitted or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>, <code>\"NFC\"</code> is used.<br>\nThese values have the following meanings:<br>\n<dl>\n<dt><code>\"NFC\"</code></dt>\n<dd>Canonical Decomposition, followed by Canonical Composition.</dd>\n<dt><code>\"NFD\"</code></dt>\n<dd>Canonical Decomposition.</dd>\n<dt><code>\"NFKC\"</code></dt>\n<dd>Compatibility Decomposition, followed by Canonical Composition.</dd>\n<dt><code>\"NFKD\"</code></dt>\n<dd>Compatibility Decomposition.</dd>\n</dl>"
      },
      "returns": "<p>A string containing the Unicode Normalization Form of the given string.</p>"
    },
    "string.padend": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/padend",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>padEnd()</code></strong> method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of the current string.</p>",
      "parameters": {
        "targetLength": "The length of the resulting string once the current\n<code><var>str</var></code>\nhas been padded. If the value is lower than\n<code><var>str.</var>length</code>\n, the current string will be returned as-is.",
        "padString": "The string to pad the current\n<code><var>str</var></code>\nwith. If\n<code><var>padString</var></code>\nis too long to stay within\n<code><var>targetLength</var></code>\n, it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is \"\" (\n<code>U+0020</code>\n)."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> of the specified <code><var>targetLength</var></code> with the <code><var>padString</var></code> applied at the end of the current <code><var>str</var></code>.</p>"
    },
    "string.padstart": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/padstart",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>padStart()</code></strong> method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length.</span> The padding is applied from the start of the current string.</p>",
      "parameters": {
        "targetLength": "The length of the resulting string once the current\n<code><var>str</var></code>\nhas been padded. If the value is less than\n<code><var>str.</var>length</code>\n, then\n<code><var>str</var></code>\nis returned as-is.",
        "padString": "The string to pad the current\n<code><var>str</var></code>\nwith. If\n<code><var>padString</var></code>\nis too long to stay within the\n<code><var>targetLength</var></code>\n, it will be truncated from the end. The default value is \"\" (\n<code>U+0020 'SPACE'</code>\n)."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> of the specified <code><var>targetLength</var></code> with <code><var>padString</var></code> applied from the start.</p>"
    },
    "string.raw": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/raw",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The static <strong><code>String.raw()</code></strong> method is a tag function of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Template_literals\" data-flaw=\"link1\">template literals</a>. This is <em>similar</em> to the <code>r</code> prefix in Python, or the <code>@</code> prefix in C# for string literals. (But it is not <em>identical</em>; see explanations in <a href=\"https://bugs.chromium.org/p/v8/issues/detail?id=5016\">this issue</a>.) It's used to get the raw string form of template strings, that is, substitutions (e.g. <code>${foo}</code>) are processed, but escapes (e.g. <code>\\n</code>) are not.</span></p>",
      "parameters": {
        "callSite": "Well-formed template call site object, like\n<code>{ raw: ['foo', 'bar', 'baz'] }</code>\n.",
        "...substitutions": "Contains substitution values.",
        "templateString": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Template_literals\" >template string</a>\n, optionally with substitutions (\n<code>${...}</code>\n)."
      },
      "returns": "<p>The raw string form of a given template string.</p>",
      "throws": {
        "TypeError": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>\nis thrown if the first argument is not a well-formed object."
      }
    },
    "string.repeat": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/repeat",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>repeat()</code></strong> method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together.</p>",
      "parameters": {
        "count": "An integer between\n<code>0</code>\nand\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY\"><code>+Infinity</code></a>\n, indicating the number of times to repeat the string."
      },
      "returns": "<p>A new string containing the specified number of copies of the given string.</p>"
    },
    "string.replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/replace",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>replace()</code></strong> method returns a new string with some or all matches of a <code>pattern</code> replaced by a <code>replacement</code>.</span> The <code>pattern</code> can be a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>, and the <code>replacement</code> can be a string or a function to be called for each match. If <code>pattern</code> is a string, only the first occurrence will be replaced.</p>\n<p>The original string is left unchanged.</p>",
      "parameters": {
        "regexp (pattern)": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>\nobject or literal. The match or matches are replaced with\n<code><var>newSubstr</var></code>\nor the value returned by the specified\n<code><var>function</var></code>\n.",
        "substr": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nthat is to be replaced by\n<code><var>newSubstr</var></code>\n. It is treated as a literal string and is\n<em>not</em>\ninterpreted as a regular expression. Only the first occurrence will be replaced.",
        "newSubstr (replacement)": "The\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nthat replaces the substring specified by the specified\n<code><var>regexp</var></code>\nor\n<code><var>substr</var></code>\nparameter. A number of special replacement patterns are supported; see the \"\n<a href=\"#Specifying_a_string_as_a_parameter\">Specifying a string as a parameter</a>\n\" section below.",
        "function (replacement)": "A function to be invoked to create the new substring to be used to replace the matches to the given\n<code><var>regexp</var></code>\nor\n<code><var>substr</var></code>\n. The arguments supplied to this function are described in the \"\n<a href=\"#Specifying_a_function_as_a_parameter\">Specifying a function as a parameter</a>\n\" section below."
      },
      "returns": "<p>A new string, with some or all matches of a pattern replaced by a replacement.</p>"
    },
    "string.replaceall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/replaceall",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>replaceAll()</code></strong> method returns a new string with all matches of a <code>pattern</code> replaced by a <code>replacement</code>.</span> The <code>pattern</code> can be a string or a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>, and the <code>replacement</code> can be a string or a function to be called for each match.</p>\n<p>The original string is left unchanged.</p>",
      "parameters": {
        "regexp (pattern)": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>\nobject or literal with the global flag. The matches are replaced with\n<code><var>newSubstr</var></code>\nor the value returned by the specified\n<code><var>function</var></code>\n. A RegExp without the global (\"g\") flag will throw a\n<code>TypeError</code>\n: \"replaceAll must be called with a global RegExp\".",
        "substr": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nthat is to be replaced by\n<code><var>newSubstr</var></code>\n. It is treated as a literal string and is\n<em>not</em>\ninterpreted as a regular expression.",
        "newSubstr (replacement)": "The\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a>\nthat replaces the substring specified by the specified\n<code><var>regexp</var></code>\nor\n<code><var>substr</var></code>\nparameter. A number of special replacement patterns are supported; see the \"\n<a href=\"#Specifying_a_string_as_a_parameter\">Specifying a string as a parameter</a>\n\" section below.",
        "function (replacement)": "A function to be invoked to create the new substring to be used to replace the matches to the given\n<code><var>regexp</var></code>\nor\n<code><var>substr</var></code>\n. The arguments supplied to this function are described in the \"\n<a href=\"#Specifying_a_function_as_a_parameter\">Specifying a function as a parameter</a>\n\" section below."
      },
      "returns": "<p>A new string, with all matches of a pattern replaced by a replacement.</p>"
    },
    "string.search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/search",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>search()</code></strong> method executes a search for a match between a regular expression and this <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object.</p>",
      "parameters": {
        "regexp": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Guide/Regular_Expressions\">regular expression</a>\nobject.If a non-RegExp object\n<code><var>regexp</var></code>\nis passed, it is implicitly converted to a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\"><code>RegExp</code></a>\nwith\n<code>new RegExp(<var>regexp</var>)</code>\n."
      },
      "returns": "<p>The index of the first match between the regular expression and the given string, or <code>-1</code> if no match was found.</p>"
    },
    "string.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/slice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>slice()</code></strong> method extracts a section of a string and returns it as a new string, without modifying the original string.</p>",
      "parameters": {
        "beginIndex": "The zero-based index at which to begin extraction. If negative, it is treated as <code><var>str</var>.length + <var>beginIndex</var></code>. (For example, if <code><var>beginIndex</var></code> is <code>-3</code>, it is treated as <code><var>str</var>.length - 3</code>.) If <code><var>beginIndex</var></code> is not a number after <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number\"><code>Number(<var>beginIndex</var>)</code></a>, it is treated as <code>0</code>.<br>\nIf <code><var>beginIndex</var></code> is greater than or equal to <code><var>str</var>.length</code>, an empty string is returned.<br>",
        "endIndex": "The zero-based index <em>before</em> which to end extraction. The character at this index will not be included.<br>\nIf <code><var>endIndex</var></code> is omitted or undefined, or greater than <code><var>str</var>.length</code>, <code>slice()</code> extracts to the end of the string. If negative, it is treated as <code><var>str</var>.length + <var>endIndex</var></code>. (For example, if <code><var>endIndex</var></code> is <code>-3</code>, it is treated as <code><var>str</var>.length - 3</code>.) If it is not undefined and not a number after <code>Number(<var>endIndex</var>)</code>, an empty string is returned.<br>\nIf <code><var>endIndex</var></code> is specified and <code><var>startIndex</var></code> is negative, <code><var>endIndex</var></code> should be negative, otherwise an empty string is returned. (For example, <code>slice(-3, 0)</code> returns <code>\"\"</code>.)<br>\nIf <code><var>endIndex</var></code> is specified, and <code><var>startIndex</var></code> and <code><var>endIndex</var></code> are both positive or negative, <code><var>endIndex</var></code> should be greater than <code><var>startIndex</var></code>, otherwise an empty string is returned. (For example, <code>slice(-1, -3)</code> or <code>slice(3, 1)</code> returns <code>\"\"</code>.)<br>"
      },
      "returns": "<p>A new string containing the extracted section of the string.</p>"
    },
    "string.small": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/small",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>small()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/small\"><code>&lt;small&gt;</code></a> HTML element that causes a string to be displayed in a small font.</p>",
      "returns": "<p>A string containing a <a href=\"$MDN_URL$/Web/HTML/Element/small\"><code>&lt;small&gt;</code></a> HTML element.</p>"
    },
    "string.split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/split",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>split()</code></strong> method divides a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> into an ordered list of substrings, puts these substrings into an array, and returns the array.  The division is done by searching for a pattern; where the pattern is provided as the first parameter in the method's call.  </span></p>",
      "parameters": {
        "separator": "The pattern describing where each split should occur.  The <code><var>separator</var></code> can be a simple string or it can be a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp\">regular expression</a>.<br>\n<ul>\n<li>The simplest case is when <code><var>separator</var></code> is just a single character; this is used to split a delimited string.  For example, a string containing tab separated values (TSV) could be parsed by passing a tab character as the separator, like this: <code>myString.split(\"\\t\")</code>.</li>\n<li>If <code><var>separator</var></code> contains multiple characters, that entire character sequence must be found in order to split.</li>\n<li>If <code><var>separator</var></code> is omitted or does not occur in <code><var>str</var></code>, the returned array contains one element consisting of the entire string.</li>\n<li>If <code><var>separator</var></code> appears at the beginning (or end) of the string, it still has the effect of splitting.  The result is an empty (i.e. zero length) string, which appears at the first (or last) position of the returned array.</li>\n<li>If <code><var>separator</var></code> is an empty string (<code>\"\"</code>), <code><var>str</var></code> is converted to an array of each of its UTF-16 \"characters\".</li>\n</ul>\n<div class=\"notecard warning\">\n<strong>Warning:</strong> When the empty string (<code>\"\"</code>) is used as a separator, the string is <strong>not</strong> split by <em>user-perceived characters</em> (<a href=\"https://unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries\">grapheme clusters</a>) or unicode characters (codepoints), but by UTF-16 codeunits. This destroys <a href=\"http://unicode.org/faq/utf_bom.html#utf16-2\">surrogate pairs</a>. See <a href=\"https://stackoverflow.com/a/34717402\">“How do you get a string to a character array in JavaScript?” on StackOverflow</a>.<br>\n</div>",
        "limit": "A non-negative integer specifying a limit on the number of substrings to be included in the array. If provided, splits the string at each occurrence of the specified <code><var>separator</var></code>, but stops when <code><var>limit</var></code> entries have been placed in the array. Any leftover text is not included in the array at all.<br>\n<ul>\n<li>The array may contain fewer entries than <code>limit</code> if the end of the string is reached before the limit is reached.</li>\n<li>If <code><var>limit</var></code> is <code>0</code>, <code>[]</code> is returned.</li>\n</ul>"
      },
      "returns": "<p>An <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> of strings, split at each point where the <code><var>separator</var></code> occurs in the given string.</p>"
    },
    "string.startswith": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/startswith",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>startsWith()</code></strong> method determines whether a string begins with the characters of a specified string, returning <code>true</code> or <code>false</code> as appropriate.</span></p>",
      "parameters": {
        "searchString": "The characters to be searched for at the start of this string.",
        "position": "The position in this string at which to begin searching for\n<code><var>searchString</var></code>\n. Defaults to\n<code>0</code>\n."
      },
      "returns": "<p><strong><code>true</code></strong> if the given characters are found at the beginning of the string; otherwise, <strong><code>false</code></strong>.</p>"
    },
    "string.strike": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/strike",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>strike()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/strike\"><code>&lt;strike&gt;</code></a> HTML element that causes a string to be displayed as struck-out text.</p>",
      "returns": "<p>A string containing a <a href=\"$MDN_URL$/Web/HTML/Element/strike\"><code>&lt;strike&gt;</code></a> HTML element.</p>"
    },
    "string.string": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/string",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>String</code></strong> constructor is used to create a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object. When called instead as a function, it performs type conversion to a <a href=\"$MDN_URL$/Glossary/string\">primitive string</a>, which is usually more useful.</p>",
      "parameters": {
        "thing": "Anything to be converted to a string."
      }
    },
    "string.sub": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/sub",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>sub()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/sub\"><code>&lt;sub&gt;</code></a> HTML element that causes a string to be displayed as subscript.</p>",
      "returns": "<p>A string containing a <a href=\"$MDN_URL$/Web/HTML/Element/sub\"><code>&lt;sub&gt;</code></a> HTML element.</p>"
    },
    "string.substr": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/substr",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<p class=\"seoSummary\">The <strong><code>substr()</code></strong> method returns a portion of the string, starting at the specified index and extending for a given number of characters afterwards.</p>",
      "parameters": {
        "start": "The index of the first character to include in the returned substring.",
        "length": "Optional. The number of characters to extract."
      },
      "returns": "<p>A new string containing the specified part of the given string.</p>"
    },
    "string.substring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/substring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>substring()</code></strong> method returns the part of the <code>string</code> between the start and end indexes, or to the end of the string.</p>",
      "parameters": {
        "indexStart": "The index of the first character to include in the returned substring.",
        "indexEnd": "The index of the first character to exclude from the returned substring."
      },
      "returns": "<p>A new string containing the specified part of the given string.</p>"
    },
    "string.sup": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/sup",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard deprecated\">\n<h4 id=\"Deprecated\">Deprecated</h4>\n<p>This feature is no longer recommended. Though some browsers might still support it, it may have already been removed from the relevant web standards, may be in the process of being dropped, or may only be kept for compatibility purposes. Avoid using it, and update existing code if possible; see the <a href=\"#Browser_compatibility\">compatibility table</a> at the bottom of this page to guide your decision. Be aware that this feature may cease to work at any time.</p>\n</div></div>\n<p>The <strong><code>sup()</code></strong> method creates a <a href=\"$MDN_URL$/Web/HTML/Element/sup\"><code>&lt;sup&gt;</code></a> HTML element that causes a string to be displayed as superscript.</p>",
      "returns": "<p>A string containing a <a href=\"$MDN_URL$/Web/HTML/Element/sup\"><code>&lt;sup&gt;</code></a> HTML element.</p>"
    },
    "string.tolocalelowercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolocalelowercase",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleLowerCase()</code></strong> method returns the calling string value converted to lower case, according to any locale-specific case mappings.</p>",
      "parameters": {
        "locale": "The\n<code>locale</code>\nparameter indicates the locale to be used to convert to lower case according to any locale-specific case mappings. If multiple locales are given in an\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>\n, the\n<a href=\"https://tc39.github.io/ecma402/#sec-bestavailablelocale\">best available locale</a>\nis used. The default locale is the host environment’s current locale."
      },
      "returns": "<p>A new string representing the calling string converted to lower case, according to any locale-specific case mappings.</p>"
    },
    "string.tolocaleuppercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolocaleuppercase",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleUpperCase()</code></strong> method returns the calling string value converted to upper case, according to any locale-specific case mappings.</p>",
      "parameters": {
        "locale": "The\n<code>locale</code>\nparameter indicates the locale to be used to convert to upper case according to any locale-specific case mappings. If multiple locales are given in an\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a>\n, the\n<a href=\"https://tc39.github.io/ecma402/#sec-bestavailablelocale\">best available locale</a>\nis used. The default locale is the host environment’s current locale."
      },
      "returns": "<p>A new string representing the calling string converted to upper case, according to any locale-specific case mappings.</p>"
    },
    "string.tolowercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tolowercase",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLowerCase()</code></strong> method returns the calling string value converted to lower case.</p>",
      "returns": "<p>A new string representing the calling string converted to lower case.</p>"
    },
    "string.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>",
      "returns": "<p>A string representing the source code of the calling object.</p>"
    },
    "string.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified object.</p>",
      "returns": "<p>A string representing the calling object.</p>"
    },
    "string.touppercase": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/touppercase",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toUpperCase()</code></strong> method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one).</p>",
      "returns": "<p>A new string representing the calling string converted to upper case.</p>",
      "throws": {
        "TypeError": "When called on\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a>\nor\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>\n, for example,\n<code>String.prototype.toUpperCase.call(undefined)</code>\n."
      }
    },
    "string.trim": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trim",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>trim()</code></strong> method removes whitespace from both ends of a string. Whitespace in this context is all the whitespace characters (space, tab, no-break space, etc.) and all the line terminator characters (LF, CR, etc.).</p>",
      "returns": "<p>A new string representing the <code><var>str</var></code> stripped of whitespace from both ends.</p>"
    },
    "string.trimend": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trimend",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>trimEnd()</code></strong> method removes whitespace from the end of a string. <code>trimRight()</code> is an alias of this method.</p>",
      "returns": "<p>A new string representing the calling string stripped of whitespace from its (right) end.</p>"
    },
    "string.trimstart": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/trimstart",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>trimStart()</code></strong> method removes whitespace from the beginning of a string. <code>trimLeft()</code> is an alias of this method.</p>",
      "returns": "<p>A new string representing the calling string stripped of whitespace from its beginning (left end).</p>"
    },
    "string.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/string/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the primitive value of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object.</p>",
      "returns": "<p>A string representing the primitive value of a given <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String\"><code>String</code></a> object.</p>"
    },
    "symbol": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The data type <strong>symbol</strong> is a <a href=\"$MDN_URL$/Glossary/Primitive\">primitive data type</a>. The <code>Symbol()</code> function returns a value of type <strong>symbol</strong>, has static properties that expose several members of built-in objects, has static methods that expose the global symbol registry, and resembles a built-in object class, but is incomplete as a constructor because it does not support the syntax \"<code>new Symbol()</code>\".  </p>\n<p>Every symbol value returned from <code>Symbol()</code> is unique.  A symbol value may be used as an identifier for object properties; this is the data type's primary purpose, although other use-cases exist, such as enabling opaque data types, or serving as an implementation-supported unique identifier in general.  Some further explanation about purpose and usage can be found in the <a href=\"$MDN_URL$/Glossary/Symbol\">glossary entry for Symbol</a>.</p>"
    },
    "symbol.@@toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/@@toprimitive",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>[@@toPrimitive]()</code></strong> method converts a Symbol object to a primitive value.</p>",
      "returns": "<p>The primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> object.</p>"
    },
    "symbol.asynciterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/asynciterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Symbol.asyncIterator</strong></code> well-known symbol specifies the default AsyncIterator for an object. If this property is set on an object, it is an async iterable and can be used in a <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for-await...of\">for await...of</a></code> loop.</p>"
    },
    "symbol.description": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/description",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The read-only <code><strong>description</strong></code> property is a string returning the optional description of <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> objects.</p>"
    },
    "symbol.for": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/for",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.for(key)</code></strong> method searches for existing symbols in a runtime-wide symbol registry with the given key and returns it if found. Otherwise a new symbol gets created in the global symbol registry with this key.</p>",
      "parameters": {
        "key": "String, required. The key for the symbol (and also used for the description of the symbol)."
      },
      "returns": "<p>An existing symbol with the given key if found; otherwise, a new symbol is created and returned.</p>"
    },
    "symbol.hasinstance": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/hasinstance",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>Symbol.hasInstance</code></strong> well-known symbol is used to determine if a constructor object recognizes an object as its instance. The <a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/instanceof\"><code>instanceof</code></a> operator's behavior can be customized by this symbol.</span></p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.hasInstance</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "symbol.isconcatspreadable": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/isconcatspreadable",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.isConcatSpreadable</code></strong> well-known symbol is used to configure if an object should be flattened to its array elements when using the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/concat\"><code>Array.prototype.concat()</code></a> method.</p>"
    },
    "symbol.iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The well-known <code><strong>Symbol.iterator</strong></code> symbol specifies the default iterator for an object. Used by <a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\"><code>for...of</code></a>.</p>"
    },
    "symbol.keyfor": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/keyfor",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.keyFor(sym)</code></strong> method retrieves a shared symbol key from the global symbol registry for the given symbol.</p>",
      "parameters": {
        "sym": "Symbol, required. The symbol to find a key for."
      },
      "returns": "<p>A string representing the key for the given symbol if one is found on the global registry; otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "symbol.match": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/match",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Symbol.match</strong></code> well-known symbol specifies the matching of a regular expression against a string. This function is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/match\"><code>String.prototype.match()</code></a> method.</p>"
    },
    "symbol.matchall": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/matchall",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>Symbol.matchAll</strong></code> well-known symbol returns an iterator, that yields matches of the regular expression against a string. This function is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/matchAll\"><code>String.prototype.matchAll()</code></a> method.</p>"
    },
    "symbol.replace": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/replace",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.replace</code></strong> well-known symbol specifies the method that replaces matched substrings of a string. This function is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a> method.</p>\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@replace\"><code>RegExp.prototype[@@replace]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>String.prototype.replace()</code></a>.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.replace</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "symbol.search": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/search",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.search</code></strong> well-known symbol specifies the method that returns the index within a string that matches the regular expression. This function is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a> method.</p>\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@search\"><code>RegExp.prototype[@@search]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/search\"><code>String.prototype.search()</code></a>.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.search</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "symbol.species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The well-known symbol <code><strong>Symbol.species</strong></code> specifies a function-valued property that the constructor function uses to create derived objects.</p>"
    },
    "symbol.split": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/split",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.split</code></strong> well-known symbol specifies the method that splits a string at the indices that match a regular expression. This function is called by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a> method.</p>\n<p>For more information, see <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/RegExp/@@split\"><code>RegExp.prototype[@@split]()</code></a> and <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/String/split\"><code>String.prototype.split()</code></a>.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.split</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "symbol.symbol": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/symbol",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>Symbol()</code> constructor returns a value of type <strong>symbol</strong>, but is incomplete as a constructor because it does not support the syntax \"<code>new Symbol()</code>\" and it is not intended to be subclassed. It may be used as the value of an <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Classes/extends\">extends</a></code> clause of a <code>class</code> definition but a <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Operators/super\">super</a></code> call to it will cause an exception.</p>",
      "parameters": {
        "description": "A string. A description of the symbol which can be used for debugging but not to access the symbol itself."
      }
    },
    "symbol.toprimitive": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/toprimitive",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.toPrimitive</code></strong> is a symbol that specifies a function valued property that is called to convert an object to a corresponding primitive value.</p>"
    },
    "symbol.tosource": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/tosource",
      "status": [],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <strong><code>toSource()</code></strong> method returns a string representing the source code of the object.</p>\n<p>This method is usually called internally by JavaScript.</p>",
      "returns": "<p>A string representing the source code of the object.</p>"
    },
    "symbol.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> object.</p>",
      "returns": "<p>A string representing the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> object.</p>"
    },
    "symbol.tostringtag": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/tostringtag",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.toStringTag</code></strong> well-known symbol is a string valued property that is used in the creation of the default string description of an object. It is accessed internally by the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Object/toString\"><code>Object.prototype.toString()</code></a> method.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>Symbol.toStringTag</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "symbol.unscopables": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/unscopables",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Symbol.unscopables</code></strong> well-known symbol is used to specify an object value of whose own and inherited property names are excluded from the <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/with\">with</a></code> environment bindings of the associated object.</p>"
    },
    "symbol.valueof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/symbol/valueof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>valueOf()</code></strong> method returns the primitive value of a Symbol object.</p>",
      "returns": "<p>The primitive value of the specified <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Symbol\"><code>Symbol</code></a> object.</p>"
    },
    "syntaxerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/syntaxerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>SyntaxError</strong></code> object represents an error when trying to interpret syntactically invalid code. It is thrown when the JavaScript engine encounters tokens or token order that does not conform to the syntax of the language when parsing code.</p>"
    },
    "syntaxerror.syntaxerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/syntaxerror/syntaxerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>SyntaxError</code></strong> constructor creates a new error object that represents an error when trying to interpret syntactically invalid code.</p>",
      "parameters": {
        "message": "Human-readable description of the error",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "typedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><em>TypedArray</em></strong> object describes an array-like view of an underlying <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">binary data buffer</a>. There is no global property named <code>TypedArray</code>, nor is there a directly visible <code>TypedArray</code> constructor. Instead, there are a number of different global properties, whose values are typed array constructors for specific element types, listed below. On the following pages you will find common properties and methods that can be used with any typed array containing elements of any type.</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code><var>typedArray</var></code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "typedarray.@@iterator": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/@@iterator",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The initial value of the <code>@@iterator</code> property is the same function object as the initial value of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/values\"><code>values</code></a> property.</p>",
      "returns": "<p>The array <strong>iterator</strong> function, which is the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/values\"><code>values()</code></a> function by default.</p>"
    },
    "typedarray.@@species": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/@@species",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>TypedArray[@@species]</strong></code> accessor property returns the constructor of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array</a>.</p>"
    },
    "typedarray.buffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/buffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>buffer</code></strong> accessor property represents the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> referenced by a <em>TypedArray</em> at construction time.</p>"
    },
    "typedarray.bytelength": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/bytelength",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteLength</code></strong> accessor property represents the length (in bytes) of a typed array.</p>"
    },
    "typedarray.byteoffset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/byteoffset",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>byteOffset</code></strong> accessor property represents the offset (in bytes) of a typed array from the start of its <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</p>"
    },
    "typedarray.copywithin": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/copywithin",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>copyWithin()</strong></code> method copies the sequence of array elements within the array to the position starting at <code><var>target</var></code>. The copy is taken from the index positions of the second and third arguments <code><var>start</var></code> and <code><var>end</var></code>. The <code><var>end</var></code> argument is optional and defaults to the length of the array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/copyWithin\"><code>Array.prototype.copyWithin</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "target": "Target start index position where to copy the elements to.",
        "start": "Source start index position where to start copying elements from.",
        "end": "Optional. Source end index position where to end copying elements from."
      },
      "returns": "<p>The modified array.</p>"
    },
    "typedarray.entries": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/entries",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>entries()</code></strong> method returns a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array\"><code>Array</code></a> iterator object that contains the key/value pairs for each index in the array.</p>",
      "returns": "<p>A new array iterator object.</p>"
    },
    "typedarray.every": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/every",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>every()</code></strong> method tests whether all elements in the typed array pass the test implemented by the provided function. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/every\"><code>Array.prototype.every()</code></a><em>.</em> <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "callback": "A function to test for each element, taking three arguments:\n<dl>\n<dt><code><var>element</var></code></dt>\n<dd>The current element being processed in the typed array.</dd>\n<dt><code><var>index</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of the current element being processed in the typed array.</dd>\n<dt><code><var>array</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The typed array <code>every</code> was called upon.</dd>\n</dl>",
        "thisArg": "A value to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p><code>true</code> if the callback function returns a <a href=\"$MDN_URL$/Glossary/truthy\">truthy</a> value for every array element; otherwise, <code>false</code>.</p>"
    },
    "typedarray.fill": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/fill",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>fill()</code></strong> method fills all the elements of a typed array from a start index to an end index with a static value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/fill\"><code>Array.prototype.fill()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "value": "Value to fill the typed array with.",
        "start": "Start index. Defaults to 0.",
        "end": "End index (not included). Defaults to\n<code>this.length</code>\n."
      },
      "returns": "<p>The modified array.</p>"
    },
    "typedarray.filter": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/filter",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>filter()</code></strong> method creates a new typed array with all elements that pass the test implemented by the provided function. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/filter\"><code>Array.prototype.filter()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "callback": "Function to test each element of the typed array. Invoked with arguments\n<code>(<var>element</var>, <var>index</var>, <var>typedarray</var>)</code>\n. Return\n<code>true</code>\nto keep the element,\n<code>false</code>\notherwise.",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p>A new typed array with the elements that pass the test.</p>"
    },
    "typedarray.find": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/find",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>find()</code></strong> method returns a value of an element in the typed array, if it satisfies the provided testing function. Otherwise <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/findIndex\"><code>findIndex()</code></a> method, which returns the <strong>index</strong> of a found element in the typed array instead of its value.</p>",
      "parameters": {
        "callback": "Function to execute on each value in the typed array, taking three arguments:\n<dl>\n<dt><code><var>element</var></code></dt>\n<dd>The current element being processed in the typed array.</dd>\n<dt><code><var>index</var></code></dt>\n<dd>The index of the current element being processed in the typed array.</dd>\n<dt><code><var>array</var></code></dt>\n<dd>The array <code>find()</code> was called upon.</dd>\n</dl>",
        "thisArg": "Object to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p>A value in the array if an element passes the test; otherwise, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "typedarray.findindex": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/findindex",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>findIndex()</code></strong> method returns an <strong>index</strong> in the typed array, if an element in the typed array satisfies the provided testing function. Otherwise -1 is returned.</p>\n<p>See also the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray/find\"><code>find()</code></a> method, which returns the <strong>value</strong> of a found element in the typed array instead of its index.</p>",
      "parameters": {
        "callback": "Function to execute on each value in the typed array, taking three arguments:\n<dl>\n<dt><code><var>element</var></code></dt>\n<dd>The current element being processed in the typed array.</dd>\n<dt><code><var>index</var></code></dt>\n<dd>The index of the current element being processed in the typed array.</dd>\n<dt><code><var>array</var></code></dt>\n<dd>The typed array <code>findIndex()</code> was called upon.</dd>\n</dl>",
        "thisArg": "Object to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p>An index in the array if an element passes the test; otherwise, <code>-1</code>.</p>"
    },
    "typedarray.foreach": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/foreach",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>forEach()</code></strong> method executes a provided function once per array element. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/forEach\"><code>Array.prototype.forEach()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "callback": "Function that produces an element of the new typed array, taking three arguments:\n<dl>\n<dt><code><var>currentValue</var></code></dt>\n<dd>The current element being processed in the typed array.</dd>\n<dt><code><var>index</var></code></dt>\n<dd>The index of the current element being processed in the array.</dd>\n<dt><code><var>array</var></code></dt>\n<dd>The array <code>forEach()</code> was called upon.</dd>\n</dl>",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code><var>callback</var></code>\n."
      },
      "returns": "<p><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>.</p>"
    },
    "typedarray.from": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/from",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code><var>TypedArray</var>.from()</code></strong> method creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array</a> from an array-like or iterable object. This method is nearly the same as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/from\"><code>Array.from()</code></a>.</p>",
      "parameters": {
        "source": "An array-like or iterable object to convert to a typed array.",
        "mapFn": "Map function to call on every element of the typed array.",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code><var>mapFn</var></code>\n."
      },
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance.</p>"
    },
    "typedarray.includes": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/includes",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>includes()</strong></code> method determines whether a typed array includes a certain element, returning <code>true</code> or <code>false</code> as appropriate. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/includes\"><code>Array.prototype.includes()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "searchElement": "The element to search for.",
        "fromIndex": "Optional. The position in this array at which to begin searching for\n<code>searchElement</code>\n; defaults to 0."
      },
      "returns": "<p>A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Boolean\"><code>Boolean</code></a>.</p>"
    },
    "typedarray.indexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/indexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>indexOf()</strong></code> method returns the first index at which a given element can be found in the typed array, or -1 if it is not present. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/indexOf\"><code>Array.prototype.indexOf()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "searchElement": "Element to locate in the typed array.",
        "fromIndex": "The index to start the search at. If the index is greater than or equal to the typed array's length, -1 is returned, which means the typed array will not be searched. If the provided index value is a negative number, it is taken as the offset from the end of the typed array. Note: if the provided index is negative, the typed array is still searched from front to back. If the calculated index is less than 0, then the whole typed array will be searched. Default: 0 (entire typed array is searched)."
      },
      "returns": "<p>The first index of the element in the array; <code>-1</code> if not found.</p>"
    },
    "typedarray.join": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/join",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>join()</code></strong> method joins all elements of an array into a string. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/join\"><code>Array.prototype.join()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "separator": "Specifies a string to separate each element. The\n<code><var>separator</var></code>\nis converted to a string if necessary. If omitted, the typed array elements are separated with a comma (\",\")."
      },
      "returns": "<p>A string with all array elements joined.</p>"
    },
    "typedarray.keys": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/keys",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>keys()</code></strong> method returns a new array iterator object that contains the keys for each index in the array.</p>",
      "returns": "<p>A new array iterator object.</p>"
    },
    "typedarray.lastindexof": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/lastindexof",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>lastIndexOf()</strong></code> method returns the last index at which a given element can be found in the typed array, or -1 if it is not present. The typed array is searched backwards, starting at <code>fromIndex</code>. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf\"><code>Array.prototype.lastIndexOf()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "searchElement": "Element to locate in the typed array.",
        "fromIndex": "Optional. The index at which to start searching backwards. Defaults to the typed array's length, i.e. the whole typed array will be searched. If the index is greater than or equal to the length of the typed array, the whole typed array will be searched. If negative, it is taken as the offset from the end of the typed array. Note that even when the index is negative, the typed array is still searched from back to front. If the calculated index is less than 0, -1 is returned, i.e. the typed array will not be searched."
      },
      "returns": "<p>The last index of the element in the array; <code>-1</code> if not found.</p>"
    },
    "typedarray.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/length",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>length</code></strong> accessor property represents the length (in elements) of a typed array.</p>"
    },
    "typedarray.map": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/map",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>map()</code></strong> method creates a new typed array with the results of calling a provided function on every element in this typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/map\"><code>Array.prototype.map()</code></a><em>.</em> <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "mapFn": "A callback function that produces an element of the new typed array, taking three arguments:<br>\n<dl>\n<dt><code><var>currentValue</var></code></dt>\n<dd>The current element being processed in the typed array.</dd>\n<dt><code><var>index</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The index of the current element being processed in the typed array.</dd>\n<dt><code><var>array</var></code> <span class=\"badge inline optional\">Optional</span></dt>\n<dd>The typed array <code>map()</code> was called upon.</dd>\n</dl>",
        "thisArg": "Value to use as\n<code>this</code>\nwhen executing\n<code><var>mapFn</var></code>\n."
      },
      "returns": "<p>A new typed array.</p>"
    },
    "typedarray.name": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/name",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong><em>TypedArray</em>.name</strong></code> property represents a string value of the typed array constructor name.</p>\n<div><table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>TypedArray.name</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></div>"
    },
    "typedarray.of": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/of",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code><var>TypedArray</var>.of()</code></strong> method creates a new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array</a> from a variable number of arguments. This method is nearly the same as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/of\"><code>Array.of()</code></a>.</p>",
      "parameters": {
        "elementN": "Elements of which to create the typed array."
      },
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> instance.</p>"
    },
    "typedarray.reduce": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reduce",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>reduce()</code></strong> method applies a function against an accumulator and each value of the typed array (from left-to-right) has to reduce it to a single value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/Reduce\"><code>Array.prototype.reduce()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "callback": "Function to execute on each value in the typed array, taking four arguments:\n<dl>\n<dt><code><var>previousValue</var></code></dt>\n<dd>The value previously returned in the last invocation of the callback, or <code>initialValue</code>, if supplied (see below).</dd>\n<dt><code><var>currentValue</var></code></dt>\n<dd>The current element being processed in the typed array.</dd>\n<dt><code><var>index</var></code></dt>\n<dd>The index of the current element being processed in the typed array.</dd>\n<dt><code><var>array</var></code></dt>\n<dd>The typed array <code>reduce()</code> was called upon.</dd>\n</dl>",
        "initialValue": "Optional. Object to use as the first argument to the first call of the\n<code><var>callback</var></code>\n."
      },
      "returns": "<p>The value that results from the reduction.</p>"
    },
    "typedarray.reduceright": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reduceright",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>reduceRight()</code></strong> method applies a function against an accumulator and each value of the typed array (from right-to-left) has to reduce it to a single value. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight\"><code>Array.prototype.reduceRight()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "callback": "Function to execute on each value in the typed array, taking four arguments:\n<dl>\n<dt><code><var>previousValue</var></code></dt>\n<dd>The value previously returned in the last invocation of the callback, or <code>initialValue</code>, if supplied (see below).</dd>\n<dt><code><var>currentValue</var></code></dt>\n<dd>The current element being processed in the typed array.</dd>\n<dt><code><var>index</var></code></dt>\n<dd>The index of the current element being processed in the typed array.</dd>\n<dt><code><var>array</var></code></dt>\n<dd>The typed array <code>reduceRight()</code> was called upon.</dd>\n</dl>",
        "initialValue": "Optional. Object to use as the first argument to the first call of the\n<code><var>callback</var></code>\n."
      },
      "returns": "<p>The value that results from the reduction.</p>"
    },
    "typedarray.reverse": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/reverse",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>reverse()</strong></code> method reverses a typed array in place. The first typed array element becomes the last and the last becomes the first. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/reverse\"><code>Array.prototype.reverse()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "returns": "<p>The reversed array.</p>"
    },
    "typedarray.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>set()</code></strong> method stores multiple values in the typed array, reading input values from a specified array.</p>",
      "parameters": {
        "array": "The array from which to copy values. All values from the source array are copied into the target array, unless the length of the source array plus the offset exceeds the length of the target array, in which case an exception is thrown.",
        "typedarray": "If the source array is a typed array, the two arrays may share the same underlying\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n; the JavaScript engine will intelligently\n<strong>copy</strong>\nthe source range of the buffer to the destination range.",
        "offset": "The offset into the target array at which to begin writing values from the source array. If this value is omitted, 0 is assumed (that is, the source array will overwrite values in the target array starting at index 0)."
      }
    },
    "typedarray.slice": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/slice",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>slice()</code></strong> method returns a new typed array (with a new underlying buffer), that contains a copy of a portion of the original typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/slice\"><code>Array.prototype.slice()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "begin": "Zero-based index at which to begin extraction.A negative index can be used, indicating an offset from the end of the sequence.\n<code>slice(-2)</code>\nextracts the last two elements in the sequence.If\n<code><var>begin</var></code>\nis undefined,\n<code>slice</code>\nbegins from index\n<code>0</code>\n.",
        "end": "Zero-based index\n<em>before</em>\nwhich to end extraction.\n<code>slice</code>\nextracts up to but not including\n<code><var>end</var></code>\n.For example,\n<code>slice(1,4)</code>\nextracts the second element through the fourth element (elements indexed 1, 2, and 3).A negative index can be used, indicating an offset from the end of the sequence.\n<code>slice(2,-1)</code>\nextracts the third element through the second-to-last element in the sequence.If\n<code><var>end</var></code>\nis omitted,\n<code>slice</code>\nextracts through the end of the sequence (\n<code>typedarray.length</code>\n)."
      },
      "returns": "<p>A new typed array containing the extracted elements.</p>"
    },
    "typedarray.some": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/some",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>some()</strong></code> method tests whether some element in the typed array passes the test implemented by the provided function. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/some\"><code>Array.prototype.some()</code></a><em>.</em> <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "callback": "Function to test for each element, taking three arguments:\n<dl>\n<dt><code>currentValue</code></dt>\n<dd>The current element being processed in the typed array.</dd>\n<dt><code>index</code></dt>\n<dd>The index of the current element being processed in the typed array.</dd>\n<dt><code>array</code></dt>\n<dd>The typed array <code>some</code> was called upon.</dd>\n</dl>",
        "thisArg": "Optional. Value to use as\n<code>this</code>\nwhen executing\n<code>callback</code>\n."
      },
      "returns": "<p><code><strong>true</strong></code> if the callback function returns a <a href=\"$MDN_URL$/Glossary/Truthy\" data-flaw=\"link1\">truthy</a> value for any array element; otherwise, <code><strong>false</strong></code>.</p>"
    },
    "typedarray.sort": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/sort",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>sort()</strong></code> method sorts the elements of a typed array numerically <em>in place</em> and returns the typed array. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/sort\"><code>Array.prototype.sort()</code></a>, except that sorts the values numerically instead of as strings. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "parameters": {
        "compareFunction": "Specifies a function that defines the sort order."
      },
      "returns": "<p>The sorted typed array.</p>"
    },
    "typedarray.subarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/subarray",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>subarray()</code></strong> method returns a new <em>TypedArray</em> on the same <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> store and with the same element types as for this <em>TypedArray</em> object. The begin offset is <strong>inclusive</strong> and the end offset is <strong>exclusive</strong>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a>.</p>",
      "parameters": {
        "begin": "Element to begin at. The offset is inclusive. The whole array will be included in the new view if this value is not specified.",
        "end": "Element to end at. The offset is exclusive. If not specified, all elements from the one specified by\n<code><var>begin</var></code>\nto the end of the array are included in the new view."
      },
      "returns": "<p>A new <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray\"><code>TypedArray</code></a> object.</p>"
    },
    "typedarray.tolocalestring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/tolocalestring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toLocaleString()</code></strong> method returns a string representing the elements of the typed array. The elements are converted to strings and are separated by a locale-specific string (such as a comma “,”). This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString\"><code>Array.prototype.toLocaleString()</code></a> and, as the typed array elements are numbers, the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\"><code>Number.prototype.toLocaleString()</code></a> applies for each element. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "returns": "<p>A string representing the elements of the typed array.</p>"
    },
    "typedarray.tostring": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/tostring",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>toString()</code></strong> method returns a string representing the specified array and its elements. This method has the same algorithm as <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Array/toString\"><code>Array.prototype.toString()</code></a>. <em>TypedArray</em> is one of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/TypedArray#TypedArray_objects\">typed array types</a> here.</p>",
      "returns": "<p>A string representing the elements of the typed array.</p>"
    },
    "typedarray.values": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typedarray/values",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>values()</code></strong> method returns a new array iterator object that contains the values for each index in the array.</p>",
      "returns": "<p>A new array iterator object.</p>"
    },
    "typeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>TypeError</strong></code> object represents an error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.</p>\n<p>A <code>TypeError</code> may be thrown when:</p>\n<ul>\n<li>an operand or argument passed to a function is incompatible with the type expected by that operator or function; or</li>\n<li>when attempting to modify a value that cannot be changed; or</li>\n<li>when attempting to use a value in an inappropriate way.</li>\n</ul>"
    },
    "typeerror.typeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/typeerror/typeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>TypeError()</code></strong> constructor creates a new error when an operation could not be performed, typically (but not exclusively) when a value is not of the expected type.</p>",
      "parameters": {
        "message": "Human-readable description of the error",
        "fileName": "The name of the file containing the code that caused the exception",
        "lineNumber": "The line number of the code that caused the exception"
      }
    },
    "uint16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint16array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint16Array</code></strong> typed array represents an array of 16-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "uint16array.uint16array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint16array/uint16array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint16Array()</code></strong> typed array constructor creates an array of 16-bit unsigned integers in the platform byte order.</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code>typedArray</code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "uint32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint32Array</code></strong> typed array represents an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "uint32array.uint32array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint32array/uint32array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint32Array()</code></strong> typed array constructor creates an array of 32-bit unsigned integers in the platform byte order. If control over byte order is needed, use <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/DataView\"><code>DataView</code></a> instead. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code>typedArray</code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "uint8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint8Array</code></strong> typed array represents an array of 8-bit unsigned integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "uint8array.uint8array": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8array/uint8array",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint8Array()</code></strong> constructor creates a typed array of 8-bit unsigned integers. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code>typedArray</code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "uint8clampedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8clampedarray",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint8ClampedArray</code></strong> typed array represents an array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>"
    },
    "uint8clampedarray.uint8clampedarray": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uint8clampedarray/uint8clampedarray",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>Uint8ClampedArray()</code></strong> constructor creates a typed array of 8-bit unsigned integers clamped to 0-255; if you specified a value that is out of the range of [0,255], 0 or 255 will be set instead; if you specify a non-integer, the nearest integer will be set. The contents are initialized to <code>0</code>. Once established, you can reference elements in the array using the object's methods, or using standard array index syntax (that is, using bracket notation).</p>",
      "parameters": {
        "length": "When called with a\n<code><var>length</var></code>\nargument, an internal array buffer is created in memory, of size\n<code><var>length</var></code>\n<em> multiplied by <code>BYTES_PER_ELEMENT</code></em>\nbytes, containing zeros.",
        "typedArray": "When called with a\n<code>typedArray</code>\nargument, which can be an object of any of the typed array types (such as\n<code>Int32Array</code>\n), the\n<code><var>typedArray</var></code>\ngets copied into a new typed array. Each value in\n<code><var>typedArray</var></code>\nis converted to the corresponding type of the constructor before being copied into the new array. The length of the new typed array will be same as the length of the\n<code><var>typedArray</var></code>\nargument.",
        "object": "When called with an\n<code><var>object</var></code>\nargument, a new typed array is created as if by the\n<code><var>TypedArray</var>.from()</code>\nmethod.",
        "buffer, byteOffset, length": "When called with a\n<code><var>buffer</var></code>\n, and optionally a\n<code><var>byteOffset</var></code>\nand a\n<code><var>length</var></code>\nargument, a new typed array view is created that views the specified\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>\n. The\n<code><var>byteOffset</var></code>\nand\n<code><var>length</var></code>\nparameters specify the memory range that will be exposed by the typed array view. If both are omitted, all of\n<code><var>buffer</var></code>\nis viewed; if only\n<code><var>length</var></code>\nis omitted, the remainder of\n<code><var>buffer</var></code>\nis viewed."
      }
    },
    "undefined": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/undefined",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The global <code><strong>undefined</strong></code> property represents the primitive value <code><a href=\"$MDN_URL$/Glossary/Undefined\">undefined</a></code>. It is one of JavaScript's <a href=\"$MDN_URL$/Glossary/Primitive\">primitive types</a>.</p>\n<table class=\"standard-table\">\n<thead>\n<tr>\n<th class=\"header\" colspan=\"2\">Property attributes of <code>undefined</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Writable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Enumerable</td>\n<td>no</td>\n</tr>\n<tr>\n<td>Configurable</td>\n<td>no</td>\n</tr>\n</tbody>\n</table></p>"
    },
    "unescape": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/unescape",
      "status": [
        "StandardTrack",
        "Deprecated"
      ],
      "doc": "<div class=\"warning notecard\">Warning: Although <code>unescape()</code> is not strictly deprecated (as in \"removed from the Web standards\"), it is defined in <a href=\"https://www.ecma-international.org/ecma-262/9.0/index.html#sec-additional-ecmascript-features-for-web-browsers\">Annex B</a> of the ECMA-262 standard, whose introduction states:\n<blockquote>… All of the language features and behaviours specified in this annex have one or more undesirable characteristics and in the absence of legacy usage would be removed from this specification. …<br>\n… Programmers should not use or assume the existence of these features and behaviours when writing new ECMAScript code. …</blockquote>\n</div>\n<p>The <code><strong>unescape()</strong></code> function computes a new string in which hexadecimal escape sequences are replaced with the character that it represents. The escape sequences might be introduced by a function like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/escape\"><code>escape</code></a>. Usually, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/decodeURI\"><code>decodeURI</code></a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\"><code>decodeURIComponent</code></a> are preferred over <code>unescape</code>.</p>\n<div class=\"note notecard\"><strong>Note:</strong> Do not use <code>unescape</code> to decode URIs, use <code>decodeURI</code> instead.</div>",
      "parameters": {
        "str": "A string to be decoded."
      },
      "returns": "<p>A new string in which certain characters have been unescaped.</p>"
    },
    "uneval": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/uneval",
      "status": [
        "Deprecated"
      ],
      "doc": "<div class=\"notecard warning\">\n<h4 id=\"Non-standard\">Non-standard</h4>\n<p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future.</p>\n</div><div class=\"notecard obsolete\">\n<h4 id=\"Obsolete_since_Gecko_74_Firefox_74_Thunderbird_74_SeaMonkey_2.71\">Obsolete since Gecko 74 (Firefox 74 / Thunderbird 74 / SeaMonkey 2.71)</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div>\n<p>The <code><strong>uneval()</strong></code> function creates a string representation of the source code of an Object.</p>",
      "parameters": {
        "object": "A JavaScript expression or statement."
      },
      "returns": "<p>A string representing the source code of <code><var>object</var></code>.</p>\n\n<div class=\"note notecard\"><strong>Note:</strong> This will <em>not</em> return a JSON representation of <code><var>object</var></code>.</div>"
    },
    "urierror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/urierror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>URIError</strong></code> object represents an error when a global URI handling function was used in a wrong way.</p>"
    },
    "urierror.urierror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/urierror/urierror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>URIError()</code></strong> constructor creates an error when a global URI handling function was used in a wrong way.</p>",
      "parameters": {
        "message": "Human-readable description of the error.",
        "fileName": "The name of the file containing the code that caused the exception.",
        "lineNumber": "The line number of the code that caused the exception."
      }
    },
    "weakmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">The <strong><code>WeakMap</code></strong> object is a collection of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.</span></p>\n<p>You can learn more about <code>WeakMap</code>s in the <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections#WeakMap_object\">WeakMap object</a> guide (under <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a>).</p>"
    },
    "weakmap.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/clear",
      "status": [
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <code><strong>clear()</strong></code> method used to remove all elements from a <code>WeakMap</code> object, but is no longer part of ECMAScript and its implementations.</p>"
    },
    "weakmap.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/delete",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>delete()</code></strong> method removes the specified element from a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakMap\"><code>WeakMap</code></a> object.</p>",
      "parameters": {
        "key": "The key of the element to remove from the\n<code>WeakMap</code>\nobject."
      },
      "returns": "<p><code>true</code> if an element in the <code>WeakMap</code> object has been removed successfully. <code>false</code> if the key is not found in the <code>WeakMap</code> or if the key is not an object.</p>"
    },
    "weakmap.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/get",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>get()</code></strong> method returns a specified element from a <code>WeakMap</code> object.</p>",
      "parameters": {
        "key": "Required. The key of the element to return from the\n<code>WeakMap</code>\nobject."
      },
      "returns": "<p>The element associated with the specified key in the <code>WeakMap</code> object. If the key can't be found, <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a> is returned.</p>"
    },
    "weakmap.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>has()</code></strong> method returns a boolean indicating whether an element with the specified key exists in the <code>WeakMap</code> object or not.</p>",
      "parameters": {
        "key": "Required. The key of the element to test for presence in the\n<code>WeakMap</code>\nobject."
      },
      "returns": "<dl>\n <dt>Boolean</dt>\n <dd>Returns <code>true</code> if an element with the specified key exists in the <code>WeakMap</code> object; otherwise <code>false</code>.</dd>\n</dl>"
    },
    "weakmap.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>set()</code></strong> method adds a new element with a specified key and value to a <code>WeakMap</code> object.</p>",
      "parameters": {
        "key": "Required. Must be\n<code>object</code>\n. The key of the element to add to the\n<code>WeakMap</code>\nobject.",
        "value": "Required. Any value. The value of the element to add to the\n<code>WeakMap</code>\nobject."
      },
      "returns": "<p>The <code>WeakMap</code> object.</p>"
    },
    "weakmap.weakmap": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakmap/weakmap",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WeakMap()</code> constructor</strong> creates <code>WeakMap</code> objects which are a collections of key/value pairs in which the keys are weakly referenced. The keys must be objects and the values can be arbitrary values.</p>\n<p>You can learn more about <code>WeakMap</code>s in the section <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections#WeakMap_object\">WeakMap object</a> in <a href=\"$MDN_URL$/Web/JavaScript/Guide/Keyed_collections\">Keyed collections</a>.</p>",
      "parameters": {
        "iterable": "Iterable is an Array or other iterable object whose elements are key-value pairs (2-element Arrays). Each key-value pair will be added to the new WeakMap. null is treated as undefined."
      }
    },
    "weakref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>WeakRef</code></strong> object lets you hold a weak reference to another object, without preventing that object from getting garbage-collected.</p>"
    },
    "weakref.deref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref/deref",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code>deref</code> method returns the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakRef\"><code>WeakRef</code></a> instance's target object, or <code>undefined</code> if the target object has been garbage-collected.</p>",
      "returns": "<p>The target object of the WeakRef, or <code>undefined</code> if the object has been garbage-collected.</p>"
    },
    "weakref.weakref": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakref/weakref",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WeakRef</code></strong> constructor creates a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WeakRef\"><code>WeakRef</code></a> object referring to a given target object.</p>",
      "parameters": {
        "targetObject": "The target object the WeakRef should refer to (also called the\n<em>referent</em>\n)."
      }
    },
    "weakset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WeakSet</code></strong> object lets you store weakly held <em>objects</em> in a collection.</p>"
    },
    "weakset.add": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/add",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>add()</strong></code> method appends a new object to the end of a <code>WeakSet</code> object.</p>",
      "parameters": {
        "value": "Required. The object to add to the\n<code>WeakSet</code>\ncollection."
      },
      "returns": "<p>The <code>WeakSet</code> object.</p>"
    },
    "weakset.clear": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/clear",
      "status": [
        "Deprecated"
      ],
      "doc": "<div> <div class=\"notecard obsolete\">\n<h4 id=\"Obsolete\">Obsolete</h4>\n<p>This feature is obsolete. Although it may still work in some browsers, its use is discouraged since it could be removed at any time. Try to avoid using it.</p>\n</div></div>\n<p>The <code><strong>clear()</strong></code> method used to remove all elements from a <code>WeakSet</code> object, but is no longer part of ECMAScript and its implementations.</p>"
    },
    "weakset.delete": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/delete",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>delete()</code></strong> method removes the specified element from a <code>WeakSet</code> object.</p>",
      "parameters": {
        "value": "Required. The object remove from the\n<code>WeakSet</code>\nobject."
      },
      "returns": "<p><code>true</code> if an element in the <code>WeakSet</code> object has been removed successfully. <code>false</code> if the <code><var>value</var></code> is not found in the <code>WeakSet</code> or if the <code><var>value</var></code> is not an object.</p>"
    },
    "weakset.has": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/has",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>has()</code></strong> method returns a boolean indicating whether an object exists in a <code>WeakSet</code> or not.</p>",
      "parameters": {
        "value": "Required. The object to test for presence in the\n<code>WeakSet</code>\n."
      },
      "returns": "<dl>\n <dt>Boolean</dt>\n <dd>Returns <code>true</code> if an element with the specified value exists in the <code>WeakSet</code> object; otherwise <code>false</code>.</dd>\n</dl>"
    },
    "weakset.weakset": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/weakset/weakset",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WeakSet</code></strong> constructor lets you create <code>WeakSet</code> objects that store weakly held <em>objects</em> in a collection.</p>",
      "parameters": {
        "iterable": "If an\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Statements/for...of\">iterable object</a>\nis passed, all of its elements will be added to the new\n<code>WeakSet</code>\n. null is treated as undefined."
      }
    },
    "webassembly": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly</code></strong> JavaScript object acts as the namespace for all <a href=\"$MDN_URL$/WebAssembly\">WebAssembly</a>-related functionality.</p>\n<p>Unlike most other global objects, <code>WebAssembly</code> is not a constructor (it is not a function object). You can compare it to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Math\"><code>Math</code></a>, which is also a namespace object for mathematical constants and functions, or to <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/Intl\"><code>Intl</code></a> which is the namespace object for internationalization constructors and other language-sensitive functions.</p>"
    },
    "webassembly.compile": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/compile",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.compile()</code></strong> function compiles WebAssembly binary code into a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> object. This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiate\"><code>WebAssembly.instantiate()</code></a> function should be used).</p>",
      "parameters": {
        "bufferSource": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Typed_arrays\">typed array</a>\nor\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a>\ncontaining the binary code of the .wasm module you want to compile."
      },
      "returns": "<p>A <code>Promise</code> that resolves to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> object representing the compiled module.</p>"
    },
    "webassembly.compileerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/compileerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.CompileError</strong></code> object indicates an error during WebAssembly decoding or validation.</p>"
    },
    "webassembly.compileerror.compileerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/compileerror/compileerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.CompileError()</strong></code> constructor creates a new WebAssembly <code>CompileError</code> object, which indicates an error during WebAssembly decoding or validation.</p>",
      "parameters": {
        "message": "Human-readable description of the error.",
        "fileName": "The name of the file containing the code that caused the exception.",
        "lineNumber": "The line number of the code that caused the exception."
      }
    },
    "webassembly.compilestreaming": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/compilestreaming",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.compileStreaming()</code></strong> function compiles a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> directly from a streamed underlying source.  This function is useful if it is necessary to a compile a module before it can be instantiated (otherwise, the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> function should be used).</p>",
      "parameters": {
        "source": "A\n<a href=\"$MDN_URL$/Web/API/Response\" ><code>Response</code></a>\nobject or a promise that will fulfill with one, representing the underlying source of a .wasm module you want to stream and compile."
      },
      "returns": "<p>A <code>Promise</code> that resolves to a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> object representing the compiled module.</p>"
    },
    "webassembly.global": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/global",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>WebAssembly.Global</code></strong> object represents a global variable instance, accessible from both JavaScript and importable/exportable across one or more <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> instances. This allows dynamic linking of multiple modules.</p>"
    },
    "webassembly.global.global": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/global/global",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>WebAssembly.Global()</code></strong> constructor creates a new <code>Global</code> object representing a global variable instance, accessible from both JavaScript and importable/exportable across one or more <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> instances. This allows dynamic linking of multiple modules.</p>",
      "parameters": {
        "descriptor": "A\n<code>GlobalDescriptor</code>\ndictionary object, which contains two properties:\n<ul>\n<li><code>value</code>: A <a href=\"$MDN_URL$/Web/API/USVString\" ><code>USVString</code></a> representing the data type of the global. This can be one of <code>i32</code>, <code>i64</code>, <code>f32</code>, and <code>f64</code>.</li>\n<li><code>mutable</code>: A boolean value that determines whether the global is mutable or not. By default, this is <code>false</code>.</li>\n</ul>",
        "value": "The value the variable contains. This can be any value, as long as its type matches the variable's data type. If no value is specified, a typed 0 value is used, as specified by the\n<a href=\"https://webassembly.github.io/spec/js-api/#defaultvalue\"><code>DefaultValue</code> algorithm</a>\n."
      }
    },
    "webassembly.instance": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/instance",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>WebAssembly.Instance</code></strong> object is a stateful, executable instance of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a>. <code>Instance</code> objects contain all the <a href=\"$MDN_URL$/WebAssembly/Exported_functions\">Exported WebAssembly functions</a> that allow calling into WebAssembly code from JavaScript.</p>"
    },
    "webassembly.instance.exports": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/instance/exports",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>exports</code></strong> readonly property of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance\"><code>WebAssembly.Instance</code></a> object prototype returns an object containing as its members all the functions exported from the WebAssembly module instance, to allow them to be accessed and used by JavaScript.</p>\n<pre class=\"syntaxbox notranslate\">instance.exports</pre>"
    },
    "webassembly.instance.instance": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/instance/instance",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.Instance()</code></strong> constructor creates a new <code>Instance</code> object which is a stateful, executable instance of a <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a>.</p>",
      "parameters": {
        "module": "The\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a>\nobject to be instantiated.",
        "importObject": "An object containing the values to be imported into the newly-created\n<code>Instance</code>\n, such as functions or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory\"><code>WebAssembly.Memory</code></a>\nobjects. There must be one matching property for each declared import of\n<code>module</code>\nor else a\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError\"><code>WebAssembly.LinkError</code></a>\nis thrown."
      }
    },
    "webassembly.instantiate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/instantiate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.instantiate()</code></strong> function allows you to compile and instantiate WebAssembly code. This function has two overloads:</p>\n<ul>\n<li>The primary overload takes the WebAssembly binary code, in the form of a <a href=\"$MDN_URL$/Web/JavaScript/Typed_arrays\">typed array</a> or <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>, and performs both compilation and instantiation in one step. The returned <code>Promise</code> resolves to both a compiled <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> and its first <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance\"><code>WebAssembly.Instance</code></a>.</li>\n<li>The secondary overload takes an already-compiled <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> and returns a <code>Promise</code> that resolves to an <code>Instance</code> of that <code>Module</code>. This overload is useful if the <code>Module</code> has already been compiled.</li>\n</ul>\n<div class=\"warning notecard\">\n<p><strong>Important</strong>: This method is not the most efficient way of fetching and instantiating wasm modules. If at all possible, you should use the newer <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/instantiateStreaming\"><code>WebAssembly.instantiateStreaming()</code></a> method instead, which fetches, compiles, and instantiates a module all in one step, directly from the raw bytecode, so doesn't require conversion to an <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a>.</p>\n</div>"
    },
    "webassembly.instantiatestreaming": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/instantiatestreaming",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.instantiateStreaming()</code></strong> function compiles and instantiates a WebAssembly module directly from a streamed underlying source. This is the most efficient, optimized way to load wasm code.</p>",
      "parameters": {
        "source": "A\n<a href=\"$MDN_URL$/Web/API/Response\" ><code>Response</code></a>\nobject or a promise that will fulfill with one, representing the underlying source of a .wasm module you want to stream, compile, and instantiate.",
        "importObject": "An object containing the values to be imported into the newly-created\n<code>Instance</code>\n, such as functions or\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory\"><code>WebAssembly.Memory</code></a>\nobjects. There must be one matching property for each declared import of the compiled module or else a\n<code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/LinkError\">WebAssembly.LinkError</a></code>\nis thrown."
      },
      "returns": "<p>A <code>Promise</code> that resolves to a <code>ResultObject</code> which contains two fields:</p>\n\n<ul>\n <li><code>module</code>: A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a> object representing the compiled WebAssembly module. This <code>Module</code> can be instantiated again or shared via <a href=\"$MDN_URL$/Web/API/Worker/postMessage\">postMessage()</a>.</li>\n <li><code>instance</code>: A <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Instance\"><code>WebAssembly.Instance</code></a> object that contains all the <a href=\"$MDN_URL$/WebAssembly/Exported_functions\">Exported WebAssembly functions</a>.</li>\n</ul>"
    },
    "webassembly.linkerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/linkerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.LinkError</strong></code> object indicates an error during module instantiation (besides <a href=\"http://webassembly.org/docs/semantics/#traps\">traps</a> from the start function).</p>"
    },
    "webassembly.linkerror.linkerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/linkerror/linkerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.LinkError()</strong></code> constructor creates a new WebAssembly <code>LinkError</code> object, which indicates an error during module instantiation (besides <a href=\"http://webassembly.org/docs/semantics/#traps\">traps</a> from the start function).</p>",
      "parameters": {
        "message": "Human-readable description of the error.",
        "fileName": "The name of the file containing the code that caused the exception.",
        "lineNumber": "The line number of the code that caused the exception."
      }
    },
    "webassembly.memory": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/memory",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.Memory</strong></code> object is a resizable <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\"><code>ArrayBuffer</code></a> or <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/SharedArrayBuffer\">SharedArrayBuffer</a></code> that holds the raw bytes of memory accessed by a WebAssembly <code>Instance</code>.</p>\n<p>A memory created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.</p>"
    },
    "webassembly.memory.buffer": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/memory/buffer",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>buffer</code></strong> prototype property of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory\"><code>WebAssembly.Memory</code></a> object returns the buffer contained in the memory.</p>"
    },
    "webassembly.memory.grow": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/memory/grow",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>grow()</code></strong> protoype method of the <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory\">Memory</a></code> object increases the size of the memory instance by a specified number of WebAssembly pages.</p>",
      "parameters": {
        "number": "The number of WebAssembly pages you want to grow the memory by (each one is 64KiB in size)."
      },
      "returns": "<p>The previous size of the memory, in units of WebAssembly pages.</p>"
    },
    "webassembly.memory.memory": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/memory/memory",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.Memory()</strong></code> constructor creates a new <code>Memory</code> object whose <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Memory/buffer\"><code>buffer</code></a> property is a resizable <code><a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a></code> or <code>SharedArrayBuffer</code> that holds the raw bytes of memory accessed by a WebAssembly <code>Instance</code>.</p>\n<p>A memory created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.</p>",
      "parameters": {
        "memoryDescriptor": "An object that can contain the following members:\n<dl>\n<dt><em>initial</em></dt>\n<dd>The initial size of the WebAssembly Memory, in units of WebAssembly pages.</dd>\n<dt><em>maximum <span class=\"badge inline optional\">Optional</span></em></dt>\n<dd>The maximum size the WebAssembly Memory is allowed to grow to, in units of WebAssembly pages. When present, the <code>maximum</code> parameter acts as a hint to the engine to reserve memory up front. However, the engine may ignore or clamp this reservation request. Unshared WebAssembly memories don't need to set a <code>maximum</code>, but shared memories do.</dd>\n<dt>shared <em><span class=\"badge inline optional\">Optional</span></em></dt>\n<dd>A boolean value that defines whether the memory is a shared memory or not. If set to <code>true</code>, it is a shared memory. The default is <code>false</code>.</dd>\n</dl>"
      }
    },
    "webassembly.module": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/module",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p><span class=\"seoSummary\">A <strong><code>WebAssembly.Module</code></strong> object contains stateless WebAssembly code that has already been compiled by the browser — this can be efficiently <a href=\"$MDN_URL$/Web/API/Worker/postMessage\">shared with Workers</a>, and instantiated multiple times. </span></p>"
    },
    "webassembly.module.customsections": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/module/customsections",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.customSections()</code></strong> function returns a copy of the contents of all custom sections in the given module with the given string name.</p>",
      "parameters": {
        "module": "The\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a>\nobject whose custom sections are being considered.",
        "sectionName": "The string name of the desired custom section."
      },
      "returns": "<p>A (possibly empty) array containing <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\" title=\"The documentation about this has not yet been written; please consider contributing!\" data-flaw=\"link1\"><code>ArrayBuffer</code></a> copies of the contents of all custom sections matching <code>sectionName</code>.</p>"
    },
    "webassembly.module.exports": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/module/exports",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.Module.exports()</code></strong> function returns an array containing descriptions of all the declared exports of the given <code>Module</code>.</p>",
      "parameters": {
        "module": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a>\nobject."
      },
      "returns": "<p>An array containing objects representing the exported functions of the given module.</p>"
    },
    "webassembly.module.imports": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/module/imports",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.imports()</code></strong> function returns an array containing descriptions of all the declared imports of the given <code>Module</code>.</p>",
      "parameters": {
        "module": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Module\"><code>WebAssembly.Module</code></a>\nobject."
      },
      "returns": "<p>An array containing objects representing the imported functions of the given module.</p>"
    },
    "webassembly.module.module": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/module/module",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>A <strong><code>WebAssembly.Module()</code></strong> constructor creates a new Module object containing stateless WebAssembly code that has already been compiled by the browser and can be efficiently <a href=\"$MDN_URL$/Web/API/Worker/postMessage\">shared with Workers</a>, and instantiated multiple times.</p>\n<p>The <code>WebAssembly.Module()</code> constructor function can be called to synchronously compile given WebAssembly binary code. However, the primary way to get a <code>Module</code> is through an asynchronous compilation function like <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/compile\"><code>WebAssembly.compile()</code></a>.</p>",
      "parameters": {
        "bufferSource": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Typed_arrays\">typed array</a>\nor\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a>\ncontaining the binary code of the .wasm module you want to compile."
      }
    },
    "webassembly.runtimeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/runtimeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.RuntimeError</strong></code> object is the error type that is thrown whenever WebAssembly specifies a <a href=\"http://webassembly.org/docs/semantics/#traps\">trap</a>.</p>"
    },
    "webassembly.runtimeerror.runtimeerror": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/runtimeerror/runtimeerror",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.RuntimeError()</strong></code> constructor creates a new WebAssembly <code>RuntimeError</code> object — the type that is thrown whenever WebAssembly specifies a <a href=\"http://webassembly.org/docs/semantics/#traps\">trap</a>.</p>",
      "parameters": {
        "message": "Human-readable description of the error.",
        "fileName": "The name of the file containing the code that caused the exception.",
        "lineNumber": "The line number of the code that caused the exception."
      }
    },
    "webassembly.table": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.Table()</strong></code> object is a JavaScript wrapper object — an array-like structure representing a WebAssembly Table, which stores function references. A table created by JavaScript or in WebAssembly code will be accessible and mutable from both JavaScript and WebAssembly.</p>\n<div class=\"note notecard\">\n<p><strong>Note</strong>: Tables can currently only store function references, but this will likely be expanded in the future.</p>\n</div>"
    },
    "webassembly.table.get": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table/get",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>get()</strong></code> prototype method of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table\"><code>WebAssembly.Table()</code></a> object retrieves a function reference stored at a given index.</p>",
      "parameters": {
        "index": "The index of the function reference you want to retrieve."
      },
      "returns": "<p>A function reference — this is an <a href=\"$MDN_URL$/WebAssembly/Exported_functions\">exported WebAssembly function</a>, a JavaScript wrapper for an underlying wasm function.</p>"
    },
    "webassembly.table.grow": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table/grow",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>grow()</strong></code> prototype method of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table\"><code>WebAssembly.Table</code></a> object increases the size of the Table instance by a specified number of elements.</p>",
      "parameters": {
        "number": "The number of elements you want to grow the table by."
      },
      "returns": "<p>The previous length of the table.</p>"
    },
    "webassembly.table.length": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table/length",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>length</strong></code> prototype property of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table\"><code>WebAssembly.Table</code></a> object returns the length of the table, i.e. the number of elements in the table.</p>"
    },
    "webassembly.table.set": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table/set",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>set()</strong></code> prototype method of the <a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/WebAssembly/Table\"><code>WebAssembly.Table</code></a> object mutates a reference stored at a given index to a different value.</p>",
      "parameters": {
        "index": "The index of the function reference you want to mutate.",
        "value": "The value you want to mutate the reference to. This must be an\n<a href=\"$MDN_URL$/WebAssembly/Exported_functions\">exported WebAssembly function</a>\n, a JavaScript wrapper for an underlying wasm function."
      },
      "returns": "<p>Void.</p>"
    },
    "webassembly.table.table": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/table/table",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <code><strong>WebAssembly.Table()</strong></code> constructor creates a new <code>Table</code> object of the given size and element type.</p>",
      "parameters": {
        "tableDescriptor": "An object that can contain the following members:\n<dl>\n<dt><em>element</em></dt>\n<dd>A string representing the type of value to be stored in the table. At the moment this can only have a value of <code>\"anyfunc\"</code> (functions).</dd>\n<dt><em>initial</em></dt>\n<dd>The initial number of elements of the WebAssembly Table.</dd>\n<dt><em>maximum <span class=\"badge inline optional\">Optional</span></em></dt>\n<dd>The maximum number of elements the WebAssembly Table is allowed to grow to.</dd>\n</dl>"
      }
    },
    "webassembly.validate": {
      "url": "$MDN_URL$/web/javascript/reference/global_objects/webassembly/validate",
      "status": [
        "StandardTrack"
      ],
      "doc": "<p>The <strong><code>WebAssembly.validate()</code></strong> function validates a given <a href=\"$MDN_URL$/Web/JavaScript/Typed_arrays\">typed array</a> of WebAssembly binary code, returning whether the bytes form a valid wasm module (<code>true</code>) or not (<code>false</code>).</p>",
      "parameters": {
        "bufferSource": "A\n<a href=\"$MDN_URL$/Web/JavaScript/Typed_arrays\">typed array</a>\nor\n<a href=\"$MDN_URL$/Web/JavaScript/Reference/Global_Objects/ArrayBuffer\">ArrayBuffer</a>\ncontaining WebAssembly binary code to be validated."
      },
      "returns": "<p>A boolean that specifies whether <code>bufferSource</code> is valid wasm code (<code>true</code>) or not (<code>false</code>).</p>"
    }
  }
}